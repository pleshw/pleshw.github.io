var Soundboard;(()=>{"use strict";var e={6401:(e,t,i)=>{i.d(t,{ComponentContainer:()=>n});class n{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(e,t){if("string"==typeof t){const e=document.getElementById(t);if(!e)throw new Error("Invalid template for scene component. Template id: "+t);this.templateElement=e}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(t),document.body.appendChild(this.templateElement);this.componentName=e}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(e,t){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let i=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,i+1),await e.build(t,`${this.componentName}${e.componentName.capitalizeFirstLetter()}${i}`)}async buildOnBody(e){this._element=document.createElement("div"),e&&(this._element.id=e);for(let e of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",e);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${e}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(e,t){for(let t of this.getTemplateCloneNodes())e.insertAdjacentElement("afterbegin",t);return await this.buildSubComponents(e),e}}},241:(e,t,i)=>{i.d(t,{MediaComponent:()=>m});var n=i(6696),s=i(1319),a=i(3164),r=i(739),o=i(2843),d=i(4271),l=i(2560);class m extends l.S{src;mediaElement;_container;_isReady=!1;_startsAt;_blockInteraction=!1;_divBlockInteraction;constructor(e){super(),this.src=e.src,this._container=e.container,this.mediaElement=e.mediaElement,this._blockInteraction=!!e.blockInteraction,e.mediaElementId&&(this.mediaElement.id=e.mediaElementId),this._startsAt=e.startsAt??0,this.mediaElement.classList.add("media-component"),this.mediaElement.addEventListener("ended",(()=>{this.stop()})),this._container.id||(this._container.id=e.mediaElementId+"MediaComponentContainer"),this._container.classList.add("media-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction(),this.setElementsAttributes(),this.mediaElement.setAttribute("width",`${this.dimensions.width}px`),this.mediaElement.setAttribute("height",`${this.dimensions.height}px`),this.mediaElement.load(),this.mediaElement.addEventListener("loadedmetadata",(()=>{this._isReady=!0,this.callEventsByName("onmediaready",this),this.callEventsByName("onmediacomponentready",this)}))}destroy(){this.container.remove()}get isReady(){return this._isReady}get isPlaying(){return!this.mediaElement.paused}set id(e){this.mediaElement.id=e}get id(){return this.mediaElement.id}get _videoInfoAttributeList(){return[["media-component-src",this.src],["media-component-name",this.name]]}get name(){return(0,o.replacePercentEncoding)((0,a.removeFilePath)(this.src))}setElementsAttributes(){(0,s.setAttributeListForElement)(this.mediaElement,this._videoInfoAttributeList),(0,s.setAttributeListForElement)(this.container,this._videoInfoAttributeList),(0,s.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.mediaElement.paused}get fileName(){return this.mediaElement.src||this.mediaElement.querySelector("source")?.src||""}set startsAt(e){this._startsAt=e}get startsAt(){return this._startsAt}set playerCurrentTime(e){this.mediaElement.currentTime=e}get playerCurrentTime(){return this.mediaElement.currentTime}get playerDuration(){return this.mediaElement.duration}get duration(){return this.duration-this._startsAt}get currentTime(){return this.playerCurrentTime-this.startsAt}set currentTime(e){const t=(0,r.clamp)(e+this.startsAt,this.startsAt,this.playerDuration);this.seek(t)}get sourceElements(){return Array.from(this.mediaElement.querySelectorAll("source"))}async changeSource(e,t){this._isReady=!1,this.id=t??this.id,this.src=e,this.mediaElement.innerHTML=(0,n.audioSourceElementHTML)(this.src),await this.load(),this.setElementsAttributes(),this.stop()}async load(){return new Promise(((e,t)=>{this._isReady=!1,this.mediaElement.readyState>=HTMLMediaElement.HAVE_METADATA?(this._isReady=!0,this.callEventsByName("onmedialoaded",this),this.callEventsByName("onmediacomponentloaded",this),e()):(this.mediaElement.addEventListener("loadedmetadata",(()=>{this._isReady=!0,this.callEventsByName("onmedialoaded",this),this.callEventsByName("onmediacomponentloaded",this),e()})),this.mediaElement.addEventListener("error",(e=>{this._isReady=!1,this.callEventsByName("onmedialoaderror",this),this.callEventsByName("onmediacomponentloaderror",this),t(e)}))),this.mediaElement.load()}))}playWithoutTriggerEvents(){var e=this.mediaElement.play();return void 0!==e&&e.then((e=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.mediaElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("media-component-playing"),this._divBlockInteraction.classList.add("media-component-playing"),this._container.classList.remove("media-component-paused"),this._divBlockInteraction.classList.remove("media-component-paused")}setClassesPaused(){this._container.classList.add("media-component-paused"),this._divBlockInteraction.classList.add("media-component-paused"),this._container.classList.remove("media-component-playing"),this._divBlockInteraction.classList.remove("media-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.mediaElement.currentTime=this.startsAt,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.mediaElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.mediaElement.volume=1,this.callEventsByName("onunmute",this),this}seek(e,t){return this.playerCurrentTime=e,this.callEventsByName("onseek",this),this}get dimensions(){return(0,s.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(e){const t=(0,s.createInvisibleDivAboveParent)({parentElement:e._container,id:`invisibleDivBlockInteraction${e._container.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("media-component-div-block-interaction"),t}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createMediaComponentOnBody(e){const t=(0,n.getMediaTypeBySource)(e.src),i=(0,n.getMediaDefaultsByMediaType)(t),s=await new d.MediaComponentFactory(e.src,i).buildOnBody();return new m({src:e.src,container:s,mediaElement:s.querySelector(t),mediaElementId:e.mediaElementId,blockInteraction:e.blockInteraction})}static async createMediaComponentByType(e){const t=(0,n.getMediaTypeBySource)(e.src),i=(0,n.getMediaDefaultsByMediaType)(t);if(e.container===document.body||!e.container)return this.createMediaComponentOnBody(e);const s=await new d.MediaComponentFactory(e.src,i).build(e.container);return new m({src:e.src,container:s,mediaElement:s.querySelector(t),mediaElementId:e.mediaElementId,blockInteraction:e.blockInteraction})}static async createMediaComponent(e){const t=(0,n.getMediaTypeBySource)(e.src),i=(0,n.getMediaDefaultsByMediaType)(t);if(!i||!t)throw new Error("Invalid media type");if(e.container===document.body||!e.container)return this.createMediaComponentOnBody(e);const s=await new d.MediaComponentFactory(e.src,i).build(e.container);return new m({src:e.src,container:s,mediaElement:s.querySelector(t),mediaElementId:e.mediaElementId,blockInteraction:e.blockInteraction})}}},4271:(e,t,i)=>{i.d(t,{MediaComponentFactory:()=>a});var n=i(6696),s=i(6401);class a extends s.ComponentContainer{constructor(e,t){super("audioComponent",(0,n.createMediaPlayer)([e],t))}async buildSubComponents(e){}}},6167:(e,t,i)=>{i.d(t,{templateSoundboardInput:()=>a,templateSoundboardItemContainer:()=>s});var n=i(2843);function s(e,t=""){return`\n  <div id="${e}SoundTableItem" class="sound-table-item-container">\n      <div class="sound-table-media-name-container position-absolute bottom-100 start-0 text-truncate" style="max-width: 100%;">\n        <span class="sound-table-media-name fw-bolder text-dark text-truncate" title="${(0,n.replacePercentEncoding)(t)}">\n          ${(0,n.replacePercentEncoding)(t)}\n        </span>\n      </div>\n  </div>\n  `.trim()}function a(e,t,i="",n=""){return`\n    <div class="sound-table-input-container text-truncate position-absolute top-0 start-0 w-100 h-100" style="z-index: 999 !important; pointer-events: none !important;">\n      <div class="form-floating position-absolute bottom-0 start-0" style="pointer-events: auto !important;">\n        <input type="text" value="${i}" class="form-control sound-table-input text-truncate" id="urlInput${e}" placeholder="${n}">\n        <label for="urlInput${e}">${t}</label>\n      </div>\n\n      <div class="sound-table-remove-item-container position-absolute top-0 end-0" style="pointer-events: auto !important;">\n        <button type="button" class="sound-table-remove-item-button btn-close badge rounded-0 bg-danger opacity-100 p-3">\n        </button>\n      </div>\n    </div>\n  `}},2560:(e,t,i)=>{i.d(t,{S:()=>s});var n=i(7930);class s extends n.ObjectEventListener{constructor(){super()}}},2152:(e,t,i)=>{function n(e){return`\n  <div id="${e}">\n  </div>\n  `.trim()}i.d(t,{templateBackgroundYoutubeIframeElement:()=>n})},5102:(e,t,i)=>{i.d(t,{YoutubeIframe:()=>d});var n=i(1319),s=(i(4763),i(739)),a=i(2152),r=(i(4785),i(3362),i(7930)),o=i(2560);class d extends o.S{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;_videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;topDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new r.ObjectEventListener;cachedVideoInfo={};constructor(e){if(d._dictYoutubeIframeById.has(e.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=e.iframeId,this._startsAt=e.startsAt??0,this._videoId=e.videoId,this._startMuted=!!e.startMuted,this._blockInteraction=!!e.blockInteraction,this._iframeContainer=d.getYoutubeIframeElement({iframeId:e.iframeId,classList:e.classList}),this._iframeParentElement=d.setupParentFromYoutubeIframe({parentElement:e.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=e.dimensions??(0,n.getElementDimensions)(this._iframeParentElement),d._dictYoutubeIframeById.set(e.iframeId,this),this.setVideoInfo().then((()=>{this.setExternalHTMLElementsAttributes()}))}get name(){return this.videoName}get container(){return this._iframeContainer}get videoId(){return(0,n.extractYouTubeId)(this._videoId)}destroy(){this.player.destroy(),this.container.remove(),d._dictYoutubeIframeById.delete(this.id)}async setVideoInfo(){this.cachedVideoInfo=await this.getVideoInfo()??{},this.videoName=this.cachedVideoInfo.title?this.cachedVideoInfo.title:"",this.channelName=this.cachedVideoInfo.author_name?this.cachedVideoInfo.author_name:"",this.videoThumb=this.cachedVideoInfo.thumbnail_url?this.cachedVideoInfo.thumbnail_url:"",this.channelURL=this.cachedVideoInfo.author_url?this.cachedVideoInfo.author_url:""}async changeVideo(e){if((0,n.isValidYoutubeUrlOrId)(e.videoId)){for(;!this.player||!this.player.loadVideoById;)await(0,n.delay)(100);this.prepareOptions(e),await this.loadVideo(),this.player.seekTo(this.startsAt,!0),this.isPlaying?this.playWithoutTriggerEvents():this.pauseWithoutTriggerEvents()}}prepareOptions(e){this.id=e.iframeId,this._videoId=e.videoId,this.startsAt=e.startsAt??this.startsAt}async loadVideo(){this._isPlayerReady=!1,this.player.loadVideoById({videoId:this.videoId,startSeconds:this.startsAt,suggestedQuality:"highres"}),await this.setVideoInfo(),this.setExternalHTMLElementsAttributes()}async loadVideoInfo(){return await this.setVideoInfo(),this.setExternalHTMLElementsAttributes(),this.cachedVideoInfo}async getVideoInfo(){const e=await(0,n.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));return e.error?(console.error(e.error),null):await e.data().json()}onPlayerReady(e){this._startMuted&&this.player.mute(),d._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),d.checkIfEveryIframeIsReady()}onPlayerStateChange(e){e.data===d._youtubeAPIReference.PlayerState.PLAYING?(this._isPlaying=!0,this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this,this.isPlaying)),100),this.setClassesIframePlaying()):this._playingObserverInterval&&(clearInterval(this._playingObserverInterval),this.setClassesIframePaused(),this._isPlaying=!1,this._playingObserverInterval=null),this.callEventsByName("playerstatechange",this,this.isPlaying),this.callEventsByName("onplayerstatechange",this,this.isPlaying)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(e){const t=(0,s.clamp)(e+this.startsAt,this.startsAt,this.playerDuration);this.seek(t)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,s.clamp)(this._startsAt,0,this._startsAt)}set startsAt(e){this._startsAt=(0,s.clamp)(e,0,e)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(e,t=!1,i=!1){return this.callEventsByName("onseek",e,t,i,this),e+=i?this._startsAt:0,this.player.seekTo(e,t),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...d._dictYoutubeIframeById.keys()].some((e=>!this._arrYoutubeIframeIdReady.includes(e)))||(this.arrObjectToSetOnEveryIframeReady.forEach((e=>e.setup(d._dictYoutubeIframeById))),d._dictYoutubeIframeById.forEach(((e,t)=>{e.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:e,classList:t}){const i=document.createElement("div");return i.classList.add("yt-iframe-container"),t&&i.classList.add(...t),i.id=`containerYoutubeIframe${e}`,i.insertAdjacentHTML("afterbegin",(0,a.templateBackgroundYoutubeIframeElement)(e)),i}static setupParentFromYoutubeIframe({parentElement:e,iframeContainer:t}){const i=e??document.body;return i.classList.add("yt-iframe-parent"),i.insertAdjacentElement("afterbegin",t),i}setExternalHTMLElements(){this.createInvisibleDivTop(),this.createInvisibleDivBlockInteraction(),this.setExternalHTMLElementsAttributes()}setExternalHTMLElementsAttributes(){this.setIframeContainerAttributes(),this.setTopDivAttributes(),this.setDivBlockInteractionAttributes()}createInvisibleDivTop(){this.topDiv=d.getInvisibleTopDiv(this),this.topDiv.style.zIndex="990"}createInvisibleDivBlockInteraction(){this._divBlockInteraction=d.getInvisibleDivBlockInteraction(this),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(e=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}setDivBlockInteractionAttributes(){this.divBlockInteraction&&(0,n.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}setIframeContainerAttributes(){this._iframeContainer&&(0,n.setAttributeListForElement)(this._iframeContainer,this._videoInfoAttributeList)}setTopDivAttributes(){this.topDiv&&(0,n.setAttributeListForElement)(this.topDiv,this._videoInfoAttributeList)}set blockInteraction(e){this._blockInteraction=e,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new d._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;get _videoInfoAttributeList(){return[["yt-iframe-id",this.id],["yt-iframe-video-name",this.videoName],["yt-iframe-video-channel-name",this.channelName],["yt-iframe-video-thumb-url",this.videoThumb],["yt-iframe-video-channel-url",this.channelURL]]}static async buildSingleIframe(e){if(e._isPlayerReady)return e;if(!document.getElementById("ytIframeAPIScriptTag")){var t=document.createElement("script");t.id="ytIframeAPIScriptTag",t.src="https://www.youtube.com/iframe_api";var i=document.getElementsByTagName("script")[0];i&&i.parentNode&&i.parentNode.insertBefore(t,i)}return await(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag"),await(0,n.pollForVariableAsync)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(t=>{d._youtubeAPIReference=t,e.build()})),await e.loadVideoInfo(),e}static buildIframes(){if(!document.getElementById("ytIframeAPIScriptTag")){var e=document.createElement("script");e.id="ytIframeAPIScriptTag",e.src="https://www.youtube.com/iframe_api";var t=document.getElementsByTagName("script")[0];t&&t.parentNode&&t.parentNode.insertBefore(e,t)}(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag").then((()=>{(0,n.pollForVariable)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(e=>{d._youtubeAPIReference=e,d.setYoutubeIframeElements()}))}))}build(){this.setExternalHTMLElements(),this.initPlayer()}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((e,t)=>{e.isPlayerReady||e.build()}))}static getInvisibleTopDiv(e){return(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleTopDivHoldToDrag${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:.2*e.dimensions.height}})}static getInvisibleDivBlockInteraction(e){const t=(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleDivBlockInteraction${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("yt-div-block-interaction"),t}}},4785:(e,t,i)=>{i.d(t,{YoutubeIframe:()=>n.YoutubeIframe});var n=i(5102)},3362:(e,t,i)=>{i(5102)},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(e,t="..."){return(this.length>e?this.substring(0,e)+t:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},4763:(e,t,i)=>{i(1319),i(8586)},8586:(e,t,i)=>{i(1319)},7930:(e,t,i)=>{i.d(t,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(e,t){const i={id:crypto.randomUUID(),event:t};return this.eventsByName.has(e.toLowerCase())?(this.eventsByName.get(e.toLowerCase()).push(i),i.id):(this.eventsByName.set(e.toLowerCase(),[i]),i.id)}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}removeEventById(e){this.eventsByName.forEach(((t,i)=>{this.eventsByName.set(i,t.filter((t=>t.id!==e)))}))}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e.event(...t)))}}},1319:(e,t,i)=>{i.d(t,{createInvisibleDivAboveParent:()=>I,delay:()=>y,extractYouTubeId:()=>d,getElementDimensions:()=>c,getElementFromHTML:()=>m,handlePromise:()=>r,hideElement:()=>f,insertElementAtIndex:()=>v,isValidYoutubeUrlOrId:()=>o,pollForVariable:()=>u,pollForVariableAsync:()=>h,setAttributeListForElement:()=>l,waitUntilElementExists:()=>p});const n=new Map,s=new Map,a=new Map;async function r(e){try{const t=await e;return{data:()=>t,error:null}}catch(e){return console.error(e),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:e instanceof Error?e:new Error(String(e))}}}function o(e){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(e)||/^[a-zA-Z0-9_-]{11}$/.test(e)}function d(e){const t=e.match(/[?&]v=([^?&]+)/);return t&&t[1]?t[1]:11===e.length?e:null}function l(e,t){t.forEach((([t,i])=>{e.setAttribute(t,i)}))}function m(e,t=!0){if(!(e=t?e.trim():e))return null;const i=document.createElement("template");i.innerHTML=e;const n=i.content.children;return 1===n.length?n[0]:Array.from(n)}function c(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height}}function u(e,t,i){const n=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(n),i(window[e]))}),100)}async function h(e,t,i){return new Promise((n=>{const s=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(s),i(window[e]),n())}),100)}))}function p(e){return new Promise((t=>{if(document.querySelector(e))return t(document.querySelector(e));const i=new MutationObserver((n=>{document.querySelector(e)&&(i.disconnect(),t(document.querySelector(e)))}));i.observe(document.body,{childList:!0,subtree:!0})}))}async function y(e){return new Promise((t=>setTimeout(t,e)))}function v(e,t,i){const n=e.childNodes;if(!(i>=0&&i<=n.length))throw console.error("Index out of bounds"),new Error("Index out of bounds");if(i===n.length)e.appendChild(t);else{const s=n[i];e.insertBefore(t,s)}}function I({parentElement:e,id:t,position:i,dimensions:n}){var s=document.createElement("div");return e.style.position||(e.style.position="relative"),s.id=t,s.style.position="absolute",s.style.width=n&&n.width?n.width.toString()+"px":"100%",s.style.height=n&&n.height?n.height.toString()+"px":"100%",s.style.top=(i?.top.toString()??"0")+"px",s.style.left=(i?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",e.appendChild(s),s}function f(e){e.style.display="block",e.style.position="absolute",e.style.zIndex="-1",e.style.opacity="0",e.style.width="0px !important",e.style.height="0px !important",e.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(e=>{e.repeat||function(e){for(const t of n)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e),function(e){for(const t of s)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e)})),window.addEventListener("keyup",(e=>{for(const t of a)e.code===t[0]&&t[1].forEach((t=>t(e)))}))},3164:(e,t,i)=>{i.d(t,{getFileExtension:()=>a,removeFilePath:()=>s});var n=i(2843);function s(e){const t=/(?:.*[\\/])([^\\/]+)$/.exec(e);return t&&t.length>1?t[1]:e}function a(e){if((0,n.isNullOrEmpty)(e))return"";const t=e.split(".").pop();if(t&&t!==e)return t;const i=e.split("/").pop();return i&&i!==e?i:""}},739:(e,t,i)=>{function n(e=0,t=0,i=100){return Math.max(t,Math.min(e,i))}i.d(t,{clamp:()=>n})},6696:(e,t,i)=>{i.d(t,{audioSourceElementHTML:()=>u,createMediaPlayer:()=>c,getMediaDefaultsByMediaType:()=>m,getMediaTypeBySource:()=>l}),i(241),i(2976);var n=i(1319),s=i(3164);const a=["mp3","wav","ogg","aac","wma","flac","m4a"],r=["mp4","avi","mov","mkv","wmv","flv","webm","m4v"],o={type:"audio",autoplay:!1,muted:!1,loop:!1,preload:"auto"},d={type:"video",autoplay:!1,muted:!1,loop:!1,preload:"auto"};function l(e){return function(e){const t=e.toLowerCase();if(a.includes(t))return"audio";if(r.includes(t))return"video";throw new Error("Invalid file extension: "+e)}((0,s.getFileExtension)(e))}function m(e){switch(e){case"video":return d;case"audio":return o;default:throw new Error("Invalid file extension at: "+e)}}function c(e,t){const i=t&&"video"===t.type;let a=i?function(e,t){return`<video playsinline ${h(t)}>\n    ${e.map((e=>function(e){return`<source src="${e}" type="video/${(0,s.getFileExtension)(e)}">`}(e))).reduce(((e,t)=>e+t),"")}\n  </video>`}(e,t):function(e,t){return`<audio playsinline ${h(t)}>\n    ${e.map((e=>u(e))).reduce(((e,t)=>e+t),"")}\n  </audio>`}(e,t);const r=(0,n.getElementFromHTML)(a);return document.body.insertAdjacentElement("afterbegin",r),i||(0,n.hideElement)(r),r}function u(e){return`<source src="${e}" type="audio/${(0,s.getFileExtension)(e)}">`}function h(e){return` ${e.autoplay?"autoplay":""} ${e.muted?"muted":""} ${e.loop?"loop":""} ${e.preload?'preload="'+e.preload+'"':""}`.trimEnd()}},2843:(e,t,i)=>{function n(e){return"string"!=typeof e||!e||""===e}function s(e){return e.replace(/[^a-zA-Z0-9]/g,"")}function a(e){return e.replace(/%20/g," ")}i.d(t,{isNullOrEmpty:()=>n,removeSpecialCharacters:()=>s,replacePercentEncoding:()=>a})}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,i),a.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{i.r(n),i.d(n,{Soundboard:()=>l});var e=i(7930),t=i(1319),s=i(3164),a=i(2843),r=i(241),o=i(4785),d=i(6167);class l extends e.ObjectEventListener{container;containersClassList;itemClassList;_setMediaControllers=new Set;_mapMediaControllersById=new Map;_mapInputByComponentId=new Map;constructor(e){super(),this.container=e.container,this.containersClassList=e.containersClassList??[],this.itemClassList=e.itemClassList??[],this.addMediaList(e.arrMediaSrc)}static getInstantMP3DownloadLink(e){if(!l.isMyInstantsLink(e))throw new Error("Not a MyInstants link");const t=e.match(/\/instant\/([^/]+)\/?/);return!t||t.length<2?e:`https://www.myinstants.com/media/sounds/${t[1].replace(/-\d+$/,"")}.mp3`}static isMyInstantsLink(e){return e.includes("myinstants.com")}async addMediaList(e){let t=[];return await Promise.all(e.map((async e=>{const i=this.getSourceInputDefaultOptions(e),n=await this.addMedia(i);t.push(n)}))),t}getCustomMediaComponentMediaOptions(e){const t=structuredClone(e);return l.isMyInstantsLink(e.src)&&(t.src=l.getInstantMP3DownloadLink(e.src)),t}get components(){return Array.from(this._setMediaControllers)}get length(){return this.components.length}async addMedia(e,i){let n;return n=(0,t.isValidYoutubeUrlOrId)(e.src)?await this.addIframe(this.container.id,e,i):await this.addMediaComponent(this.container.id,this.getCustomMediaComponentMediaOptions(e),i),this.setComponentNameById(n.media.id,n.media.name),n}getSourceInputDefaultOptions(e){return"string"==typeof e?{src:e,autoRepeatOnPlay:!0}:e}addYoutubeList(e=[]){e.map((e=>this.getSourceInputDefaultOptions(e))).forEach((e=>{this.addIframe(`${this.container.id}IframeTableItem${e.src}`,e)}))}addAudioList(e=[]){e.map((e=>this.getSourceInputDefaultOptions(e))).forEach((e=>this.addMediaComponent(this.container.id,this.getCustomMediaComponentMediaOptions(e))))}addComponentInteractionBlockEvent(e,t){e.media.addEventListener("oninteractionblocked",(()=>{e.media.currentTime=0,t.autoRepeatOnPlay?e.media.playWithoutTriggerEvents():e.media.toggle()}))}getInputBySource(e){if(!this._mapInputByComponentId.has(e))throw new Error("Element src not on sound table.");return this._mapInputByComponentId.get(e)}get componentsControllers(){return Array.from(this._setMediaControllers)}getElementMediaContainer(e,i=""){const n=(0,t.getElementFromHTML)((0,d.templateSoundboardItemContainer)(e,i));return n.classList.add(...this.containersClassList),n}setComponentNameById(e,t){const i=this.getElementItemNameContainerById(e);i.innerHTML=(0,a.replacePercentEncoding)(t),i.setAttribute("title",(0,a.replacePercentEncoding)(t))}getElementItemNameContainerById(e){const t=this._mapMediaControllersById.get(e);if(!t)throw new Error("Component does not exist.");const i=t.mediaContainer.querySelector(".sound-table-media-name");if(!i)throw new Error("Media name for this element was removed.");return i}getNewMediaComponentId(e,t){return(0,a.removeSpecialCharacters)(e+"AudioElement"+(0,s.removeFilePath)(t.src)+crypto.randomUUID())}getNewYoutubeIframeId(e,t){return(0,a.removeSpecialCharacters)(e+"YoutubeIframe"+(0,s.removeFilePath)(t.src)+crypto.randomUUID())}async addMediaComponent(e,i,n){const s=this.getNewMediaComponentId(e,i);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);n=n??this.length;const a=this.getElementMediaContainer(e);a.classList.add("loading","not-ready"),(0,t.insertElementAtIndex)(this.container,a,n);const o=await r.MediaComponent.createMediaComponent({src:i.src,mediaElementId:s,blockInteraction:!0,container:a});await o.load(),o.startsAt=i.startsAt??0;const d=this.addInputElementToContainer(a,o,o.id,i.src),l={media:o,input:d.input,inputContainer:d.container,buttonRemoveItem:d.buttonElement,mediaContainer:a,itemOptions:i,index:n};return o.container.classList.add("sound-table-item",...this.itemClassList),this._setMediaControllers.add(l),this._mapMediaControllersById.set(o.id,l),this.addComponentInteractionBlockEvent(l,i),this.setComponentNameById(o.id,o.name),a.classList.remove("loading","not-ready"),l}async addIframe(e,i,n){const s=this.getNewYoutubeIframeId(e,i);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);n=n??this.length;const a=this.getElementMediaContainer(e);a.classList.add("loading","not-ready"),(0,t.insertElementAtIndex)(this.container,a,n);const r=new o.YoutubeIframe({iframeId:s,videoId:i.src,parentElement:a,startsAt:i.startsAt??0,classList:["sound-table-item","overflow-hidden",...this.itemClassList],blockInteraction:!0}),d=this.addInputElementToContainer(a,r,r.id,i.src),l={media:r,input:d.input,inputContainer:d.container,buttonRemoveItem:d.buttonElement,mediaContainer:a,itemOptions:i,index:n};return this._setMediaControllers.add(l),this._mapMediaControllersById.set(r.id,l),await o.YoutubeIframe.buildSingleIframe(r),this.addComponentInteractionBlockEvent(l,i),this.setComponentNameById(s,r.videoName),a.classList.remove("loading","not-ready"),l}async changeComponentSourceToInputValue(e){const t=this._mapMediaControllersById.get(e);if(!t)throw new Error("Component id does not exist");return await this.changeComponentSource(e,t.input.value)}async changeComponentSource(e,i){let n=this._mapMediaControllersById.get(e);if(!n)throw new Error("Component id does not exist");return(0,t.isValidYoutubeUrlOrId)(i)&&n.media instanceof o.YoutubeIframe?await this.changeYoutubeIframeSource(e,i):(this.removeComponentById(e),n=await this.addMedia({src:i,autoRepeatOnPlay:n.itemOptions.autoRepeatOnPlay},n.index)),this._mapMediaControllersById.delete(e),this._mapInputByComponentId.delete(e),this._mapMediaControllersById.set(n.media.id,n),this._mapInputByComponentId.set(n.media.id,n.input),this.setComponentNameById(n.media.id,n.media.name),n}async changeMediaComponentSource(e,t){const i=this._mapMediaControllersById.get(e);if(!i)throw new Error("Component id does not exist");if(!(i.media instanceof r.MediaComponent))throw new Error("Invalid operation");i.itemOptions.src=t;const n=this.getCustomMediaComponentMediaOptions(i.itemOptions),s=this.getNewMediaComponentId(i.mediaContainer.id,n);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);await i.media.changeSource(n.src,s)}async changeYoutubeIframeSource(e,i){const n=this._mapMediaControllersById.get(e);if(!n)throw new Error("Component id does not exist");if(!(n.media instanceof o.YoutubeIframe))throw new Error("Invalid operation");if(!(0,t.isValidYoutubeUrlOrId)(i))throw new Error("Invalid youtube URL");n.itemOptions.src=i;const s=this.getNewYoutubeIframeId(n.mediaContainer.id,n.itemOptions);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);await n.media.changeVideo({iframeId:s,videoId:i,startsAt:0})}addInputElementToContainer(e,i,n,s){const a=(0,t.getElementFromHTML)((0,d.templateSoundboardInput)(n,"Source",s));e.insertAdjacentElement("beforeend",a);const r=a.querySelector(".sound-table-input"),o=a.querySelector(".sound-table-remove-item-button");return r.addEventListener("input",(()=>{const e=this.components.filter((e=>e.media.id!==i.id));this.callEventsByName("input",r.value,i,e),this.callEventsByName("oninput",r.value,i,e),this.callEventsByName("inputchange",r.value,i,e),this.callEventsByName("oninputchange",r.value,i,e)})),o.addEventListener("click",(()=>{const e=this.components.filter((e=>e.media.id!==i.id));this.removeItem(i),this.callEventsByName("removeelement",r.value,i,e),this.callEventsByName("onremoveelement",r.value,i,e),this.callEventsByName("removeitem",r.value,i,e),this.callEventsByName("onremoveitem",r.value,i,e)})),{input:r,container:a,buttonElement:o}}removeComponent(e){return this.removeComponentById(e.media.id)}removeItem(e){return this.removeComponentById(e.id)}removeComponentById(e){const t=this._mapMediaControllersById.get(e);t&&(t.media.destroy(),t.mediaContainer.remove(),this._mapMediaControllersById.delete(e),this._mapInputByComponentId.delete(e),this._setMediaControllers.delete(t))}}})(),Soundboard=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLd2MsV0FBWU4sR0FFakJsYyxLQUFLaUQsaUJBQWtCLGdCQUFpQm9aLEVBQWFqVSxNQUFPOFQsRUFBZ0JJLEdBQzVFdGMsS0FBS2lELGlCQUFrQixrQkFBbUJvWixFQUFhalUsTUFBTzhULEVBQWdCSSxHQUM5RXRjLEtBQUtpRCxpQkFBa0IsYUFBY29aLEVBQWFqVSxNQUFPOFQsRUFBZ0JJLEdBQ3pFdGMsS0FBS2lELGlCQUFrQixlQUFnQm9aLEVBQWFqVSxNQUFPOFQsRUFBZ0JJLEVBQXlCLElBRy9GLENBQ0wxSyxNQUFPeUssRUFDUDlhLFVBQVc2YSxFQUNYZixjQUFlQSxFQUVuQixDQUVBLGVBQUFvQixDQUFpQmhjLEdBQ2YsT0FBT1QsS0FBSzhiLG9CQUFxQnJiLEVBQVVpWixNQUFNdlksR0FDbkQsQ0FFQSxVQUFBcWIsQ0FBWS9iLEdBQ1YsT0FBT1QsS0FBSzhiLG9CQUFxQnJiLEVBQVVVLEdBQzdDLENBRUEsbUJBQUEyYSxDQUFxQi9ULEdBQ25CLE1BQU10SCxFQUFZVCxLQUFLb1kseUJBQXlCdFgsSUFBS2lILEdBQy9DdEgsSUFJTkEsRUFBVWlaLE1BQU14VyxVQUNoQnpDLEVBQVVrYSxlQUFleFgsU0FFekJuRCxLQUFLb1kseUJBQXlCN04sT0FBUXhDLEdBQ3RDL0gsS0FBS3FZLHVCQUF1QjlOLE9BQVF4QyxHQUNwQy9ILEtBQUtrWSxxQkFBcUIzTixPQUFROUosR0FDcEMsRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0NvbXBvbmVudENvbnRhaW5lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9NZWRpYUNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9NZWRpYUNvbXBvbmVudEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvU291bmRib2FyZC9UZW1wbGF0ZXNTb3VuZGJvYXJkLnRzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1R5cGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1lvdXR1YmVJZnJhbWUvVGVtcGxhdGVzWW91dHViZUlmcmFtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Zb3V0dWJlSWZyYW1lL1lvdXR1YmVJZnJhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V4dGVuc2lvbnMvU3RyaW5nRXh0ZW5zaW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRXh0cmFzL09iamVjdEV2ZW50TGlzdGVuZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xzL0RPTVRvb2xzLnRzIiwid2VicGFjazovLy8uL3NyYy9Ub29scy9GaWxlVG9vbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xzL01hdGhUb29scy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVG9vbHMvTWVkaWFUb29scy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVG9vbHMvU3RyaW5nVG9vbHMudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1NvdW5kYm9hcmQvU291bmRib2FyZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50Q29udGFpbmVyIHtcclxuICBwcm90ZWN0ZWQgX2VsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgcHVibGljIHRlbXBsYXRlRWxlbWVudDogSFRNTFRlbXBsYXRlRWxlbWVudDtcclxuICBwdWJsaWMgcmVhZG9ubHkgY29tcG9uZW50TmFtZTogc3RyaW5nO1xyXG4gIHByb3RlY3RlZCBzdWJDb21wb25lbnRDb3VudEJ5TmFtZTogTWFwPHN0cmluZywgbnVtYmVyPiA9IG5ldyBNYXAoKTtcclxuICBwcm90ZWN0ZWQgc3ViQ29tcG9uZW50czogSFRNTEVsZW1lbnRbXSA9IFtdO1xyXG5cclxuICAvLy8gVGVtcGxhdGUgaXMgZWl0aGVyIGEgaWQgZm9yIGEgaHRtbCB0ZW1wbGF0ZSBlbGVtZW50IG9yIGFuIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGluc2VydGVkIGFzIGEgdGVtcGxhdGUgaW5zaWRlIGRvY3VtZW50LmJvZHlcclxuICBjb25zdHJ1Y3RvciggY29tcG9uZW50TmFtZTogc3RyaW5nLCB0ZW1wbGF0ZTogc3RyaW5nIHwgSFRNTEVsZW1lbnQgKSB7XHJcbiAgICBpZiAoIHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIGNvbnN0IHRlbXBsYXRlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCB0ZW1wbGF0ZSApIGFzIEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XHJcblxyXG4gICAgICBpZiAoICF0ZW1wbGF0ZUVsZW1lbnQgKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkludmFsaWQgdGVtcGxhdGUgZm9yIHNjZW5lIGNvbXBvbmVudC4gVGVtcGxhdGUgaWQ6IFwiICsgdGVtcGxhdGUgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy50ZW1wbGF0ZUVsZW1lbnQgPSB0ZW1wbGF0ZUVsZW1lbnQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRlbXBsYXRlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGVtcGxhdGVcIiApO1xyXG4gICAgICB0aGlzLnRlbXBsYXRlRWxlbWVudC5jb250ZW50LmFwcGVuZENoaWxkKCB0ZW1wbGF0ZSApO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCB0aGlzLnRlbXBsYXRlRWxlbWVudCApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWU7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZ2V0VGVtcGxhdGVDbG9uZU5vZGVzKCk6IEhUTUxDb2xsZWN0aW9uIHtcclxuICAgIHJldHVybiAoIHRoaXMudGVtcGxhdGVFbGVtZW50LmNvbnRlbnQuY2xvbmVOb2RlKCB0cnVlICkgYXMgRG9jdW1lbnRGcmFnbWVudCApLmNoaWxkcmVuO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFic3RyYWN0IGJ1aWxkU3ViQ29tcG9uZW50cyggcGFyZW50OiBIVE1MRWxlbWVudCApOiBQcm9taXNlPEhUTUxFbGVtZW50W10gfCB2b2lkPjtcclxuXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGJ1aWxkU2luZ2xlU3ViQ29tcG9uZW50KCBjb21wb25lbnQ6IENvbXBvbmVudENvbnRhaW5lciwgcGFyZW50OiBIVE1MRWxlbWVudCApOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XHJcbiAgICBpZiAoIHRoaXMuc3ViQ29tcG9uZW50Q291bnRCeU5hbWUuaGFzKCB0aGlzLmNvbXBvbmVudE5hbWUgKSApIHtcclxuICAgICAgdGhpcy5zdWJDb21wb25lbnRDb3VudEJ5TmFtZS5zZXQoIHRoaXMuY29tcG9uZW50TmFtZSwgMCApO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjb21wb25lbnRDb3VudCA9IHRoaXMuc3ViQ29tcG9uZW50Q291bnRCeU5hbWUuZ2V0KCB0aGlzLmNvbXBvbmVudE5hbWUgKSE7XHJcblxyXG4gICAgdGhpcy5zdWJDb21wb25lbnRDb3VudEJ5TmFtZS5zZXQoIHRoaXMuY29tcG9uZW50TmFtZSwgY29tcG9uZW50Q291bnQgKyAxICk7XHJcblxyXG4gICAgcmV0dXJuIGF3YWl0IGNvbXBvbmVudC5idWlsZCggcGFyZW50LCBgJHsgdGhpcy5jb21wb25lbnROYW1lIH0keyBjb21wb25lbnQuY29tcG9uZW50TmFtZS5jYXBpdGFsaXplRmlyc3RMZXR0ZXIoKSB9JHsgY29tcG9uZW50Q291bnQgfWAgKTtcclxuICB9XHJcblxyXG4gIC8vLyBHZXRzIHRoZSB0ZW1wbGF0ZSBub2RlcyBhbmQgaW5zZXJ0IHRoZW0gaW50byBhIGNvbnRhaW5lciB0aGVuIHJldHVybnMgdGhlIGNvbnRhaW5lclxyXG4gIHB1YmxpYyBhc3luYyBidWlsZE9uQm9keSggZWxlbWVudElkPzogc3RyaW5nICk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG5cclxuICAgIGlmICggZWxlbWVudElkICkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LmlkID0gZWxlbWVudElkO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoIGxldCBpdGVtIG9mIHRoaXMuZ2V0VGVtcGxhdGVDbG9uZU5vZGVzKCkgKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCAnYWZ0ZXJiZWdpbicsIGl0ZW0gKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoICF0aGlzLl9lbGVtZW50ICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIGBGYWlsIGJ1aWxkaW5nIFNjZW5lQ29tcG9uZW50LiBFbGVtZW50SWQ6ICR7IGVsZW1lbnRJZCB9YCApO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IHRoaXMuYnVpbGRTdWJDb21wb25lbnRzKCBkb2N1bWVudC5ib2R5ICk7XHJcblxyXG4gICAgZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEVsZW1lbnQoICdiZWZvcmVlbmQnLCB0aGlzLl9lbGVtZW50ICk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvLy8gR2V0cyB0aGUgdGVtcGxhdGUgbm9kZXMgYW5kIGluc2VydCB0aGVtIGludG8gYSBjb250YWluZXIgdGhlbiByZXR1cm5zIHRoZSBjb250YWluZXJcclxuICBwdWJsaWMgYXN5bmMgYnVpbGQoIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGVsZW1lbnRJZD86IHN0cmluZyApOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XHJcbiAgICBmb3IgKCBsZXQgaXRlbSBvZiB0aGlzLmdldFRlbXBsYXRlQ2xvbmVOb2RlcygpICkge1xyXG4gICAgICBjb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCAnYWZ0ZXJiZWdpbicsIGl0ZW0gKTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCB0aGlzLmJ1aWxkU3ViQ29tcG9uZW50cyggY29udGFpbmVyICk7XHJcblxyXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBQb3NzaWJsZU1lZGlhVHlwZSwgYXVkaW9Tb3VyY2VFbGVtZW50SFRNTCwgZGVmYXVsdEF1ZGlvUGxheWVyQ29uZmlnLCBkZWZhdWx0VmlkZW9QbGF5ZXJDb25maWcsIGdldE1lZGlhRGVmYXVsdHNCeUV4dGVuc2lvbiwgZ2V0TWVkaWFEZWZhdWx0c0J5TWVkaWFUeXBlLCBnZXRNZWRpYURlZmF1bHRzQnlTb3VyY2UsIGdldE1lZGlhVHlwZUJ5RXh0ZW5zaW9uLCBnZXRNZWRpYVR5cGVCeVNvdXJjZSB9IGZyb20gJy4uL1Rvb2xzL01lZGlhVG9vbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVJbnZpc2libGVEaXZBYm92ZVBhcmVudCwgZ2V0RWxlbWVudERpbWVuc2lvbnMsIHNldEF0dHJpYnV0ZUxpc3RGb3JFbGVtZW50IH0gZnJvbSAnLi4vVG9vbHMvRE9NVG9vbHMnO1xyXG5pbXBvcnQgeyBnZXRGaWxlRXh0ZW5zaW9uLCByZW1vdmVGaWxlUGF0aCB9IGZyb20gJy4uL1Rvb2xzL0ZpbGVUb29scyc7XHJcbmltcG9ydCB7IERpbWVuc2lvbnMsIGNsYW1wIH0gZnJvbSAnLi4vVG9vbHMvTWF0aFRvb2xzJztcclxuaW1wb3J0IHsgcmVwbGFjZVBlcmNlbnRFbmNvZGluZyB9IGZyb20gJy4uL1Rvb2xzL1N0cmluZ1Rvb2xzJztcclxuaW1wb3J0IHsgTWVkaWFDb21wb25lbnRGYWN0b3J5IH0gZnJvbSAnLi9NZWRpYUNvbXBvbmVudEZhY3RvcnknO1xyXG5pbXBvcnQgeyBNZWRpYVBsYXllciB9IGZyb20gJy4vVHlwZXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgTWVkaWFDb21wb25lbnRPcHRpb25zID0ge1xyXG4gIHNyYzogc3RyaW5nO1xyXG4gIG1lZGlhRWxlbWVudElkOiBzdHJpbmc7XHJcbiAgbWVkaWFFbGVtZW50OiBIVE1MTWVkaWFFbGVtZW50O1xyXG4gIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgYmxvY2tJbnRlcmFjdGlvbj86IGJvb2xlYW47XHJcbiAgc3RhcnRzQXQ/OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBDcmVhdGVNZWRpYUNvbXBvbmVudE9wdGlvbnMgPSB7XHJcbiAgc3JjOiBzdHJpbmc7XHJcbiAgbWVkaWFFbGVtZW50SWQ6IHN0cmluZztcclxuICBibG9ja0ludGVyYWN0aW9uPzogYm9vbGVhbjtcclxuICBjb250YWluZXI/OiBIVE1MRWxlbWVudDtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBNZWRpYUNvbXBvbmVudCBleHRlbmRzIE1lZGlhUGxheWVyIHtcclxuICBwdWJsaWMgc3JjOiBzdHJpbmc7XHJcbiAgcHVibGljIG1lZGlhRWxlbWVudDogSFRNTE1lZGlhRWxlbWVudDtcclxuICBwcml2YXRlIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG5cclxuXHJcbiAgcHJpdmF0ZSBfaXNSZWFkeTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByaXZhdGUgX3N0YXJ0c0F0OiBudW1iZXI7XHJcblxyXG4gIHByb3RlY3RlZCBfYmxvY2tJbnRlcmFjdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByb3RlY3RlZCBfZGl2QmxvY2tJbnRlcmFjdGlvbjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zOiBNZWRpYUNvbXBvbmVudE9wdGlvbnMgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuc3JjID0gb3B0aW9ucy5zcmM7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcclxuICAgIHRoaXMubWVkaWFFbGVtZW50ID0gb3B0aW9ucy5tZWRpYUVsZW1lbnQ7XHJcbiAgICB0aGlzLl9ibG9ja0ludGVyYWN0aW9uID0gb3B0aW9ucy5ibG9ja0ludGVyYWN0aW9uID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgIGlmICggb3B0aW9ucy5tZWRpYUVsZW1lbnRJZCApIHtcclxuICAgICAgdGhpcy5tZWRpYUVsZW1lbnQuaWQgPSBvcHRpb25zLm1lZGlhRWxlbWVudElkO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3N0YXJ0c0F0ID0gb3B0aW9ucy5zdGFydHNBdCA/PyAwO1xyXG5cclxuICAgIHRoaXMubWVkaWFFbGVtZW50LmNsYXNzTGlzdC5hZGQoICdtZWRpYS1jb21wb25lbnQnICk7XHJcbiAgICB0aGlzLm1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnZW5kZWQnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGlmICggIXRoaXMuX2NvbnRhaW5lci5pZCApIHtcclxuICAgICAgdGhpcy5fY29udGFpbmVyLmlkID0gb3B0aW9ucy5tZWRpYUVsZW1lbnRJZCArICdNZWRpYUNvbXBvbmVudENvbnRhaW5lcic7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCggJ21lZGlhLWNvbXBvbmVudC1jb250YWluZXInICk7XHJcblxyXG4gICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbiA9IHRoaXMuZ2V0SW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbiggdGhpcyApO1xyXG4gICAgdGhpcy5zZXR1cEludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24oKTtcclxuICAgIHRoaXMuc2V0RWxlbWVudHNBdHRyaWJ1dGVzKCk7XHJcblxyXG4gICAgdGhpcy5tZWRpYUVsZW1lbnQuc2V0QXR0cmlidXRlKCAnd2lkdGgnLCBgJHsgdGhpcy5kaW1lbnNpb25zLndpZHRoIH1weGAgKTtcclxuICAgIHRoaXMubWVkaWFFbGVtZW50LnNldEF0dHJpYnV0ZSggJ2hlaWdodCcsIGAkeyB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IH1weGAgKTtcclxuICAgIHRoaXMubWVkaWFFbGVtZW50LmxvYWQoKTtcclxuXHJcbiAgICB0aGlzLm1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbG9hZGVkbWV0YWRhdGEnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2lzUmVhZHkgPSB0cnVlO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbm1lZGlhcmVhZHknLCB0aGlzICk7XHJcbiAgICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ubWVkaWFjb21wb25lbnRyZWFkeScsIHRoaXMgKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNSZWFkeSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc1JlYWR5O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc1BsYXlpbmcoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIXRoaXMubWVkaWFFbGVtZW50LnBhdXNlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgaWQoIHZhbDogc3RyaW5nICkge1xyXG4gICAgdGhpcy5tZWRpYUVsZW1lbnQuaWQgPSB2YWw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlkKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5tZWRpYUVsZW1lbnQuaWQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldCBfdmlkZW9JbmZvQXR0cmlidXRlTGlzdCgpOiBbc3RyaW5nLCBzdHJpbmddW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgWydtZWRpYS1jb21wb25lbnQtc3JjJywgdGhpcy5zcmNdLFxyXG4gICAgICBbJ21lZGlhLWNvbXBvbmVudC1uYW1lJywgdGhpcy5uYW1lXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHJlcGxhY2VQZXJjZW50RW5jb2RpbmcoIHJlbW92ZUZpbGVQYXRoKCB0aGlzLnNyYyApICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldEVsZW1lbnRzQXR0cmlidXRlcygpIHtcclxuICAgIHNldEF0dHJpYnV0ZUxpc3RGb3JFbGVtZW50KCB0aGlzLm1lZGlhRWxlbWVudCwgdGhpcy5fdmlkZW9JbmZvQXR0cmlidXRlTGlzdCApO1xyXG4gICAgc2V0QXR0cmlidXRlTGlzdEZvckVsZW1lbnQoIHRoaXMuY29udGFpbmVyLCB0aGlzLl92aWRlb0luZm9BdHRyaWJ1dGVMaXN0ICk7XHJcbiAgICBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCggdGhpcy5kaXZCbG9ja0ludGVyYWN0aW9uLCB0aGlzLl92aWRlb0luZm9BdHRyaWJ1dGVMaXN0ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRpdkJsb2NrSW50ZXJhY3Rpb24oKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGNvbnRhaW5lcigpOiBIVE1MRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwYXVzZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5tZWRpYUVsZW1lbnQucGF1c2VkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBmaWxlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMubWVkaWFFbGVtZW50LnNyYyB8fCB0aGlzLm1lZGlhRWxlbWVudC5xdWVyeVNlbGVjdG9yKCAnc291cmNlJyApPy5zcmMgfHwgJyc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IHN0YXJ0c0F0KCB0OiBudW1iZXIgKSB7XHJcbiAgICB0aGlzLl9zdGFydHNBdCA9IHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHN0YXJ0c0F0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRzQXQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IHBsYXllckN1cnJlbnRUaW1lKCB0OiBudW1iZXIgKSB7XHJcbiAgICB0aGlzLm1lZGlhRWxlbWVudC5jdXJyZW50VGltZSA9IHQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBsYXllckN1cnJlbnRUaW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5tZWRpYUVsZW1lbnQuY3VycmVudFRpbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBsYXllckR1cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5tZWRpYUVsZW1lbnQuZHVyYXRpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGR1cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5kdXJhdGlvbiAtIHRoaXMuX3N0YXJ0c0F0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjdXJyZW50VGltZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMucGxheWVyQ3VycmVudFRpbWUgLSB0aGlzLnN0YXJ0c0F0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCBjdXJyZW50VGltZSggdDogbnVtYmVyICkge1xyXG4gICAgY29uc3QgdGltZUNvbnNpZGVyaW5nU3RhcnQgPSBjbGFtcCggdCArIHRoaXMuc3RhcnRzQXQsIHRoaXMuc3RhcnRzQXQsIHRoaXMucGxheWVyRHVyYXRpb24gKTtcclxuICAgIHRoaXMuc2VlayggdGltZUNvbnNpZGVyaW5nU3RhcnQgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc291cmNlRWxlbWVudHMoKTogSFRNTFNvdXJjZUVsZW1lbnRbXSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSggdGhpcy5tZWRpYUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCggJ3NvdXJjZScgKSApIGFzIEhUTUxTb3VyY2VFbGVtZW50W107XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgY2hhbmdlU291cmNlKCBzcmM6IHN0cmluZywgbmV3SWQ/OiBzdHJpbmcgKSB7XHJcbiAgICB0aGlzLl9pc1JlYWR5ID0gZmFsc2U7XHJcbiAgICB0aGlzLmlkID0gbmV3SWQgPz8gdGhpcy5pZDtcclxuICAgIHRoaXMuc3JjID0gc3JjO1xyXG4gICAgdGhpcy5tZWRpYUVsZW1lbnQuaW5uZXJIVE1MID0gYXVkaW9Tb3VyY2VFbGVtZW50SFRNTCggdGhpcy5zcmMgKTtcclxuICAgIGF3YWl0IHRoaXMubG9hZCgpO1xyXG4gICAgdGhpcy5zZXRFbGVtZW50c0F0dHJpYnV0ZXMoKTtcclxuICAgIHRoaXMuc3RvcCgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGxvYWQoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xyXG4gICAgICB0aGlzLl9pc1JlYWR5ID0gZmFsc2U7XHJcbiAgICAgIGlmICggdGhpcy5tZWRpYUVsZW1lbnQucmVhZHlTdGF0ZSA+PSBIVE1MTWVkaWFFbGVtZW50LkhBVkVfTUVUQURBVEEgKSB7XHJcbiAgICAgICAgdGhpcy5faXNSZWFkeSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25tZWRpYWxvYWRlZCcsIHRoaXMgKTtcclxuICAgICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbm1lZGlhY29tcG9uZW50bG9hZGVkJywgdGhpcyApO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnbG9hZGVkbWV0YWRhdGEnLCAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLl9pc1JlYWR5ID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ubWVkaWFsb2FkZWQnLCB0aGlzICk7XHJcbiAgICAgICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbm1lZGlhY29tcG9uZW50bG9hZGVkJywgdGhpcyApO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgdGhpcy5tZWRpYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgKCBlcnJvciApID0+IHtcclxuICAgICAgICAgIHRoaXMuX2lzUmVhZHkgPSBmYWxzZTtcclxuICAgICAgICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ubWVkaWFsb2FkZXJyb3InLCB0aGlzICk7XHJcbiAgICAgICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbm1lZGlhY29tcG9uZW50bG9hZGVycm9yJywgdGhpcyApO1xyXG4gICAgICAgICAgcmVqZWN0KCBlcnJvciApO1xyXG4gICAgICAgIH0gKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5tZWRpYUVsZW1lbnQubG9hZCgpO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsYXlXaXRob3V0VHJpZ2dlckV2ZW50cygpIHtcclxuICAgIHZhciBwbGF5UHJvbWlzZSA9IHRoaXMubWVkaWFFbGVtZW50LnBsYXkoKTtcclxuXHJcbiAgICBpZiAoIHBsYXlQcm9taXNlICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgIHBsYXlQcm9taXNlLnRoZW4oIF8gPT4geyB9IClcclxuICAgICAgICAuY2F0Y2goICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgIH0gKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNldENsYXNzZXNQbGF5aW5nKCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwYXVzZVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCkge1xyXG4gICAgdGhpcy5tZWRpYUVsZW1lbnQucGF1c2UoKTtcclxuICAgIHRoaXMuc2V0Q2xhc3Nlc1BhdXNlZCgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzZXRDbGFzc2VzUGxheWluZygpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCAnbWVkaWEtY29tcG9uZW50LXBsYXlpbmcnICk7XHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLmNsYXNzTGlzdC5hZGQoICdtZWRpYS1jb21wb25lbnQtcGxheWluZycgKTtcclxuXHJcbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSggJ21lZGlhLWNvbXBvbmVudC1wYXVzZWQnICk7XHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoICdtZWRpYS1jb21wb25lbnQtcGF1c2VkJyApO1xyXG4gIH1cclxuXHJcbiAgc2V0Q2xhc3Nlc1BhdXNlZCgpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCAnbWVkaWEtY29tcG9uZW50LXBhdXNlZCcgKTtcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uY2xhc3NMaXN0LmFkZCggJ21lZGlhLWNvbXBvbmVudC1wYXVzZWQnICk7XHJcblxyXG4gICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoICdtZWRpYS1jb21wb25lbnQtcGxheWluZycgKTtcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSggJ21lZGlhLWNvbXBvbmVudC1wbGF5aW5nJyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsYXkoKSB7XHJcbiAgICB0aGlzLnBsYXlXaXRob3V0VHJpZ2dlckV2ZW50cygpO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25wbGF5JywgdGhpcyApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGF1c2UoKSB7XHJcbiAgICB0aGlzLnBhdXNlV2l0aG91dFRyaWdnZXJFdmVudHMoKTtcclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ucGF1c2UnLCB0aGlzICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdG9wKCkge1xyXG4gICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgdGhpcy5tZWRpYUVsZW1lbnQuY3VycmVudFRpbWUgPSB0aGlzLnN0YXJ0c0F0O1xyXG5cclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29uc3RvcCcsIHRoaXMgKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvZ2dsZSgpIHtcclxuICAgIGlmICggdGhpcy5wYXVzZWQgKSB7XHJcbiAgICAgIHRoaXMucGxheVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb250b2dnbGUnLCB0aGlzICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIG11dGUoKSB7XHJcbiAgICB0aGlzLm1lZGlhRWxlbWVudC52b2x1bWUgPSAwO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25tdXRlJywgdGhpcyApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICB1bm11dGUoKSB7XHJcbiAgICB0aGlzLm1lZGlhRWxlbWVudC52b2x1bWUgPSAxO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb251bm11dGUnLCB0aGlzICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHNlZWsoIHNlZWtUaW1lOiBudW1iZXIsIF9yZWxvYWRCdWZmZXI/OiBib29sZWFuICkge1xyXG4gICAgdGhpcy5wbGF5ZXJDdXJyZW50VGltZSA9IHNlZWtUaW1lO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25zZWVrJywgdGhpcyApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRpbWVuc2lvbnMoKTogRGltZW5zaW9ucyB7XHJcbiAgICByZXR1cm4gZ2V0RWxlbWVudERpbWVuc2lvbnMoIHRoaXMuX2NvbnRhaW5lciApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRJbnZpc2libGVEaXZCbG9ja0ludGVyYWN0aW9uKCBtZWRpYUNvbXBvbmVudDogTWVkaWFDb21wb25lbnQgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZWxlbWVudEludmlzaWJsZURpdiA9IGNyZWF0ZUludmlzaWJsZURpdkFib3ZlUGFyZW50KCB7XHJcbiAgICAgIHBhcmVudEVsZW1lbnQ6IG1lZGlhQ29tcG9uZW50Ll9jb250YWluZXIsXHJcbiAgICAgIGlkOiBgaW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbiR7IG1lZGlhQ29tcG9uZW50Ll9jb250YWluZXIuaWQgfWAsXHJcbiAgICAgIHBvc2l0aW9uOiB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG4gICAgICBkaW1lbnNpb25zOiB7IHdpZHRoOiBtZWRpYUNvbXBvbmVudC5kaW1lbnNpb25zLndpZHRoLCBoZWlnaHQ6IG1lZGlhQ29tcG9uZW50LmRpbWVuc2lvbnMuaGVpZ2h0IH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBlbGVtZW50SW52aXNpYmxlRGl2LmNsYXNzTGlzdC5hZGQoICdtZWRpYS1jb21wb25lbnQtZGl2LWJsb2NrLWludGVyYWN0aW9uJyApO1xyXG5cclxuICAgIHJldHVybiBlbGVtZW50SW52aXNpYmxlRGl2O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldHVwSW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbigpIHtcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uc3R5bGUuZGlzcGxheSA9IHRoaXMuX2Jsb2NrSW50ZXJhY3Rpb24gPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbi5zdHlsZS56SW5kZXggPSAnOTk1JztcclxuXHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25jbGlja2ludGVyYWN0aW9uYmxvY2tlZCcsIHRoaXMsIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24gKTtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25pbnRlcmFjdGlvbmJsb2NrZWQnLCB0aGlzLCB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvLyBhd2FpdHMgbWVkaWEgbG9hZHMgZnJvbSBzb3VyY2UgdGhlbiBjcmVhdGVzIHRoZSBjb21wb25lbnRcclxuICBwdWJsaWMgc3RhdGljIGFzeW5jIGNyZWF0ZU1lZGlhQ29tcG9uZW50T25Cb2R5KCBvcHRpb25zOiBDcmVhdGVNZWRpYUNvbXBvbmVudE9wdGlvbnMgKTogUHJvbWlzZTxNZWRpYUNvbXBvbmVudD4ge1xyXG4gICAgY29uc3QgbWVkaWFUeXBlID0gZ2V0TWVkaWFUeXBlQnlTb3VyY2UoIG9wdGlvbnMuc3JjICk7XHJcbiAgICBjb25zdCBtZWRpYURlZmF1bHRzID0gZ2V0TWVkaWFEZWZhdWx0c0J5TWVkaWFUeXBlKCBtZWRpYVR5cGUgKTtcclxuXHJcbiAgICBjb25zdCBtZWRpYUNvbXBvbmVudENvbnRhaW5lciA9IGF3YWl0IG5ldyBNZWRpYUNvbXBvbmVudEZhY3RvcnkoIG9wdGlvbnMuc3JjLCBtZWRpYURlZmF1bHRzICkuYnVpbGRPbkJvZHkoKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IE1lZGlhQ29tcG9uZW50KCB7XHJcbiAgICAgIHNyYzogb3B0aW9ucy5zcmMsXHJcbiAgICAgIGNvbnRhaW5lcjogbWVkaWFDb21wb25lbnRDb250YWluZXIsXHJcbiAgICAgIG1lZGlhRWxlbWVudDogbWVkaWFDb21wb25lbnRDb250YWluZXIucXVlcnlTZWxlY3RvciggbWVkaWFUeXBlICkhLFxyXG4gICAgICBtZWRpYUVsZW1lbnRJZDogb3B0aW9ucy5tZWRpYUVsZW1lbnRJZCxcclxuICAgICAgYmxvY2tJbnRlcmFjdGlvbjogb3B0aW9ucy5ibG9ja0ludGVyYWN0aW9uXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvLyBhd2FpdHMgbWVkaWEgbG9hZHMgZnJvbSBzb3VyY2UgdGhlbiBjcmVhdGVzIHRoZSBjb21wb25lbnRcclxuICBwdWJsaWMgc3RhdGljIGFzeW5jIGNyZWF0ZU1lZGlhQ29tcG9uZW50QnlUeXBlKCBvcHRpb25zOiBDcmVhdGVNZWRpYUNvbXBvbmVudE9wdGlvbnMgKTogUHJvbWlzZTxNZWRpYUNvbXBvbmVudD4ge1xyXG4gICAgY29uc3QgbWVkaWFUeXBlID0gZ2V0TWVkaWFUeXBlQnlTb3VyY2UoIG9wdGlvbnMuc3JjICk7XHJcbiAgICBjb25zdCBtZWRpYURlZmF1bHRzID0gZ2V0TWVkaWFEZWZhdWx0c0J5TWVkaWFUeXBlKCBtZWRpYVR5cGUgKTtcclxuXHJcbiAgICBpZiAoIG9wdGlvbnMuY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5IHx8ICFvcHRpb25zLmNvbnRhaW5lciApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVkaWFDb21wb25lbnRPbkJvZHkoIG9wdGlvbnMgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtZWRpYUNvbXBvbmVudENvbnRhaW5lciA9IGF3YWl0IG5ldyBNZWRpYUNvbXBvbmVudEZhY3RvcnkoIG9wdGlvbnMuc3JjLCBtZWRpYURlZmF1bHRzICkuYnVpbGQoIG9wdGlvbnMuY29udGFpbmVyICk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBNZWRpYUNvbXBvbmVudCgge1xyXG4gICAgICBzcmM6IG9wdGlvbnMuc3JjLFxyXG4gICAgICBjb250YWluZXI6IG1lZGlhQ29tcG9uZW50Q29udGFpbmVyLFxyXG4gICAgICBtZWRpYUVsZW1lbnQ6IG1lZGlhQ29tcG9uZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoIG1lZGlhVHlwZSApISxcclxuICAgICAgbWVkaWFFbGVtZW50SWQ6IG9wdGlvbnMubWVkaWFFbGVtZW50SWQsXHJcbiAgICAgIGJsb2NrSW50ZXJhY3Rpb246IG9wdGlvbnMuYmxvY2tJbnRlcmFjdGlvblxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLy8gYXdhaXRzIG1lZGlhIGxvYWRzIGZyb20gc291cmNlIHRoZW4gY3JlYXRlcyB0aGUgY29tcG9uZW50XHJcbiAgcHVibGljIHN0YXRpYyBhc3luYyBjcmVhdGVNZWRpYUNvbXBvbmVudCggb3B0aW9uczogQ3JlYXRlTWVkaWFDb21wb25lbnRPcHRpb25zICk6IFByb21pc2U8TWVkaWFDb21wb25lbnQ+IHtcclxuICAgIGNvbnN0IG1lZGlhVHlwZSA9IGdldE1lZGlhVHlwZUJ5U291cmNlKCBvcHRpb25zLnNyYyApO1xyXG4gICAgY29uc3QgbWVkaWFEZWZhdWx0cyA9IGdldE1lZGlhRGVmYXVsdHNCeU1lZGlhVHlwZSggbWVkaWFUeXBlICk7XHJcblxyXG4gICAgaWYgKCAhbWVkaWFEZWZhdWx0cyB8fCAhbWVkaWFUeXBlICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiSW52YWxpZCBtZWRpYSB0eXBlXCIgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIG9wdGlvbnMuY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5IHx8ICFvcHRpb25zLmNvbnRhaW5lciApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTWVkaWFDb21wb25lbnRPbkJvZHkoIG9wdGlvbnMgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtZWRpYUNvbXBvbmVudENvbnRhaW5lciA9IGF3YWl0IG5ldyBNZWRpYUNvbXBvbmVudEZhY3RvcnkoIG9wdGlvbnMuc3JjLCBtZWRpYURlZmF1bHRzICkuYnVpbGQoIG9wdGlvbnMuY29udGFpbmVyICk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBNZWRpYUNvbXBvbmVudCgge1xyXG4gICAgICBzcmM6IG9wdGlvbnMuc3JjLFxyXG4gICAgICBjb250YWluZXI6IG1lZGlhQ29tcG9uZW50Q29udGFpbmVyLFxyXG4gICAgICBtZWRpYUVsZW1lbnQ6IG1lZGlhQ29tcG9uZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoIG1lZGlhVHlwZSApISxcclxuICAgICAgbWVkaWFFbGVtZW50SWQ6IG9wdGlvbnMubWVkaWFFbGVtZW50SWQsXHJcbiAgICAgIGJsb2NrSW50ZXJhY3Rpb246IG9wdGlvbnMuYmxvY2tJbnRlcmFjdGlvblxyXG4gICAgfSApO1xyXG4gIH1cclxufSIsImltcG9ydCB7IE1lZGlhUGxheWVyRWxlbWVudENvbmZpZywgY3JlYXRlTWVkaWFQbGF5ZXIgfSBmcm9tICcuLi9Ub29scy9NZWRpYVRvb2xzJztcclxuaW1wb3J0IHsgQ29tcG9uZW50Q29udGFpbmVyIH0gZnJvbSAnLi9Db21wb25lbnRDb250YWluZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lZGlhQ29tcG9uZW50RmFjdG9yeSBleHRlbmRzIENvbXBvbmVudENvbnRhaW5lciB7XHJcbiAgY29uc3RydWN0b3IoIHNyYzogc3RyaW5nLCBwbGF5ZXJDb25maWc6IE1lZGlhUGxheWVyRWxlbWVudENvbmZpZyApIHtcclxuICAgIHN1cGVyKCBcImF1ZGlvQ29tcG9uZW50XCIsIGNyZWF0ZU1lZGlhUGxheWVyKCBbc3JjXSwgcGxheWVyQ29uZmlnICkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBidWlsZFN1YkNvbXBvbmVudHMoIHBhcmVudDogSFRNTEVsZW1lbnQgKTogUHJvbWlzZTxIVE1MRWxlbWVudFtdIHwgdm9pZD4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufSIsImltcG9ydCB7IHJlcGxhY2VQZXJjZW50RW5jb2RpbmcgfSBmcm9tICcuLi8uLi9Ub29scy9TdHJpbmdUb29scyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVTb3VuZGJvYXJkSXRlbUNvbnRhaW5lciggaXRlbUlkOiBzdHJpbmcsIG1lZGlhTmFtZTogc3RyaW5nID0gXCJcIiApOiBzdHJpbmcge1xyXG4gIHJldHVybiBgXHJcbiAgPGRpdiBpZD1cIiR7IGl0ZW1JZCB9U291bmRUYWJsZUl0ZW1cIiBjbGFzcz1cInNvdW5kLXRhYmxlLWl0ZW0tY29udGFpbmVyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzb3VuZC10YWJsZS1tZWRpYS1uYW1lLWNvbnRhaW5lciBwb3NpdGlvbi1hYnNvbHV0ZSBib3R0b20tMTAwIHN0YXJ0LTAgdGV4dC10cnVuY2F0ZVwiIHN0eWxlPVwibWF4LXdpZHRoOiAxMDAlO1wiPlxyXG4gICAgICAgIDxzcGFuIGNsYXNzPVwic291bmQtdGFibGUtbWVkaWEtbmFtZSBmdy1ib2xkZXIgdGV4dC1kYXJrIHRleHQtdHJ1bmNhdGVcIiB0aXRsZT1cIiR7IHJlcGxhY2VQZXJjZW50RW5jb2RpbmcoIG1lZGlhTmFtZSApIH1cIj5cclxuICAgICAgICAgICR7IHJlcGxhY2VQZXJjZW50RW5jb2RpbmcoIG1lZGlhTmFtZSApIH1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gIGAudHJpbSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVTb3VuZGJvYXJkSW5wdXQoIGl0ZW1JZDogc3RyaW5nLCBsYWJlbFRleHQ6IHN0cmluZywgdmFsdWU6IHN0cmluZyA9IFwiXCIsIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSBcIlwiICkge1xyXG4gIHJldHVybiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwic291bmQtdGFibGUtaW5wdXQtY29udGFpbmVyIHRleHQtdHJ1bmNhdGUgcG9zaXRpb24tYWJzb2x1dGUgdG9wLTAgc3RhcnQtMCB3LTEwMCBoLTEwMFwiIHN0eWxlPVwiei1pbmRleDogOTk5ICFpbXBvcnRhbnQ7IHBvaW50ZXItZXZlbnRzOiBub25lICFpbXBvcnRhbnQ7XCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWZsb2F0aW5nIHBvc2l0aW9uLWFic29sdXRlIGJvdHRvbS0wIHN0YXJ0LTBcIiBzdHlsZT1cInBvaW50ZXItZXZlbnRzOiBhdXRvICFpbXBvcnRhbnQ7XCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCIkeyB2YWx1ZSB9XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgc291bmQtdGFibGUtaW5wdXQgdGV4dC10cnVuY2F0ZVwiIGlkPVwidXJsSW5wdXQkeyBpdGVtSWQgfVwiIHBsYWNlaG9sZGVyPVwiJHsgcGxhY2Vob2xkZXIgfVwiPlxyXG4gICAgICAgIDxsYWJlbCBmb3I9XCJ1cmxJbnB1dCR7IGl0ZW1JZCB9XCI+JHsgbGFiZWxUZXh0IH08L2xhYmVsPlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJzb3VuZC10YWJsZS1yZW1vdmUtaXRlbS1jb250YWluZXIgcG9zaXRpb24tYWJzb2x1dGUgdG9wLTAgZW5kLTBcIiBzdHlsZT1cInBvaW50ZXItZXZlbnRzOiBhdXRvICFpbXBvcnRhbnQ7XCI+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzb3VuZC10YWJsZS1yZW1vdmUtaXRlbS1idXR0b24gYnRuLWNsb3NlIGJhZGdlIHJvdW5kZWQtMCBiZy1kYW5nZXIgb3BhY2l0eS0xMDAgcC0zXCI+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgYDtcclxufVxyXG4iLCJpbXBvcnQgeyBPYmplY3RFdmVudExpc3RlbmVyIH0gZnJvbSAnLi4vRXh0cmFzL09iamVjdEV2ZW50TGlzdGVuZXInO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTWVkaWFQbGF5ZXJGdW5jdGlvbnMge1xyXG4gIHBsYXkoKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zO1xyXG4gIHBhdXNlKCk6IElNZWRpYVBsYXllckZ1bmN0aW9ucztcclxuICB0b2dnbGUoKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zO1xyXG4gIHNlZWsoIHNlZWtUaW1lOiBudW1iZXIsIHJlbG9hZEJ1ZmZlcj86IGJvb2xlYW4gKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zO1xyXG4gIG11dGUoKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zO1xyXG4gIHVubXV0ZSgpOiBJTWVkaWFQbGF5ZXJGdW5jdGlvbnM7XHJcbiAgcGxheVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCk6IElNZWRpYVBsYXllckZ1bmN0aW9ucztcclxuICBwYXVzZVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCk6IElNZWRpYVBsYXllckZ1bmN0aW9ucztcclxuICBkZXN0cm95KCk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBNZWRpYVBsYXllciBleHRlbmRzIE9iamVjdEV2ZW50TGlzdGVuZXIgaW1wbGVtZW50cyBJTWVkaWFQbGF5ZXJGdW5jdGlvbnMge1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBpZDogc3RyaW5nO1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBuYW1lOiBzdHJpbmc7XHJcbiAgcHVibGljIGFic3RyYWN0IGlzUGxheWluZzogYm9vbGVhbjtcclxuICBwdWJsaWMgYWJzdHJhY3Qgc3RhcnRzQXQ6IG51bWJlcjtcclxuICBwdWJsaWMgYWJzdHJhY3QgY3VycmVudFRpbWU6IG51bWJlcjtcclxuICBwdWJsaWMgYWJzdHJhY3QgcGxheWVyQ3VycmVudFRpbWU6IG51bWJlcjtcclxuXHJcbiAgcHVibGljIGFic3RyYWN0IHBsYXllckR1cmF0aW9uOiBudW1iZXI7XHJcblxyXG4gIHB1YmxpYyBhYnN0cmFjdCBkdXJhdGlvbjogbnVtYmVyO1xyXG5cclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3QgcGxheSgpOiBJTWVkaWFQbGF5ZXJGdW5jdGlvbnM7XHJcbiAgYWJzdHJhY3QgcGF1c2UoKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zO1xyXG4gIGFic3RyYWN0IHRvZ2dsZSgpOiBJTWVkaWFQbGF5ZXJGdW5jdGlvbnM7XHJcbiAgYWJzdHJhY3Qgc2Vlayggc2Vla1RpbWU6IG51bWJlciwgcmVsb2FkQnVmZmVyPzogYm9vbGVhbiApOiBJTWVkaWFQbGF5ZXJGdW5jdGlvbnM7XHJcbiAgYWJzdHJhY3QgbXV0ZSgpOiBJTWVkaWFQbGF5ZXJGdW5jdGlvbnM7XHJcbiAgYWJzdHJhY3QgdW5tdXRlKCk6IElNZWRpYVBsYXllckZ1bmN0aW9ucztcclxuICBhYnN0cmFjdCBwbGF5V2l0aG91dFRyaWdnZXJFdmVudHMoKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zO1xyXG4gIGFic3RyYWN0IHBhdXNlV2l0aG91dFRyaWdnZXJFdmVudHMoKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zO1xyXG4gIGFic3RyYWN0IGRlc3Ryb3koKTogdm9pZDtcclxufVxyXG4iLCJcclxuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlQmFja2dyb3VuZFlvdXR1YmVJZnJhbWVFbGVtZW50KCBpZnJhbWVJZDogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBcclxuICA8ZGl2IGlkPVwiJHsgaWZyYW1lSWQgfVwiPlxyXG4gIDwvZGl2PlxyXG4gIGAudHJpbSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVZb3V0dWJlSWZyYW1lVGFibGVJdGVtKCBpZnJhbWVJZDogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBcclxuICA8ZGl2IGlkPVwiJHsgaWZyYW1lSWQgfUlmcmFtZVRhYmxlSXRlbVwiIGNsYXNzPVwieXQtaWZyYW1lLXRhYmxlLWl0ZW0tY29udGFpbmVyXCI+XHJcbiAgPC9kaXY+XHJcbiAgYC50cmltKCk7XHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVJbnZpc2libGVEaXZBYm92ZVBhcmVudCwgZGVsYXksIGV4dHJhY3RZb3VUdWJlSWQsIGdldEVsZW1lbnREaW1lbnNpb25zLCBoYW5kbGVQcm9taXNlLCBpc1ZhbGlkWW91VHViZVVybCwgaXNWYWxpZFlvdXR1YmVVcmxPcklkLCBwb2xsRm9yVmFyaWFibGUsIHBvbGxGb3JWYXJpYWJsZUFzeW5jLCBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCwgd2FpdFVudGlsRWxlbWVudEV4aXN0cyB9IGZyb20gJy4uLy4uL1Rvb2xzL0RPTVRvb2xzJztcclxuaW1wb3J0IHsgRHJhZ2dhYmxlRWxlbWVudCB9IGZyb20gJy4uLy4uL0V4dHJhcy9EcmFnZ2FibGVFbGVtZW50JztcclxuaW1wb3J0IHsgRGltZW5zaW9ucywgY2xhbXAgfSBmcm9tICcuLi8uLi9Ub29scy9NYXRoVG9vbHMnO1xyXG5pbXBvcnQgeyB0ZW1wbGF0ZUJhY2tncm91bmRZb3V0dWJlSWZyYW1lRWxlbWVudCB9IGZyb20gJy4vVGVtcGxhdGVzWW91dHViZUlmcmFtZSc7XHJcbmltcG9ydCB7IElPYmplY3RUb1NldE9uWW91dHViZUlmcmFtZXNSZWFkeSB9IGZyb20gJy4vVHlwZXMnO1xyXG5pbXBvcnQgeyBZb3V0dWJlSWZyYW1lU3dpdGNoZXIgfSBmcm9tICcuL1lvdXR1YmVJZnJhbWVTd2l0Y2hlcic7XHJcbmltcG9ydCB7IFlvdXR1YmVJZnJhbWVTeW5jIH0gZnJvbSAnLi9Zb3V0dWJlSWZyYW1lU3luYyc7XHJcbmltcG9ydCB7IE9iamVjdEV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLi8uLi9FeHRyYXMvT2JqZWN0RXZlbnRMaXN0ZW5lcic7XHJcbmltcG9ydCB7IElNZWRpYVBsYXllckZ1bmN0aW9ucywgTWVkaWFQbGF5ZXIgfSBmcm9tICcuLi9UeXBlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBZb3V0dWJlSWZyYW1lT3B0aW9ucyA9IHtcclxuICBpZnJhbWVJZDogc3RyaW5nO1xyXG4gIHZpZGVvSWQ6IHN0cmluZztcclxuICBkaW1lbnNpb25zPzogRGltZW5zaW9ucztcclxuICBwYXJlbnRFbGVtZW50PzogSFRNTEVsZW1lbnQ7XHJcbiAgY2xhc3NMaXN0Pzogc3RyaW5nW107XHJcbiAgc3RhcnRNdXRlZD86IGJvb2xlYW47XHJcbiAgc3RhcnRzQXQ/OiBudW1iZXI7XHJcbiAgYmxvY2tJbnRlcmFjdGlvbj86IGJvb2xlYW47XHJcbiAgcmVwbGF5T25FbmQ/OiBib29sZWFuO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgWW91dHViZUlmcmFtZUNoYW5nZVZpZGVvT3B0aW9ucyA9IHtcclxuICBpZnJhbWVJZDogc3RyaW5nO1xyXG4gIHZpZGVvSWQ6IHN0cmluZztcclxuICBzdGFydHNBdD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURyYWdnYWJsZVlvdXR1YmVJZnJhbWUoIHsgaWZyYW1lSWQsIHZpZGVvSWQsIHN0YXJ0c0F0LCBwYXJlbnRFbGVtZW50LCBjbGFzc0xpc3QgPSBbXSB9OiBZb3V0dWJlSWZyYW1lT3B0aW9ucyApIHtcclxuICBjb25zdCBpZnJhbWVDb250cm9sbGVyUmVzdWx0ID0gbmV3IFlvdXR1YmVJZnJhbWUoIHsgc3RhcnRzQXQsIGlmcmFtZUlkLCB2aWRlb0lkLCBwYXJlbnRFbGVtZW50LCBjbGFzc0xpc3QgfSApO1xyXG5cclxuICBjb25zdCBkcmFnZ2FibGVSZXN1bHQgPSBuZXcgRHJhZ2dhYmxlRWxlbWVudCgge1xyXG4gICAgZWxlbWVudDogcGFyZW50RWxlbWVudCA/PyBkb2N1bWVudC5ib2R5LFxyXG4gICAgYWxsb3dEcmFnZ2luZ0J5SW5uZXJDb250ZW50OiB0cnVlLFxyXG4gICAgb25Ecm9wOiAoKSA9PiB7XHJcblxyXG4gICAgfVxyXG4gIH0gKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGlmcmFtZUNvbnRyb2xsZXI6IGlmcmFtZUNvbnRyb2xsZXJSZXN1bHQsXHJcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZVJlc3VsdFxyXG4gIH07XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgWW91dHViZUlmcmFtZSBleHRlbmRzIE1lZGlhUGxheWVyIHtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGFyck9iamVjdFRvU2V0T25FdmVyeUlmcmFtZVJlYWR5OiBJT2JqZWN0VG9TZXRPbllvdXR1YmVJZnJhbWVzUmVhZHlbXSA9IFtdO1xyXG5cclxuICBwcm90ZWN0ZWQgc3RhdGljIF9kaWN0WW91dHViZUlmcmFtZUJ5SWQ6IE1hcDxzdHJpbmcsIFlvdXR1YmVJZnJhbWU+ID0gbmV3IE1hcCgpO1xyXG4gIHByb3RlY3RlZCBzdGF0aWMgX2FycllvdXR1YmVJZnJhbWVJZFJlYWR5OiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBwdWJsaWMgcGxheWVyOiBhbnkgfCBudWxsO1xyXG4gIHByb3RlY3RlZCBfaXNQbGF5ZXJSZWFkeTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBwdWJsaWMgaWQ6IHN0cmluZztcclxuICBwcml2YXRlIF92aWRlb0lkOiBzdHJpbmc7XHJcbiAgcHVibGljIHZpZGVvTmFtZTogc3RyaW5nID0gJyc7XHJcbiAgcHVibGljIHZpZGVvVGh1bWI6IHN0cmluZyA9ICcnO1xyXG4gIHB1YmxpYyBjaGFubmVsVVJMOiBzdHJpbmcgPSAnJztcclxuICBwdWJsaWMgY2hhbm5lbE5hbWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICBwcm90ZWN0ZWQgX2lmcmFtZUVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIC8vIEEgZGl2IHdoaWNoIGlzIGNyZWF0ZWQgYWZ0ZXIgaWZyYW1lIHJlbmRlciBhbmQgaG9sZHMgaWZyYW1lIGVsZW1lbnRcclxuICBwcm90ZWN0ZWQgX2lmcmFtZUNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIC8vIFRoZSBlbGVtZW50IHRoYXQgaG9sZHMgeyBfaWZyYW1lQ29udGFpbmVyIH1cclxuICBwcm90ZWN0ZWQgX2lmcmFtZVBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcm90ZWN0ZWQgX2lzUGxheWluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByb3RlY3RlZCBfZGltZW5zaW9uczogRGltZW5zaW9ucztcclxuXHJcbiAgLy8vIENhbiBiZSB1c2VkIHRvIGRyYWcsIGlzIGFuIGludmlzaWJsZSBkaXYgcGxhY2VkIGF0IHRoZSB0b3Agb2YgdGhlIGNvbnRhaW5lclxyXG4gIHByb3RlY3RlZCB0b3BEaXY/OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcHJpdmF0ZSBfc3RhcnRzQXQ6IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIF9ibG9ja0ludGVyYWN0aW9uOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJvdGVjdGVkIF9kaXZCbG9ja0ludGVyYWN0aW9uOiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwcm90ZWN0ZWQgX3N0YXJ0TXV0ZWQ6IGJvb2xlYW47XHJcbiAgcHVibGljIF9wbGF5aW5nT2JzZXJ2ZXJJbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgcHJvdGVjdGVkIF9ldmVudExpc3RlbmVyOiBPYmplY3RFdmVudExpc3RlbmVyID0gbmV3IE9iamVjdEV2ZW50TGlzdGVuZXIoKTtcclxuICBwcml2YXRlIGNhY2hlZFZpZGVvSW5mbzoge1xyXG4gICAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgICBhdXRob3JfbmFtZT86IHN0cmluZztcclxuICAgIHRodW1ibmFpbF91cmw/OiBzdHJpbmc7XHJcbiAgICBhdXRob3JfdXJsPzogc3RyaW5nO1xyXG4gIH0gPSB7fTtcclxuXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnM6IFlvdXR1YmVJZnJhbWVPcHRpb25zICkge1xyXG4gICAgaWYgKCBZb3V0dWJlSWZyYW1lLl9kaWN0WW91dHViZUlmcmFtZUJ5SWQuaGFzKCBvcHRpb25zLmlmcmFtZUlkICkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJJbnZhbGlkIGlmcmFtZSB0aGVyZSdzIGFscmVhZHkgYW4gaWZyYW1lIHdpdGggdGhpcyBpZC5cIiApO1xyXG4gICAgfVxyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5pZCA9IG9wdGlvbnMuaWZyYW1lSWQ7XHJcbiAgICB0aGlzLl9zdGFydHNBdCA9IG9wdGlvbnMuc3RhcnRzQXQgPz8gMDtcclxuICAgIHRoaXMuX3ZpZGVvSWQgPSBvcHRpb25zLnZpZGVvSWQ7XHJcblxyXG4gICAgdGhpcy5fc3RhcnRNdXRlZCA9IG9wdGlvbnMuc3RhcnRNdXRlZCA/IHRydWUgOiBmYWxzZTtcclxuICAgIHRoaXMuX2Jsb2NrSW50ZXJhY3Rpb24gPSBvcHRpb25zLmJsb2NrSW50ZXJhY3Rpb24gPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgdGhpcy5faWZyYW1lQ29udGFpbmVyID0gWW91dHViZUlmcmFtZS5nZXRZb3V0dWJlSWZyYW1lRWxlbWVudCgge1xyXG4gICAgICBpZnJhbWVJZDogb3B0aW9ucy5pZnJhbWVJZCxcclxuICAgICAgY2xhc3NMaXN0OiBvcHRpb25zLmNsYXNzTGlzdFxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuX2lmcmFtZVBhcmVudEVsZW1lbnQgPSBZb3V0dWJlSWZyYW1lLnNldHVwUGFyZW50RnJvbVlvdXR1YmVJZnJhbWUoIHtcclxuICAgICAgcGFyZW50RWxlbWVudDogb3B0aW9ucy5wYXJlbnRFbGVtZW50ID8/IGRvY3VtZW50LmJvZHksXHJcbiAgICAgIGlmcmFtZUNvbnRhaW5lcjogdGhpcy5faWZyYW1lQ29udGFpbmVyXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5zZXRDbGFzc2VzSWZyYW1lUGF1c2VkKCk7XHJcblxyXG4gICAgdGhpcy5fZGltZW5zaW9ucyA9IG9wdGlvbnMuZGltZW5zaW9ucyA/PyBnZXRFbGVtZW50RGltZW5zaW9ucyggdGhpcy5faWZyYW1lUGFyZW50RWxlbWVudCApO1xyXG5cclxuICAgIFlvdXR1YmVJZnJhbWUuX2RpY3RZb3V0dWJlSWZyYW1lQnlJZC5zZXQoIG9wdGlvbnMuaWZyYW1lSWQsIHRoaXMgKTtcclxuXHJcbiAgICB0aGlzLnNldFZpZGVvSW5mbygpLnRoZW4oICgpID0+IHtcclxuICAgICAgdGhpcy5zZXRFeHRlcm5hbEhUTUxFbGVtZW50c0F0dHJpYnV0ZXMoKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgbmFtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnZpZGVvTmFtZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY29udGFpbmVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lmcmFtZUNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdmlkZW9JZCgpIHtcclxuICAgIHJldHVybiBleHRyYWN0WW91VHViZUlkKCB0aGlzLl92aWRlb0lkICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGVzdHJveSgpIHtcclxuICAgIHRoaXMucGxheWVyLmRlc3Ryb3koKTtcclxuICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZSgpO1xyXG4gICAgWW91dHViZUlmcmFtZS5fZGljdFlvdXR1YmVJZnJhbWVCeUlkLmRlbGV0ZSggdGhpcy5pZCApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBzZXRWaWRlb0luZm8oKSB7XHJcbiAgICB0aGlzLmNhY2hlZFZpZGVvSW5mbyA9IGF3YWl0IHRoaXMuZ2V0VmlkZW9JbmZvKCkgPz8ge307XHJcbiAgICB0aGlzLnZpZGVvTmFtZSA9IHRoaXMuY2FjaGVkVmlkZW9JbmZvLnRpdGxlID8gdGhpcy5jYWNoZWRWaWRlb0luZm8udGl0bGUgYXMgc3RyaW5nIDogJyc7XHJcbiAgICB0aGlzLmNoYW5uZWxOYW1lID0gdGhpcy5jYWNoZWRWaWRlb0luZm8uYXV0aG9yX25hbWUgPyB0aGlzLmNhY2hlZFZpZGVvSW5mby5hdXRob3JfbmFtZSBhcyBzdHJpbmcgOiAnJztcclxuICAgIHRoaXMudmlkZW9UaHVtYiA9IHRoaXMuY2FjaGVkVmlkZW9JbmZvLnRodW1ibmFpbF91cmwgPyB0aGlzLmNhY2hlZFZpZGVvSW5mby50aHVtYm5haWxfdXJsIGFzIHN0cmluZyA6ICcnO1xyXG4gICAgdGhpcy5jaGFubmVsVVJMID0gdGhpcy5jYWNoZWRWaWRlb0luZm8uYXV0aG9yX3VybCA/IHRoaXMuY2FjaGVkVmlkZW9JbmZvLmF1dGhvcl91cmwgYXMgc3RyaW5nIDogJyc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgY2hhbmdlVmlkZW8oIG9wdGlvbnM6IFlvdXR1YmVJZnJhbWVDaGFuZ2VWaWRlb09wdGlvbnMgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAoICFpc1ZhbGlkWW91dHViZVVybE9ySWQoIG9wdGlvbnMudmlkZW9JZCApICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgd2hpbGUgKCAhdGhpcy5wbGF5ZXIgfHwgIXRoaXMucGxheWVyLmxvYWRWaWRlb0J5SWQgKSB7XHJcbiAgICAgIGF3YWl0IGRlbGF5KCAxMDAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnByZXBhcmVPcHRpb25zKCBvcHRpb25zICk7XHJcbiAgICBhd2FpdCB0aGlzLmxvYWRWaWRlbygpO1xyXG5cclxuICAgIHRoaXMucGxheWVyLnNlZWtUbyggdGhpcy5zdGFydHNBdCwgdHJ1ZSApO1xyXG4gICAgaWYgKCB0aGlzLmlzUGxheWluZyApIHtcclxuICAgICAgdGhpcy5wbGF5V2l0aG91dFRyaWdnZXJFdmVudHMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGF1c2VXaXRob3V0VHJpZ2dlckV2ZW50cygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwcmVwYXJlT3B0aW9ucyggb3B0aW9uczogWW91dHViZUlmcmFtZUNoYW5nZVZpZGVvT3B0aW9ucyApIHtcclxuICAgIHRoaXMuaWQgPSBvcHRpb25zLmlmcmFtZUlkO1xyXG4gICAgdGhpcy5fdmlkZW9JZCA9IG9wdGlvbnMudmlkZW9JZDtcclxuICAgIHRoaXMuc3RhcnRzQXQgPSBvcHRpb25zLnN0YXJ0c0F0ID8/IHRoaXMuc3RhcnRzQXQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGxvYWRWaWRlbygpIHtcclxuICAgIHRoaXMuX2lzUGxheWVyUmVhZHkgPSBmYWxzZTtcclxuXHJcbiAgICB0aGlzLnBsYXllci5sb2FkVmlkZW9CeUlkKCB7XHJcbiAgICAgICd2aWRlb0lkJzogdGhpcy52aWRlb0lkLFxyXG4gICAgICAnc3RhcnRTZWNvbmRzJzogdGhpcy5zdGFydHNBdCxcclxuICAgICAgJ3N1Z2dlc3RlZFF1YWxpdHknOiAnaGlnaHJlcydcclxuICAgIH0gKTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLnNldFZpZGVvSW5mbygpO1xyXG4gICAgdGhpcy5zZXRFeHRlcm5hbEhUTUxFbGVtZW50c0F0dHJpYnV0ZXMoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBsb2FkVmlkZW9JbmZvKCkge1xyXG4gICAgYXdhaXQgdGhpcy5zZXRWaWRlb0luZm8oKTtcclxuICAgIHRoaXMuc2V0RXh0ZXJuYWxIVE1MRWxlbWVudHNBdHRyaWJ1dGVzKCk7XHJcbiAgICByZXR1cm4gdGhpcy5jYWNoZWRWaWRlb0luZm87XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZ2V0VmlkZW9JbmZvKCk6IFByb21pc2U8b2JqZWN0IHwgbnVsbD4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVQcm9taXNlPFJlc3BvbnNlPiggZmV0Y2goIGBodHRwczovL3d3dy55b3V0dWJlLmNvbS9vZW1iZWQ/dXJsPSR7IHRoaXMudmlkZW9VUkwgfSZmb3JtYXQ9anNvbmAgKSApO1xyXG5cclxuICAgIGlmICggcmVzcG9uc2UuZXJyb3IgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoIHJlc3BvbnNlLmVycm9yICk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5kYXRhKCkuanNvbigpIGFzIG9iamVjdDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBvblBsYXllclJlYWR5KCBldmVudDogYW55ICkge1xyXG4gICAgaWYgKCB0aGlzLl9zdGFydE11dGVkICkge1xyXG4gICAgICB0aGlzLnBsYXllci5tdXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgWW91dHViZUlmcmFtZS5fYXJyWW91dHViZUlmcmFtZUlkUmVhZHkucHVzaCggdGhpcy5pZCApO1xyXG4gICAgdGhpcy5faWZyYW1lRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCB0aGlzLmlkICkhO1xyXG5cclxuICAgIHRoaXMuc2V0Q2xhc3Nlc0lmcmFtZVBhdXNlZCgpO1xyXG5cclxuICAgIHRoaXMucGxheWVyLnNldFBsYXliYWNrUXVhbGl0eSggJ2hpZ2hyZXMnICk7XHJcbiAgICB0aGlzLnBsYXllci5zZWVrVG8oIHRoaXMuX3N0YXJ0c0F0ID8/IDAsIHRydWUgKTtcclxuICAgIHRoaXMucGxheWVyLnBhdXNlVmlkZW8oKTtcclxuICAgIHRoaXMuX2lzUGxheWVyUmVhZHkgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29uaWZyYW1lcmVhZHknLCB0aGlzICk7XHJcblxyXG4gICAgWW91dHViZUlmcmFtZS5jaGVja0lmRXZlcnlJZnJhbWVJc1JlYWR5KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgb25QbGF5ZXJTdGF0ZUNoYW5nZSggZXZlbnQ6IGFueSApIHtcclxuICAgIGlmICggZXZlbnQuZGF0YSA9PT0gWW91dHViZUlmcmFtZS5feW91dHViZUFQSVJlZmVyZW5jZS5QbGF5ZXJTdGF0ZS5QTEFZSU5HICkge1xyXG4gICAgICB0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xyXG4gICAgICB0aGlzLl9wbGF5aW5nT2JzZXJ2ZXJJbnRlcnZhbCA9IHNldEludGVydmFsKCAoKSA9PiB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbnBsYXlpbmcnLCB0aGlzLCB0aGlzLmlzUGxheWluZyApLCAxMDAgKTtcclxuICAgICAgdGhpcy5zZXRDbGFzc2VzSWZyYW1lUGxheWluZygpO1xyXG4gICAgfSBlbHNlIGlmICggdGhpcy5fcGxheWluZ09ic2VydmVySW50ZXJ2YWwgKSB7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoIHRoaXMuX3BsYXlpbmdPYnNlcnZlckludGVydmFsICk7XHJcbiAgICAgIHRoaXMuc2V0Q2xhc3Nlc0lmcmFtZVBhdXNlZCgpO1xyXG4gICAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgdGhpcy5fcGxheWluZ09ic2VydmVySW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ3BsYXllcnN0YXRlY2hhbmdlJywgdGhpcywgdGhpcy5pc1BsYXlpbmcgKTtcclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ucGxheWVyc3RhdGVjaGFuZ2UnLCB0aGlzLCB0aGlzLmlzUGxheWluZyApO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHNldENsYXNzZXNJZnJhbWVQbGF5aW5nKCkge1xyXG4gICAgaWYgKCB0aGlzLl9pZnJhbWVFbGVtZW50ICkge1xyXG4gICAgICB0aGlzLl9pZnJhbWVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICd5dC1wYXVzZWQnICk7XHJcbiAgICAgIHRoaXMuX2lmcmFtZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3l0LXBsYXlpbmcnICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faWZyYW1lQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoICd5dC1wYXVzZWQnICk7XHJcbiAgICB0aGlzLl9pZnJhbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZCggJ3l0LXBsYXlpbmcnICk7XHJcblxyXG4gICAgdGhpcy5faWZyYW1lUGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAneXQtcGF1c2VkJyApO1xyXG4gICAgdGhpcy5faWZyYW1lUGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCAneXQtcGxheWluZycgKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzZXRDbGFzc2VzSWZyYW1lUGF1c2VkKCkge1xyXG4gICAgaWYgKCB0aGlzLl9pZnJhbWVFbGVtZW50ICkge1xyXG4gICAgICB0aGlzLl9pZnJhbWVFbGVtZW50LmNsYXNzTGlzdC5hZGQoICd5dC1wYXVzZWQnICk7XHJcbiAgICAgIHRoaXMuX2lmcmFtZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ3l0LXBsYXlpbmcnICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faWZyYW1lQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoICd5dC1wYXVzZWQnICk7XHJcbiAgICB0aGlzLl9pZnJhbWVDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSggJ3l0LXBsYXlpbmcnICk7XHJcblxyXG4gICAgdGhpcy5faWZyYW1lUGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCAneXQtcGF1c2VkJyApO1xyXG4gICAgdGhpcy5faWZyYW1lUGFyZW50RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAneXQtcGxheWluZycgKTtcclxuICB9XHJcblxyXG5cclxuICBwcm90ZWN0ZWQgb25FdmVyeVlvdXR1YmVJZnJhbWVSZWFkeSgpIHtcclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29uZXZlcnl5b3V0dWJlaWZyYW1lcmVhZHknICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRpdkJsb2NrSW50ZXJhY3Rpb24oKTogSFRNTEVsZW1lbnQgfCBudWxsIHtcclxuICAgIHJldHVybiB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCB2aWRlb1VSTCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PSR7IHRoaXMudmlkZW9JZCB9YDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgcGFyZW50RWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5faWZyYW1lUGFyZW50RWxlbWVudDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaWZyYW1lRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBpZiAoICF0aGlzLl9pZnJhbWVFbGVtZW50ICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiSWZyYW1lIHdhcyBjYWxsZWQgYnV0IGl0J3Mgbm90IHJlYWR5LlwiICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2lmcmFtZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzUGxheWVyUmVhZHkoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNQbGF5ZXJSZWFkeTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgZHVyYXRpb24oKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpIC0gdGhpcy5fc3RhcnRzQXQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBsYXllckR1cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgY3VycmVudFRpbWUoIHQ6IG51bWJlciApIHtcclxuICAgIGNvbnN0IHRpbWVDb25zaWRlcmluZ1N0YXJ0ID0gY2xhbXAoIHQgKyB0aGlzLnN0YXJ0c0F0LCB0aGlzLnN0YXJ0c0F0LCB0aGlzLnBsYXllckR1cmF0aW9uICk7XHJcbiAgICB0aGlzLnNlZWsoIHRpbWVDb25zaWRlcmluZ1N0YXJ0ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGN1cnJlbnRUaW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKSAtIHRoaXMuX3N0YXJ0c0F0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwbGF5ZXJDdXJyZW50VGltZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMucGxheWVyLmdldEN1cnJlbnRUaW1lKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHByb2dyZXNzUGVyY2VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWUgLyB0aGlzLmR1cmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwbGF5ZXJQcm9ncmVzc1BlcmNlbnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnBsYXllckN1cnJlbnRUaW1lIC8gdGhpcy5wbGF5ZXJEdXJhdGlvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc3RhcnRNdXRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9zdGFydE11dGVkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc1BsYXlpbmcoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNQbGF5aW5nO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkaW1lbnNpb25zKCk6IERpbWVuc2lvbnMge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RpbWVuc2lvbnM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHN0YXJ0c0F0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gY2xhbXAoIHRoaXMuX3N0YXJ0c0F0LCAwLCB0aGlzLl9zdGFydHNBdCApO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0IHN0YXJ0c0F0KCB2YWw6IG51bWJlciApIHtcclxuICAgIHRoaXMuX3N0YXJ0c0F0ID0gY2xhbXAoIHZhbCwgMCwgdmFsICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9nZ2xlKCk6IElNZWRpYVBsYXllckZ1bmN0aW9ucyB7XHJcbiAgICBpZiAoIHRoaXMuaXNQbGF5aW5nICkge1xyXG4gICAgICB0aGlzLnBhdXNlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwbGF5KCkge1xyXG4gICAgdGhpcy5wbGF5V2l0aG91dFRyaWdnZXJFdmVudHMoKTtcclxuXHJcbiAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbnBsYXknLCB0aGlzICk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGxheVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCkge1xyXG4gICAgdGhpcy5wbGF5ZXIucGxheVZpZGVvKCk7XHJcbiAgICB0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5zZXRDbGFzc2VzSWZyYW1lUGxheWluZygpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBhdXNlKCkge1xyXG4gICAgdGhpcy5wYXVzZVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCk7XHJcbiAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbnBhdXNlJywgdGhpcyApO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBhdXNlV2l0aG91dFRyaWdnZXJFdmVudHMoKSB7XHJcbiAgICB0aGlzLnBsYXllci5wYXVzZVZpZGVvKCk7XHJcbiAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuc2V0Q2xhc3Nlc0lmcmFtZVBhdXNlZCgpO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNlZWsoIHNlZWtUaW1lOiBudW1iZXIsIHJlbG9hZEJ1ZmZlcjogYm9vbGVhbiA9IGZhbHNlLCBjb25zaWRlclN0YXJ0c0F0OiBib29sZWFuID0gZmFsc2UgKSB7XHJcbiAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbnNlZWsnLCBzZWVrVGltZSwgcmVsb2FkQnVmZmVyLCBjb25zaWRlclN0YXJ0c0F0LCB0aGlzICk7XHJcblxyXG4gICAgc2Vla1RpbWUgKz0gY29uc2lkZXJTdGFydHNBdCA/IHRoaXMuX3N0YXJ0c0F0IDogMDtcclxuICAgIHRoaXMucGxheWVyLnNlZWtUbyggc2Vla1RpbWUsIHJlbG9hZEJ1ZmZlciApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbXV0ZSgpIHtcclxuICAgIHRoaXMucGxheWVyLm11dGUoKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVubXV0ZSgpIHtcclxuICAgIHRoaXMucGxheWVyLnVubXV0ZSgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2hlY2tJZkV2ZXJ5SWZyYW1lSXNSZWFkeSgpIHtcclxuICAgIGNvbnN0IGFyckV2ZXJ5SWZyYW1lSWQgPSBbLi4uWW91dHViZUlmcmFtZS5fZGljdFlvdXR1YmVJZnJhbWVCeUlkLmtleXMoKV07XHJcbiAgICBjb25zdCBoYXNJZnJhbWVOb3RSZWFkeVlldCA9IGFyckV2ZXJ5SWZyYW1lSWQuc29tZSggciA9PiAhdGhpcy5fYXJyWW91dHViZUlmcmFtZUlkUmVhZHkuaW5jbHVkZXMoIHIgKSApO1xyXG5cclxuICAgIGlmICggIWhhc0lmcmFtZU5vdFJlYWR5WWV0ICkge1xyXG4gICAgICB0aGlzLmFyck9iamVjdFRvU2V0T25FdmVyeUlmcmFtZVJlYWR5LmZvckVhY2goIG8gPT4gby5zZXR1cCggWW91dHViZUlmcmFtZS5fZGljdFlvdXR1YmVJZnJhbWVCeUlkICkgKTtcclxuXHJcbiAgICAgIFlvdXR1YmVJZnJhbWUuX2RpY3RZb3V0dWJlSWZyYW1lQnlJZC5mb3JFYWNoKCAoIHZhbCwga2V5ICkgPT4ge1xyXG4gICAgICAgIHZhbC5vbkV2ZXJ5WW91dHViZUlmcmFtZVJlYWR5KCk7XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRZb3V0dWJlSWZyYW1lRWxlbWVudCggeyBpZnJhbWVJZCwgY2xhc3NMaXN0IH06IHsgaWZyYW1lSWQ6IHN0cmluZzsgY2xhc3NMaXN0Pzogc3RyaW5nW107IH0gKSB7XHJcbiAgICBjb25zdCBjb250YWluZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG4gICAgY29udGFpbmVyRGl2LmNsYXNzTGlzdC5hZGQoICd5dC1pZnJhbWUtY29udGFpbmVyJyApO1xyXG4gICAgaWYgKCBjbGFzc0xpc3QgKSB7XHJcbiAgICAgIGNvbnRhaW5lckRpdi5jbGFzc0xpc3QuYWRkKCAuLi5jbGFzc0xpc3QgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb250YWluZXJEaXYuaWQgPSBgY29udGFpbmVyWW91dHViZUlmcmFtZSR7IGlmcmFtZUlkIH1gO1xyXG4gICAgY29udGFpbmVyRGl2Lmluc2VydEFkamFjZW50SFRNTCggJ2FmdGVyYmVnaW4nLCB0ZW1wbGF0ZUJhY2tncm91bmRZb3V0dWJlSWZyYW1lRWxlbWVudCggaWZyYW1lSWQgKSApO1xyXG4gICAgcmV0dXJuIGNvbnRhaW5lckRpdjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXR1cFBhcmVudEZyb21Zb3V0dWJlSWZyYW1lKCB7IHBhcmVudEVsZW1lbnQsIGlmcmFtZUNvbnRhaW5lciB9OiB7IHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50OyBpZnJhbWVDb250YWluZXI6IEhUTUxFbGVtZW50OyB9ICkge1xyXG4gICAgY29uc3QgaWZyYW1lUGFyZW50RWxlbWVudCA9IHBhcmVudEVsZW1lbnQgPz8gZG9jdW1lbnQuYm9keTtcclxuICAgIGlmcmFtZVBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3l0LWlmcmFtZS1wYXJlbnQnICk7XHJcbiAgICBpZnJhbWVQYXJlbnRFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudCggJ2FmdGVyYmVnaW4nLCBpZnJhbWVDb250YWluZXIgKTtcclxuICAgIHJldHVybiBpZnJhbWVQYXJlbnRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgLy8gU2V0cyBkaXYgdG8gYmxvY2sgaW50ZXJhY3Rpb24sIHRvcCBkaXYsIGNvbnRhaW5lciBhbmQgYW55IG90aGVyIGVsZW1lbnQgdGhhdCBpcyBub3QgdGhlIG1haW4gaWZyYW1lXHJcbiAgcHJpdmF0ZSBzZXRFeHRlcm5hbEhUTUxFbGVtZW50cygpIHtcclxuICAgIHRoaXMuY3JlYXRlSW52aXNpYmxlRGl2VG9wKCk7XHJcbiAgICB0aGlzLmNyZWF0ZUludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24oKTtcclxuXHJcbiAgICB0aGlzLnNldEV4dGVybmFsSFRNTEVsZW1lbnRzQXR0cmlidXRlcygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRFeHRlcm5hbEhUTUxFbGVtZW50c0F0dHJpYnV0ZXMoKSB7XHJcbiAgICB0aGlzLnNldElmcmFtZUNvbnRhaW5lckF0dHJpYnV0ZXMoKTtcclxuICAgIHRoaXMuc2V0VG9wRGl2QXR0cmlidXRlcygpO1xyXG4gICAgdGhpcy5zZXREaXZCbG9ja0ludGVyYWN0aW9uQXR0cmlidXRlcygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVJbnZpc2libGVEaXZUb3AoKSB7XHJcbiAgICB0aGlzLnRvcERpdiA9IFlvdXR1YmVJZnJhbWUuZ2V0SW52aXNpYmxlVG9wRGl2KCB0aGlzICk7XHJcbiAgICB0aGlzLnRvcERpdi5zdHlsZS56SW5kZXggPSAnOTkwJztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlSW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbigpIHtcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24gPSBZb3V0dWJlSWZyYW1lLmdldEludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24oIHRoaXMgKTtcclxuXHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLnN0eWxlLmRpc3BsYXkgPSB0aGlzLl9ibG9ja0ludGVyYWN0aW9uID8gJ2Jsb2NrJyA6ICdub25lJztcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uc3R5bGUuekluZGV4ID0gJzk5NSc7XHJcblxyXG4gICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbi5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoIGV2dCApID0+IHtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25jbGlja2ludGVyYWN0aW9uYmxvY2tlZCcsIHRoaXMsIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24gKTtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25pbnRlcmFjdGlvbmJsb2NrZWQnLCB0aGlzLCB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldERpdkJsb2NrSW50ZXJhY3Rpb25BdHRyaWJ1dGVzKCkge1xyXG4gICAgaWYgKCAhdGhpcy5kaXZCbG9ja0ludGVyYWN0aW9uICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QXR0cmlidXRlTGlzdEZvckVsZW1lbnQoIHRoaXMuZGl2QmxvY2tJbnRlcmFjdGlvbiwgdGhpcy5fdmlkZW9JbmZvQXR0cmlidXRlTGlzdCApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRJZnJhbWVDb250YWluZXJBdHRyaWJ1dGVzKCkge1xyXG4gICAgaWYgKCAhdGhpcy5faWZyYW1lQ29udGFpbmVyICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QXR0cmlidXRlTGlzdEZvckVsZW1lbnQoIHRoaXMuX2lmcmFtZUNvbnRhaW5lciwgdGhpcy5fdmlkZW9JbmZvQXR0cmlidXRlTGlzdCApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRUb3BEaXZBdHRyaWJ1dGVzKCkge1xyXG4gICAgaWYgKCAhdGhpcy50b3BEaXYgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCggdGhpcy50b3BEaXYsIHRoaXMuX3ZpZGVvSW5mb0F0dHJpYnV0ZUxpc3QgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgYmxvY2tJbnRlcmFjdGlvbiggdmFsOiBib29sZWFuICkge1xyXG4gICAgdGhpcy5fYmxvY2tJbnRlcmFjdGlvbiA9IHZhbDtcclxuXHJcbiAgICBpZiAoIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24gKSB7XHJcbiAgICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uc3R5bGUuZGlzcGxheSA9IHRoaXMuX2Jsb2NrSW50ZXJhY3Rpb24gPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGluaXRQbGF5ZXIoKSB7XHJcbiAgICB0aGlzLnBsYXllciA9IG5ldyBZb3V0dWJlSWZyYW1lLl95b3V0dWJlQVBJUmVmZXJlbmNlLlBsYXllciggdGhpcy5pZCwge1xyXG4gICAgICB2aWRlb0lkOiB0aGlzLnZpZGVvSWQsXHJcbiAgICAgIHdpZHRoOiB0aGlzLmRpbWVuc2lvbnMud2lkdGgsXHJcbiAgICAgIGhlaWdodDogdGhpcy5kaW1lbnNpb25zLmhlaWdodCxcclxuICAgICAgcGxheWVyVmFyczoge1xyXG4gICAgICAgICdyZWwnOiAwLCAgICAgICAgICAgIC8vIERlc2F0aXZhIHbDrWRlb3MgcmVsYWNpb25hZG9zXHJcbiAgICAgICAgJ2l2X2xvYWRfcG9saWN5JzogMywgLy8gRGVzYXRpdmEgc3VnZXN0w7VlcyBkZSB2w61kZW9zIGR1cmFudGUgYSBwYXVzYVxyXG4gICAgICAgICdzaG93aW5mbyc6IDAsICAgICAgIC8vIFJlbW92ZSBpbmZvcm1hw6fDtWVzIGRvIHbDrWRlbyAodMOtdHVsbywgZXRjLilcclxuICAgICAgICAnY29udHJvbHMnOiAwLCAgICAgICAvLyBSZW1vdmUgb3MgY29udHJvbGVzIGRvIHBsYXllclxyXG4gICAgICAgICdhdXRvcGxheSc6IDAgICAgICAgIC8vIERlc2F0aXZhIGEgcmVwcm9kdcOnw6NvIGF1dG9tw6F0aWNhXHJcbiAgICAgIH0sXHJcbiAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICdvblJlYWR5JzogdGhpcy5vblBsYXllclJlYWR5LmJpbmQoIHRoaXMgKSxcclxuICAgICAgICAnb25TdGF0ZUNoYW5nZSc6IHRoaXMub25QbGF5ZXJTdGF0ZUNoYW5nZS5iaW5kKCB0aGlzIClcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHN0YXRpYyBfeW91dHViZUFQSVJlZmVyZW5jZTogYW55O1xyXG5cclxuICBwcml2YXRlIGdldCBfdmlkZW9JbmZvQXR0cmlidXRlTGlzdCgpOiBbc3RyaW5nLCBzdHJpbmddW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgWyd5dC1pZnJhbWUtaWQnLCB0aGlzLmlkXSxcclxuICAgICAgWyd5dC1pZnJhbWUtdmlkZW8tbmFtZScsIHRoaXMudmlkZW9OYW1lXSxcclxuICAgICAgWyd5dC1pZnJhbWUtdmlkZW8tY2hhbm5lbC1uYW1lJywgdGhpcy5jaGFubmVsTmFtZV0sXHJcbiAgICAgIFsneXQtaWZyYW1lLXZpZGVvLXRodW1iLXVybCcsIHRoaXMudmlkZW9UaHVtYl0sXHJcbiAgICAgIFsneXQtaWZyYW1lLXZpZGVvLWNoYW5uZWwtdXJsJywgdGhpcy5jaGFubmVsVVJMXVxyXG4gICAgXVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGJ1aWxkU2luZ2xlSWZyYW1lKCB5b3V0dWJlSWZyYW1lOiBZb3V0dWJlSWZyYW1lICkge1xyXG4gICAgaWYgKCB5b3V0dWJlSWZyYW1lLl9pc1BsYXllclJlYWR5ICkge1xyXG4gICAgICByZXR1cm4geW91dHViZUlmcmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggJ3l0SWZyYW1lQVBJU2NyaXB0VGFnJyApICkge1xyXG4gICAgICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3NjcmlwdCcgKTtcclxuICAgICAgdGFnLmlkID0gJ3l0SWZyYW1lQVBJU2NyaXB0VGFnJztcclxuXHJcbiAgICAgIHRhZy5zcmMgPSBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGlcIjtcclxuICAgICAgdmFyIGZpcnN0U2NyaXB0VGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoICdzY3JpcHQnIClbMF07XHJcbiAgICAgIGlmICggZmlyc3RTY3JpcHRUYWcgJiYgZmlyc3RTY3JpcHRUYWcucGFyZW50Tm9kZSApIHtcclxuICAgICAgICBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggdGFnLCBmaXJzdFNjcmlwdFRhZyApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgd2FpdFVudGlsRWxlbWVudEV4aXN0cyggJyN5dElmcmFtZUFQSVNjcmlwdFRhZycgKTtcclxuXHJcbiAgICBhd2FpdCBwb2xsRm9yVmFyaWFibGVBc3luYzxhbnk+KCAnWVQnLFxyXG4gICAgICAoIHZhbHVlOiBhbnkgKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5QbGF5ZXIgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICYmIHZhbHVlLlBsYXllci5wcm90b3R5cGVcclxuICAgICAgICAgICYmIHZhbHVlLlBsYXllci5wcm90b3R5cGUuY29uc3RydWN0b3IgPT09IHZhbHVlLlBsYXllclxyXG4gICAgICAgICAgJiYgdmFsdWUubG9hZGVkO1xyXG4gICAgICB9LFxyXG4gICAgICAoIHZhbHVlICkgPT4ge1xyXG4gICAgICAgIFlvdXR1YmVJZnJhbWUuX3lvdXR1YmVBUElSZWZlcmVuY2UgPSB2YWx1ZTtcclxuICAgICAgICB5b3V0dWJlSWZyYW1lLmJ1aWxkKCk7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICBhd2FpdCB5b3V0dWJlSWZyYW1lLmxvYWRWaWRlb0luZm8oKTtcclxuICAgIHJldHVybiB5b3V0dWJlSWZyYW1lO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJ1aWxkSWZyYW1lcygpIHtcclxuICAgIGlmICggIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAneXRJZnJhbWVBUElTY3JpcHRUYWcnICkgKSB7XHJcbiAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnc2NyaXB0JyApO1xyXG4gICAgICB0YWcuaWQgPSAneXRJZnJhbWVBUElTY3JpcHRUYWcnO1xyXG5cclxuICAgICAgdGFnLnNyYyA9IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaVwiO1xyXG4gICAgICB2YXIgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ3NjcmlwdCcgKVswXTtcclxuICAgICAgaWYgKCBmaXJzdFNjcmlwdFRhZyAmJiBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlICkge1xyXG4gICAgICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCB0YWcsIGZpcnN0U2NyaXB0VGFnICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB3YWl0VW50aWxFbGVtZW50RXhpc3RzKCAnI3l0SWZyYW1lQVBJU2NyaXB0VGFnJyApLnRoZW4oICgpID0+IHtcclxuICAgICAgcG9sbEZvclZhcmlhYmxlPGFueT4oICdZVCcsXHJcbiAgICAgICAgKCB2YWx1ZTogYW55ICkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZS5QbGF5ZXIgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICAgJiYgdmFsdWUuUGxheWVyLnByb3RvdHlwZVxyXG4gICAgICAgICAgICAmJiB2YWx1ZS5QbGF5ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID09PSB2YWx1ZS5QbGF5ZXJcclxuICAgICAgICAgICAgJiYgdmFsdWUubG9hZGVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKCB2YWx1ZSApID0+IHtcclxuICAgICAgICAgIFlvdXR1YmVJZnJhbWUuX3lvdXR1YmVBUElSZWZlcmVuY2UgPSB2YWx1ZTtcclxuICAgICAgICAgIFlvdXR1YmVJZnJhbWUuc2V0WW91dHViZUlmcmFtZUVsZW1lbnRzKCk7XHJcbiAgICAgICAgfSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGJ1aWxkKCkge1xyXG4gICAgdGhpcy5zZXRFeHRlcm5hbEhUTUxFbGVtZW50cygpO1xyXG4gICAgdGhpcy5pbml0UGxheWVyKCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0WW91dHViZUlmcmFtZUVsZW1lbnRzKCkge1xyXG4gICAgdGhpcy5fZGljdFlvdXR1YmVJZnJhbWVCeUlkLmZvckVhY2goICggdmFsLCBrZXkgKSA9PiB7XHJcbiAgICAgIGlmICggIXZhbC5pc1BsYXllclJlYWR5ICkge1xyXG4gICAgICAgIHZhbC5idWlsZCgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0SW52aXNpYmxlVG9wRGl2KCB5dElmcmFtZTogWW91dHViZUlmcmFtZSApOiBIVE1MRWxlbWVudCB7XHJcbiAgICByZXR1cm4gY3JlYXRlSW52aXNpYmxlRGl2QWJvdmVQYXJlbnQoIHtcclxuICAgICAgcGFyZW50RWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIHl0SWZyYW1lLmlkICkhLnBhcmVudEVsZW1lbnQhLFxyXG4gICAgICBpZDogYGludmlzaWJsZVRvcERpdkhvbGRUb0RyYWckeyB5dElmcmFtZS5pZCB9YCxcclxuICAgICAgcG9zaXRpb246IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXHJcbiAgICAgIGRpbWVuc2lvbnM6IHsgd2lkdGg6IHl0SWZyYW1lLmRpbWVuc2lvbnMud2lkdGgsIGhlaWdodDogeXRJZnJhbWUuZGltZW5zaW9ucy5oZWlnaHQgKiAwLjIgfVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcblxyXG4gIHN0YXRpYyBnZXRJbnZpc2libGVEaXZCbG9ja0ludGVyYWN0aW9uKCB5dElmcmFtZTogWW91dHViZUlmcmFtZSApOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zdCBlbGVtZW50SW52aXNpYmxlRGl2ID0gY3JlYXRlSW52aXNpYmxlRGl2QWJvdmVQYXJlbnQoIHtcclxuICAgICAgcGFyZW50RWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIHl0SWZyYW1lLmlkICkhLnBhcmVudEVsZW1lbnQhLFxyXG4gICAgICBpZDogYGludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24keyB5dElmcmFtZS5pZCB9YCxcclxuICAgICAgcG9zaXRpb246IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXHJcbiAgICAgIGRpbWVuc2lvbnM6IHsgd2lkdGg6IHl0SWZyYW1lLmRpbWVuc2lvbnMud2lkdGgsIGhlaWdodDogeXRJZnJhbWUuZGltZW5zaW9ucy5oZWlnaHQgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIGVsZW1lbnRJbnZpc2libGVEaXYuY2xhc3NMaXN0LmFkZCggJ3l0LWRpdi1ibG9jay1pbnRlcmFjdGlvbicgKTtcclxuXHJcbiAgICByZXR1cm4gZWxlbWVudEludmlzaWJsZURpdjtcclxuICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgeyBZb3V0dWJlSWZyYW1lU3dpdGNoZXIsIFlvdXR1YmVJZnJhbWVTeW5jIH07IiwiXHJcbmludGVyZmFjZSBTdHJpbmcge1xyXG4gIHRydW5jYXRlKCBtYXg6IG51bWJlciwgZGVjb3JhdG9yOiBzdHJpbmcgKTogc3RyaW5nO1xyXG4gIHJlbW92ZUFjY2VudHMoKTogc3RyaW5nO1xyXG4gIGNhcGl0YWxpemVGaXJzdExldHRlcigpOiBzdHJpbmc7XHJcbiAgemVyb0JlZm9yZSgpOiBzdHJpbmc7XHJcbiAgaXNOdWxsT3JFbXB0eSgpOiBib29sZWFuO1xyXG59XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLmlzTnVsbE9yRW1wdHkgPSBmdW5jdGlvbiAoKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIHR5cGVvZiB0aGlzICE9PSAnc3RyaW5nJyAmJiAhdGhpcyAmJiB0aGlzICE9PSAnJztcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUudHJ1bmNhdGUgPSBmdW5jdGlvbiAoIG1heDogbnVtYmVyLCBkZWNvcmF0b3I6IHN0cmluZyA9ICcuLi4nICk6IHN0cmluZyB7XHJcbiAgcmV0dXJuICggdGhpcy5sZW5ndGggPiBtYXggPyB0aGlzLnN1YnN0cmluZyggMCwgbWF4ICkgKyBkZWNvcmF0b3IgOiB0aGlzICkudG9TdHJpbmcoKTtcclxufTtcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVtb3ZlQWNjZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gdGhpcy5ub3JtYWxpemUoICdORkQnICkucmVwbGFjZSggL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIgKTtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5jYXBpdGFsaXplRmlyc3RMZXR0ZXIgPSBmdW5jdGlvbiAoKTogc3RyaW5nIHtcclxuICBpZiAoIHR5cGVvZiB0aGlzICE9PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiAnJztcclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnN1YnN0cmluZyggMSApO1xyXG59XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLnplcm9CZWZvcmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMucGFkU3RhcnQoIDIsICcwJyApO1xyXG59IiwiZXhwb3J0IHR5cGUgRXZlbnRMaXN0ZW5lciA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGV2ZW50OiBGdW5jdGlvbjtcclxufTtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RXZlbnRMaXN0ZW5lciB7XHJcbiAgcHVibGljIGV2ZW50c0J5TmFtZTogTWFwPHN0cmluZywgRXZlbnRMaXN0ZW5lcltdPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudDogRnVuY3Rpb24gKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG5ld0V2ZW50OiBFdmVudExpc3RlbmVyID0ge1xyXG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoICF0aGlzLmV2ZW50c0J5TmFtZS5oYXMoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkgKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRzQnlOYW1lLnNldCggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCksIFtuZXdFdmVudF0gKTtcclxuICAgICAgcmV0dXJuIG5ld0V2ZW50LmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZXZlbnRzQnlOYW1lLmdldCggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCkgKSEucHVzaCggbmV3RXZlbnQgKTtcclxuXHJcbiAgICByZXR1cm4gbmV3RXZlbnQuaWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RXZlbnRzQnlOYW1lKCBldmVudE5hbWU6IHN0cmluZyApOiBFdmVudExpc3RlbmVyW10ge1xyXG4gICAgaWYgKCAhdGhpcy5ldmVudHNCeU5hbWUuaGFzKCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSApICkge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpLCBbXSApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmV2ZW50c0J5TmFtZS5nZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkhO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZUV2ZW50QnlJZCggZXZlbnRJZDogc3RyaW5nICkge1xyXG4gICAgdGhpcy5ldmVudHNCeU5hbWUuZm9yRWFjaCggKCB2YWx1ZSwga2V5ICkgPT4ge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGtleSwgdmFsdWUuZmlsdGVyKCBlID0+IGUuaWQgIT09IGV2ZW50SWQgKSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNhbGxFdmVudHNCeU5hbWUoIGV2ZW50TmFtZTogc3RyaW5nLCAuLi5ldmVudEFyZ3M6IGFueVtdICk6IHZvaWQge1xyXG4gICAgdGhpcy5nZXRFdmVudHNCeU5hbWUoIGV2ZW50TmFtZSApLmZvckVhY2goIGUgPT4gZS5ldmVudCggLi4uZXZlbnRBcmdzICkgKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBEaW1lbnNpb25zLCBQb2ludDJELCBsZXJwLCByZWdleE51bWJlclBhdHRlcm4sIHJvdGF0ZUNvb3JkaW5hdGVzLCByb3RhdGVDb29yZGluYXRlc0Zyb21Qb2ludDJEIH0gZnJvbSAnLi9NYXRoVG9vbHMnO1xyXG5pbXBvcnQgeyB0b1Bob25lTnVtYmVyIH0gZnJvbSAnLi9TdHJpbmdUb29scyc7XHJcbmltcG9ydCB7IENvbGxpc2lvbkRpcmVjdGlvbkNoZWNrLCBCb3JkZXJEaXN0YW5jZSB9IGZyb20gJy4uL0V4dHJhcy9Db2xsaXNpb25FdmVudHMvVHlwZXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgS2V5Ym9hcmRFdmVudENhbGxiYWNrID0gKCBldnQ6IEtleWJvYXJkRXZlbnQgKSA9PiB2b2lkO1xyXG5leHBvcnQgY29uc3QgcmVnZXhSZW1vdmVUcmFuc2xhdGVGcm9tVHJhbnNmb3JtID0gL3RyYW5zbGF0ZVxcKFteKV0qXFwpL2c7XHJcbmV4cG9ydCBjb25zdCByZWdleEdyb3VwUm90YXRlVmFsdWUgPSAvcm90YXRlXFwoKC0/XFxkK1xcLj9cXGQqKWRlZ1xcKS87XHJcbmV4cG9ydCBjb25zdCByZWdleEdyb3VwUm90YXRlWFZhbHVlID0gL3JvdGF0ZVhcXCgoLT9cXGQrXFwuP1xcZCopZGVnXFwpLztcclxuZXhwb3J0IGNvbnN0IHJlZ2V4R3JvdXBSb3RhdGVZVmFsdWUgPSAvcm90YXRlWVxcKCgtP1xcZCtcXC4/XFxkKilkZWdcXCkvO1xyXG5leHBvcnQgY29uc3QgcmVnZXhHcm91cFJvdGF0ZVpWYWx1ZSA9IC9yb3RhdGVaXFwoKC0/XFxkK1xcLj9cXGQqKWRlZ1xcKS87XHJcblxyXG5leHBvcnQgY29uc3QgZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlID0gbmV3IE1hcDxzdHJpbmcsIEtleWJvYXJkRXZlbnRDYWxsYmFja1tdPigpO1xyXG5leHBvcnQgY29uc3QgZGljdEtleXNCeUFjdGlvbktleWRvd25SZXBlYXQgPSBuZXcgTWFwPHN0cmluZywgS2V5Ym9hcmRFdmVudENhbGxiYWNrW10+KCk7XHJcbmV4cG9ydCBjb25zdCBkaWN0S2V5c0J5QWN0aW9uS2V5dXAgPSBuZXcgTWFwPHN0cmluZywgS2V5Ym9hcmRFdmVudENhbGxiYWNrW10+KCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRBY3Rpb25LZXkoIHsga2V5LCBrZXlkb3duOiBldmVudEtleWRvd24sIGtleXVwOiBldmVudEtleXVwLCBleGVjdXRlT25seU9uY2UgPSB0cnVlIH06IHsga2V5OiBzdHJpbmc7IGtleWRvd246IEtleWJvYXJkRXZlbnRDYWxsYmFjazsga2V5dXA/OiBLZXlib2FyZEV2ZW50Q2FsbGJhY2s7IGV4ZWN1dGVPbmx5T25jZT86IGJvb2xlYW47IH0gKSB7XHJcbiAgaWYgKCBleGVjdXRlT25seU9uY2UgKSB7XHJcbiAgICBhZGRBY3Rpb25LZXlSdW5PbmNlKCBrZXksIGV2ZW50S2V5ZG93biwgZXZlbnRLZXl1cCApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgYWRkQWN0aW9uS2V5UnVuT25SZXBlYXQoIGtleSwgZXZlbnRLZXlkb3duLCBldmVudEtleXVwICk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFNhZmVQcm9taXNlPFQ+ID0ge1xyXG4gIGRhdGE6ICgpID0+IFQ7XHJcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVByb21pc2U8VD4oIHByb21pc2U6IFByb21pc2U8VD4gKTogUHJvbWlzZTxTYWZlUHJvbWlzZTxUPj4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcHJvbWlzZTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkYXRhOiAoKSA9PiBkYXRhLFxyXG4gICAgICBlcnJvcjogbnVsbFxyXG4gICAgfTtcclxuICB9IGNhdGNoICggZXJyb3IgKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCBlcnJvciApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRhdGE6ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCBcIkNvdWxkbid0IGZldGNoLCBjaGVjayBTYWZlUHJvbWlzZS5lcnJvciBmb3IgZGV0YWlscy5cIiApOyB9LFxyXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKCBTdHJpbmcoIGVycm9yICkgKVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkWW91dHViZVVybE9ySWQoIGlucHV0OiBzdHJpbmcgKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgdXJsUGF0dGVybiA9IC9eKGh0dHAocyk/OlxcL1xcLyk/KCh3KXszfS4pP3lvdXR1KGJlfC5iZSk/KFxcLmNvbSk/XFwvLisvO1xyXG4gIGNvbnN0IGlkUGF0dGVybiA9IC9eW2EtekEtWjAtOV8tXXsxMX0kLztcclxuXHJcbiAgcmV0dXJuIHVybFBhdHRlcm4udGVzdCggaW5wdXQgKSB8fCBpZFBhdHRlcm4udGVzdCggaW5wdXQgKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkWW91VHViZVVybCggdXJsOiBzdHJpbmcgKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgcGF0dGVybiA9IC9eKGh0dHAocyk/OlxcL1xcLyk/KCh3KXszfS4pP3lvdXR1KGJlfC5iZSk/KFxcLmNvbSk/XFwvLisvO1xyXG4gIHJldHVybiBwYXR0ZXJuLnRlc3QoIHVybCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFlvdVR1YmVJZCggaW5wdXQ6IHN0cmluZyApOiBzdHJpbmcgfCBudWxsIHtcclxuICBjb25zdCByZWdleCA9IC9bPyZddj0oW14/Jl0rKS87XHJcbiAgY29uc3QgbWF0Y2ggPSBpbnB1dC5tYXRjaCggcmVnZXggKTtcclxuICBpZiAoIG1hdGNoICYmIG1hdGNoWzFdICkge1xyXG4gICAgcmV0dXJuIG1hdGNoWzFdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBJZiBkaXJlY3QgdmlkZW8gSUQgaXMgcHJvdmlkZWRcclxuICAgIHJldHVybiBpbnB1dC5sZW5ndGggPT09IDExID8gaW5wdXQgOiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCggZWxlbWVudDogSFRNTEVsZW1lbnQsIGF0dHJMaXN0OiBbc3RyaW5nLCBzdHJpbmddW10gKSB7XHJcbiAgYXR0ckxpc3QuZm9yRWFjaCggKCBba2V5LCB2YWxdICkgPT4ge1xyXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoIGtleSwgdmFsICk7XHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudEZyb21IVE1MKCBodG1sOiBzdHJpbmcsIHRyaW06IGJvb2xlYW4gPSB0cnVlICkge1xyXG4gIGh0bWwgPSB0cmltID8gaHRtbC50cmltKCkgOiBodG1sO1xyXG5cclxuICBpZiAoICFodG1sICkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICd0ZW1wbGF0ZScgKTtcclxuICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHRlbXBsYXRlLmNvbnRlbnQuY2hpbGRyZW47XHJcblxyXG4gIGlmICggcmVzdWx0Lmxlbmd0aCA9PT0gMSApIHtcclxuICAgIHJldHVybiByZXN1bHRbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gQXJyYXkuZnJvbSggcmVzdWx0ICkgYXMgSFRNTEVsZW1lbnRbXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnREaW1lbnNpb25zQnlJZCggZWxlbWVudElkOiBzdHJpbmcgKTogRGltZW5zaW9ucyB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBlbGVtZW50SWQgKTtcclxuXHJcbiAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggXCJJbnZhbGlkIGVsZW1lbnQgYXQgZ2V0RWxlbWVudERpbWVuc2lvbnNCeUlkIHdpdGggaWQ6IFwiICsgZWxlbWVudElkICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZ2V0RWxlbWVudERpbWVuc2lvbnMoIGVsZW1lbnQgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnREaW1lbnNpb25zKCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiBEaW1lbnNpb25zIHtcclxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcclxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiBET01SZWN0IHtcclxuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICBjb25zdCBjZW50ZXJYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7XHJcbiAgY29uc3QgY2VudGVyWSA9IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyO1xyXG5cclxuICAvLyBSb3RhdGlvbiBhbmdsZSBpbiBkZWdyZWVzIChleHRyYWN0ZWQgZnJvbSBzdHlsZS50cmFuc2Zvcm0gb3IgYW55IG90aGVyIHNvdXJjZSlcclxuICBjb25zdCByb3RhdGlvbkFuZ2xlID0gZ2V0Qm9keVJvdGF0aW9uSW5EZWdyZWVzKCk7XHJcblxyXG4gIGNvbnN0IHJhZGlhbnMgPSAoIE1hdGguUEkgLyAxODAgKSAqIHJvdGF0aW9uQW5nbGU7XHJcbiAgY29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyggcmFkaWFucyApO1xyXG4gIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4oIHJhZGlhbnMgKTtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRoZSByb3RhdGVkIGNvb3JkaW5hdGVzXHJcbiAgY29uc3Qgcm90YXRlZFgxID0gY2VudGVyWCArICggcmVjdC5sZWZ0IC0gY2VudGVyWCApICogY29zVGhldGEgLSAoIHJlY3QudG9wIC0gY2VudGVyWSApICogc2luVGhldGE7XHJcbiAgY29uc3Qgcm90YXRlZFkxID0gY2VudGVyWSArICggcmVjdC5sZWZ0IC0gY2VudGVyWCApICogc2luVGhldGEgKyAoIHJlY3QudG9wIC0gY2VudGVyWSApICogY29zVGhldGE7XHJcblxyXG4gIGNvbnN0IHJvdGF0ZWRYMiA9IGNlbnRlclggKyAoIHJlY3QucmlnaHQgLSBjZW50ZXJYICkgKiBjb3NUaGV0YSAtICggcmVjdC5ib3R0b20gLSBjZW50ZXJZICkgKiBzaW5UaGV0YTtcclxuICBjb25zdCByb3RhdGVkWTIgPSBjZW50ZXJZICsgKCByZWN0LnJpZ2h0IC0gY2VudGVyWCApICogc2luVGhldGEgKyAoIHJlY3QuYm90dG9tIC0gY2VudGVyWSApICogY29zVGhldGE7XHJcblxyXG4gIC8vIENhbGN1bGF0ZSBsZWZ0LCB0b3AsIGJvdHRvbSwgYW5kIHJpZ2h0IGNvb3JkaW5hdGVzXHJcbiAgY29uc3Qgcm90YXRlZExlZnQgPSBNYXRoLm1pbiggcm90YXRlZFgxLCByb3RhdGVkWDIgKTtcclxuICBjb25zdCByb3RhdGVkVG9wID0gTWF0aC5taW4oIHJvdGF0ZWRZMSwgcm90YXRlZFkyICk7XHJcbiAgY29uc3Qgcm90YXRlZEJvdHRvbSA9IE1hdGgubWF4KCByb3RhdGVkWTEsIHJvdGF0ZWRZMiApO1xyXG4gIGNvbnN0IHJvdGF0ZWRSaWdodCA9IE1hdGgubWF4KCByb3RhdGVkWDEsIHJvdGF0ZWRYMiApO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgeDogcm90YXRlZExlZnQsXHJcbiAgICB5OiByb3RhdGVkVG9wLFxyXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXHJcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxyXG4gICAgdG9KU09OOiByZWN0LnRvSlNPTixcclxuICAgIGxlZnQ6IHJvdGF0ZWRMZWZ0LFxyXG4gICAgdG9wOiByb3RhdGVkVG9wLFxyXG4gICAgYm90dG9tOiByb3RhdGVkQm90dG9tLFxyXG4gICAgcmlnaHQ6IHJvdGF0ZWRSaWdodCxcclxuICB9IGFzIERPTVJlY3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEFjdGlvbktleVJ1bk9uY2UoIGtleTogc3RyaW5nLCBldmVudEtleWRvd246IEtleWJvYXJkRXZlbnRDYWxsYmFjaywgZXZlbnRLZXl1cD86IEtleWJvYXJkRXZlbnRDYWxsYmFjayApIHtcclxuICBpZiAoIGRpY3RLZXlzQnlBY3Rpb25LZXlkb3duT25jZS5oYXMoIGtleSApICkge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlLnNldCgga2V5LCBbZXZlbnRLZXlkb3duLCAuLi5kaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2UuZ2V0KCBrZXkgKSFdIClcclxuICB9IGVsc2Uge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlLnNldCgga2V5LCBbZXZlbnRLZXlkb3duXSApXHJcbiAgfVxyXG5cclxuICBpZiAoIGV2ZW50S2V5dXAgKSB7XHJcbiAgICBpZiAoIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5oYXMoIGtleSApICkge1xyXG4gICAgICBkaWN0S2V5c0J5QWN0aW9uS2V5dXAuc2V0KCBrZXksIFtldmVudEtleXVwLCAuLi5kaWN0S2V5c0J5QWN0aW9uS2V5dXAuZ2V0KCBrZXkgKSFdIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5zZXQoIGtleSwgW2V2ZW50S2V5dXBdIClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEFjdGlvbktleVJ1bk9uUmVwZWF0KCBrZXk6IHN0cmluZywgZXZlbnRLZXlkb3duOiBLZXlib2FyZEV2ZW50Q2FsbGJhY2ssIGV2ZW50S2V5dXA/OiBLZXlib2FyZEV2ZW50Q2FsbGJhY2sgKSB7XHJcbiAgaWYgKCBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdC5oYXMoIGtleSApICkge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbktleWRvd25SZXBlYXQuc2V0KCBrZXksIFtldmVudEtleWRvd24sIC4uLmRpY3RLZXlzQnlBY3Rpb25LZXlkb3duUmVwZWF0LmdldCgga2V5ICkhXSApXHJcbiAgfSBlbHNlIHtcclxuICAgIGRpY3RLZXlzQnlBY3Rpb25LZXlkb3duUmVwZWF0LnNldCgga2V5LCBbZXZlbnRLZXlkb3duXSApXHJcbiAgfVxyXG5cclxuICBpZiAoIGV2ZW50S2V5dXAgKSB7XHJcbiAgICBpZiAoIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5oYXMoIGtleSApICkge1xyXG4gICAgICBkaWN0S2V5c0J5QWN0aW9uS2V5dXAuc2V0KCBrZXksIFtldmVudEtleXVwLCAuLi5kaWN0S2V5c0J5QWN0aW9uS2V5dXAuZ2V0KCBrZXkgKSFdIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5zZXQoIGtleSwgW2V2ZW50S2V5dXBdIClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0VsZW1lbnRDb2xsaXNpb24oIGVsZW1lbnQxOiBIVE1MRWxlbWVudCwgZWxlbWVudDI6IEhUTUxFbGVtZW50LCBjaGVja0JvZHlSb3RhdGlvbjogYm9vbGVhbiA9IGZhbHNlICk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IHJlY3QxID0gIWNoZWNrQm9keVJvdGF0aW9uID8gZWxlbWVudDEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBlbGVtZW50MSApO1xyXG4gIGNvbnN0IHJlY3QyID0gIWNoZWNrQm9keVJvdGF0aW9uID8gZWxlbWVudDIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBlbGVtZW50MiApO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSAhKFxyXG4gICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tIHx8XHJcbiAgICByZWN0MS5yaWdodCA8IHJlY3QyLmxlZnQgfHxcclxuICAgIHJlY3QxLmJvdHRvbSA8IHJlY3QyLnRvcCB8fFxyXG4gICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0XHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBvbGxGb3JWYXJpYWJsZTxUPiggdmFyaWFibGVOYW1lOiBzdHJpbmcsIHJlYWR5Q29uZGl0aW9uOiAoIHZhbHVlOiBUICkgPT4gYm9vbGVhbiwgY2FsbGJhY2s6ICggdmFsdWU6IFQgKSA9PiB2b2lkICkge1xyXG4gIGNvbnN0IHBvbGxJbnRlcnZhbCA9IDEwMDtcclxuICBjb25zdCBwb2xsID0gc2V0SW50ZXJ2YWwoICgpID0+IHtcclxuICAgIGlmICggKCB3aW5kb3cgYXMgYW55IClbdmFyaWFibGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmIHJlYWR5Q29uZGl0aW9uKCAoIHdpbmRvdyBhcyBhbnkgKVt2YXJpYWJsZU5hbWVdICkgKSB7XHJcbiAgICAgIC8vIElmIGJvdGggY29uZGl0aW9ucyBhcmUgbWV0LCBleGVjdXRlIHRoZSBjYWxsYmFjayBhbmQgc3RvcCBwb2xsaW5nXHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoIHBvbGwgKTtcclxuICAgICAgY2FsbGJhY2soICggd2luZG93IGFzIGFueSApW3ZhcmlhYmxlTmFtZV0gKTtcclxuICAgIH1cclxuICB9LCBwb2xsSW50ZXJ2YWwgKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvbGxGb3JWYXJpYWJsZUFzeW5jPFQ+KCB2YXJpYWJsZU5hbWU6IHN0cmluZywgcmVhZHlDb25kaXRpb246ICggdmFsdWU6IFQgKSA9PiBib29sZWFuLCBjYWxsYmFjazogKCB2YWx1ZTogVCApID0+IHZvaWQgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgcG9sbEludGVydmFsID0gMTAwO1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPiggKCByZXNvbHZlICkgPT4ge1xyXG4gICAgY29uc3QgcG9sbCA9IHNldEludGVydmFsKCAoKSA9PiB7XHJcbiAgICAgIGlmICggKCB3aW5kb3cgYXMgYW55IClbdmFyaWFibGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmIHJlYWR5Q29uZGl0aW9uKCAoIHdpbmRvdyBhcyBhbnkgKVt2YXJpYWJsZU5hbWVdICkgKSB7XHJcbiAgICAgICAgLy8gSWYgYm90aCBjb25kaXRpb25zIGFyZSBtZXQsIGV4ZWN1dGUgdGhlIGNhbGxiYWNrLCBzdG9wIHBvbGxpbmcsIGFuZCByZXNvbHZlIHRoZSBwcm9taXNlXHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCggcG9sbCApO1xyXG4gICAgICAgIGNhbGxiYWNrKCAoIHdpbmRvdyBhcyBhbnkgKVt2YXJpYWJsZU5hbWVdICk7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LCBwb2xsSW50ZXJ2YWwgKTtcclxuICB9ICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWxFbGVtZW50RXhpc3RzKCBzZWxlY3Rvcjogc3RyaW5nICkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiB7XHJcbiAgICBpZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIHNlbGVjdG9yICkgKSB7XHJcbiAgICAgIHJldHVybiByZXNvbHZlKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlciggbXV0YXRpb25zID0+IHtcclxuICAgICAgaWYgKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApICkge1xyXG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICByZXNvbHZlKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBvYnNlcnZlci5vYnNlcnZlKCBkb2N1bWVudC5ib2R5LCB7XHJcbiAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgc3VidHJlZTogdHJ1ZVxyXG4gICAgfSApO1xyXG4gIH0gKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGF5KCBtczogbnVtYmVyICk6IFByb21pc2U8dm9pZD4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiBzZXRUaW1lb3V0KCByZXNvbHZlLCBtcyApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlRWxlbWVudCggZWxlbWVudFRvUmVtb3ZlOiBIVE1MRWxlbWVudCwgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIG5ld0VsZW1lbnQ6IEhUTUxFbGVtZW50ICk6IHZvaWQge1xyXG4gIGlmICggcGFyZW50RWxlbWVudCAmJiBlbGVtZW50VG9SZW1vdmUgKSB7XHJcbiAgICBwYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBlbGVtZW50VG9SZW1vdmUgKTtcclxuXHJcbiAgICBwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZSggbmV3RWxlbWVudCwgZWxlbWVudFRvUmVtb3ZlLm5leHRTaWJsaW5nICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0RWxlbWVudEF0SW5kZXgoIHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBuZXdFbGVtZW50OiBIVE1MRWxlbWVudCwgaW5kZXg6IG51bWJlciApOiB2b2lkIHtcclxuICBjb25zdCBjaGlsZE5vZGVzID0gcGFyZW50RWxlbWVudC5jaGlsZE5vZGVzO1xyXG5cclxuICBpZiAoIGluZGV4ID49IDAgJiYgaW5kZXggPD0gY2hpbGROb2Rlcy5sZW5ndGggKSB7XHJcbiAgICBpZiAoIGluZGV4ID09PSBjaGlsZE5vZGVzLmxlbmd0aCApIHtcclxuICAgICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZCggbmV3RWxlbWVudCApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgcmVmTm9kZSA9IGNoaWxkTm9kZXNbaW5kZXhdO1xyXG4gICAgICBwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZSggbmV3RWxlbWVudCwgcmVmTm9kZSApO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCAnSW5kZXggb3V0IG9mIGJvdW5kcycgKTtcclxuICAgIHRocm93IG5ldyBFcnJvciggXCJJbmRleCBvdXQgb2YgYm91bmRzXCIgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmRleEluUGFyZW50KCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiBudW1iZXIge1xyXG4gIGNvbnN0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuXHJcbiAgaWYgKCBwYXJlbnQgKSB7XHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IEFycmF5LmZyb20oIHBhcmVudC5jaGlsZHJlbiApO1xyXG4gICAgcmV0dXJuIGNoaWxkcmVuLmluZGV4T2YoIGVsZW1lbnQgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAtMTtcclxufVxyXG5cclxuLy8vIEdldCB0aGUgZGVmYXVsdCBhdHRyaWJ1dGVzIGZyb20gdGhlIHRhcmdldCBlbGVtZW50XHJcbi8vLyBJZiBoYXZlIG5vdCBkZWZhdWx0IGF0dHJpYnV0ZSB3aXRoIHRoaXMgQGF0dHJpYnV0ZU5hbWUgb24gbWFwIHdpbGwgc2V0IHRoZSBjdXJyZW50IGF0dHJpYnV0ZSBhcyBkZWZhdWx0XHJcbi8vLyBJZiBoYXZlIG5vdCBkZWZhdWx0IGF0dHJpYnV0ZSB3aXRoIHRoaXMgQGF0dHJpYnV0ZU5hbWUgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nXHJcbmV4cG9ydCBjb25zdCBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudCA9IG5ldyBNYXA8SFRNTEVsZW1lbnQsIE1hcDxzdHJpbmcsIHN0cmluZz4+KCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0QXR0cmlidXRlRm9yVGFyZ2V0KCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcgKTogc3RyaW5nIHtcclxuICBpZiAoICFtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5oYXMoIHRhcmdldCApICkge1xyXG4gICAgbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuc2V0KCB0YXJnZXQsIG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCkgKTtcclxuICB9XHJcblxyXG4gIGxldCByZXN1bHQ6IHN0cmluZyA9ICcnO1xyXG4gIGNvbnN0IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNCeU5hbWUgPSBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5nZXQoIHRhcmdldCApITtcclxuICBjb25zdCB0YXJnZXREZWZhdWx0QXR0cmlidXRlID0gIWRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNCeU5hbWUuaGFzKCBhdHRyaWJ1dGVOYW1lICkgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICkgOiBkZWZhdWx0QXR0cmlidXRlVmFsdWVzQnlOYW1lLmdldCggYXR0cmlidXRlTmFtZSApITtcclxuXHJcbiAgcmVzdWx0ID0gdGFyZ2V0RGVmYXVsdEF0dHJpYnV0ZSA/IHRhcmdldERlZmF1bHRBdHRyaWJ1dGUgOiAnJztcclxuICBzZXREZWZhdWx0QXR0cmlidXRlRm9yVGFyZ2V0KCB0YXJnZXQsIGF0dHJpYnV0ZU5hbWUsIHJlc3VsdCApO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdEF0dHJpYnV0ZUZvclRhcmdldCggdGFyZ2V0OiBIVE1MRWxlbWVudCwgYXR0cmlidXRlTmFtZTogc3RyaW5nLCBuZXdEZWZhdWx0QXR0cmlidXRlOiBzdHJpbmcgKTogdm9pZCB7XHJcbiAgaWYgKCAhbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuaGFzKCB0YXJnZXQgKSApIHtcclxuICAgIG1hcERlZmF1bHRBdHRyaWJ1dGVzQnlFbGVtZW50LnNldCggdGFyZ2V0LCBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpICk7XHJcbiAgfVxyXG5cclxuICBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5nZXQoIHRhcmdldCApIS5zZXQoIGF0dHJpYnV0ZU5hbWUsIG5ld0RlZmF1bHRBdHRyaWJ1dGUgKTtcclxufVxyXG5cclxuLy8vIERpdmlkZSBvIGVsZW1lbnRvIEB0YXJnZXQgZW0gOSBcInF1YWRyYWRvc1wiIGlndWFpcyBlIHJldG9ybmEgZW0gcXVhaXMgcXVhZHJhZG9zIG8gZHJhZ2dhYmxlIGVzdMOhIGNvbGlkaW5kbyBjb20gbyB0YXJnZXRcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbGxpc2lvbkRpcmVjdGlvbiggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgY2hlY2tCb2R5Um90YXRpb246IGJvb2xlYW4gPSBmYWxzZSApOiBDb2xsaXNpb25EaXJlY3Rpb25DaGVjayB7XHJcbiAgY29uc3QgcmVjdDEgPSAhY2hlY2tCb2R5Um90YXRpb24gPyBkcmFnZ2FibGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBkcmFnZ2FibGUgKTtcclxuICBjb25zdCByZWN0MiA9ICFjaGVja0JvZHlSb3RhdGlvbiA/IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIHRhcmdldCApO1xyXG5cclxuICBjb25zdCBpc1RvcCA9IHJlY3QxLmJvdHRvbSA+IHJlY3QyLnRvcCAmJiByZWN0MS50b3AgPCByZWN0Mi50b3AgKyByZWN0Mi5oZWlnaHQgLyAzO1xyXG4gIGNvbnN0IGlzUmlnaHQgPSByZWN0MS5sZWZ0IDwgcmVjdDIucmlnaHQgJiYgcmVjdDEucmlnaHQgPiByZWN0Mi5yaWdodCAtIHJlY3QyLndpZHRoIC8gMztcclxuICBjb25zdCBpc0NlbnRlciA9IHJlY3QxLnRvcCA8IHJlY3QyLmJvdHRvbSAmJiByZWN0MS5ib3R0b20gPiByZWN0Mi50b3AgJiYgcmVjdDEubGVmdCA8IHJlY3QyLnJpZ2h0ICYmIHJlY3QxLnJpZ2h0ID4gcmVjdDIubGVmdDtcclxuICBjb25zdCBpc0JvdHRvbSA9IHJlY3QxLnRvcCA8IHJlY3QyLmJvdHRvbSAtIHJlY3QyLmhlaWdodCAvIDMgJiYgcmVjdDEuYm90dG9tID4gcmVjdDIuYm90dG9tIC0gcmVjdDIuaGVpZ2h0IC8gMztcclxuICBjb25zdCBpc0xlZnQgPSByZWN0MS5yaWdodCA+IHJlY3QyLmxlZnQgJiYgcmVjdDEubGVmdCA8IHJlY3QyLmxlZnQgKyByZWN0Mi53aWR0aCAvIDM7XHJcblxyXG4gIHJldHVybiB7IHRvcDogaXNUb3AsIHJpZ2h0OiBpc1JpZ2h0LCBjZW50ZXI6IGlzQ2VudGVyLCBib3R0b206IGlzQm90dG9tLCBsZWZ0OiBpc0xlZnQgfTtcclxufVxyXG5cclxuLy8vIHJldHVybiB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBkcmFnZ2FibGUgdG8gdGhlIGNlbnRlciBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZnJvbSBlYWNoIGJvcmRlciBcclxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3RhbmNlRnJvbUJvcmRlciggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgY2hlY2tCb2R5Um90YXRpb246IGJvb2xlYW4gPSBmYWxzZSApOiBCb3JkZXJEaXN0YW5jZSB7XHJcbiAgY29uc3QgcmVjdDEgPSAhY2hlY2tCb2R5Um90YXRpb24gPyBkcmFnZ2FibGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBkcmFnZ2FibGUgKTtcclxuICBjb25zdCByZWN0MiA9ICFjaGVja0JvZHlSb3RhdGlvbiA/IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIHRhcmdldCApO1xyXG5cclxuICBjb25zdCBjZW50ZXIgPSB7XHJcbiAgICB4OiByZWN0MS5sZWZ0ICsgcmVjdDEud2lkdGggLyAyLFxyXG4gICAgeTogcmVjdDEudG9wICsgcmVjdDEuaGVpZ2h0IC8gMixcclxuICB9O1xyXG5cclxuICBjb25zdCBkaXN0YW5jZUZyb21Cb3JkZXI6IEJvcmRlckRpc3RhbmNlID0ge1xyXG4gICAgdG9wOiBjZW50ZXIueSAtIHJlY3QyLnRvcCxcclxuICAgIHJpZ2h0OiByZWN0Mi5yaWdodCAtIGNlbnRlci54LFxyXG4gICAgYm90dG9tOiByZWN0Mi5ib3R0b20gLSBjZW50ZXIueSxcclxuICAgIGxlZnQ6IGNlbnRlci54IC0gcmVjdDIubGVmdCxcclxuICB9O1xyXG5cclxuICByZXR1cm4gZGlzdGFuY2VGcm9tQm9yZGVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBydW5Pbmx5T25jZUtleWRvd25BY3Rpb25zKCBldnQ6IEtleWJvYXJkRXZlbnQgKSB7XHJcbiAgZm9yICggY29uc3QgcGFpciBvZiBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2UgKSB7XHJcbiAgICBpZiAoIGV2dC5jb2RlID09PSBwYWlyWzBdICkge1xyXG4gICAgICBwYWlyWzFdLmZvckVhY2goIGtiRXZlbnQgPT4ga2JFdmVudCggZXZ0ICkgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJ1bktleWRvd25BY3Rpb25zUmVwZWF0KCBldnQ6IEtleWJvYXJkRXZlbnQgKSB7XHJcbiAgZm9yICggY29uc3QgcGFpciBvZiBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdCApIHtcclxuICAgIGlmICggZXZ0LmNvZGUgPT09IHBhaXJbMF0gKSB7XHJcbiAgICAgIHBhaXJbMV0uZm9yRWFjaCgga2JFdmVudCA9PiBrYkV2ZW50KCBldnQgKSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgZXZ0ID0+IHtcclxuICBpZiAoICFldnQucmVwZWF0ICkge1xyXG4gICAgcnVuT25seU9uY2VLZXlkb3duQWN0aW9ucyggZXZ0ICk7XHJcbiAgfVxyXG5cclxuICBydW5LZXlkb3duQWN0aW9uc1JlcGVhdCggZXZ0ICk7XHJcbn0gKTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAna2V5dXAnLCBldnQgPT4ge1xyXG4gIGZvciAoIGNvbnN0IHBhaXIgb2YgZGljdEtleXNCeUFjdGlvbktleXVwICkge1xyXG4gICAgaWYgKCBldnQuY29kZSA9PT0gcGFpclswXSApIHtcclxuICAgICAgcGFpclsxXS5mb3JFYWNoKCBrYkV2ZW50ID0+IGtiRXZlbnQoIGV2dCApICk7XHJcbiAgICB9XHJcbiAgfVxyXG59ICk7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRSb3RhdGlvbkluRGVncmVlcyggZWxlbWVudDogSFRNTEVsZW1lbnQsIGF4aXM6ICd4JyB8ICd5JyB8ICd6JyA9ICd4JyApOiBudW1iZXIge1xyXG4gIGxldCByZWdleE1hdGNoUm90YXRlVmFsdWU6IFJlZ0V4cDtcclxuICBzd2l0Y2ggKCBheGlzICkge1xyXG4gICAgY2FzZSAneCc6XHJcbiAgICAgIHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZSA9IHJlZ2V4R3JvdXBSb3RhdGVYVmFsdWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAneSc6XHJcbiAgICAgIHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZSA9IHJlZ2V4R3JvdXBSb3RhdGVZVmFsdWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAneic6XHJcbiAgICAgIHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZSA9IHJlZ2V4R3JvdXBSb3RhdGVaVmFsdWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVnZXhNYXRjaFJvdGF0ZVZhbHVlID0gcmVnZXhHcm91cFJvdGF0ZVZhbHVlO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcblxyXG4gIGNvbnN0IG1hdGNoID0gcmVnZXhNYXRjaFJvdGF0ZVZhbHVlLmV4ZWMoIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtICk7XHJcbiAgaWYgKCBtYXRjaCApIHtcclxuICAgIGNvbnN0IHJvdGF0aW9uVmFsdWUgPSBwYXJzZUZsb2F0KCBtYXRjaFsxXSApO1xyXG4gICAgcmV0dXJuIHJvdGF0aW9uVmFsdWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJvZHlSb3RhdGlvbkluRGVncmVlcygpOiBudW1iZXIge1xyXG4gIGNvbnN0IG1hdGNoID0gZ2V0UmVnZXhSZW1vdmVSb3RhdGlvbkZyb21Cb2R5KCkuZXhlYyggZG9jdW1lbnQuYm9keS5zdHlsZS50cmFuc2Zvcm0gKTtcclxuICBpZiAoIG1hdGNoICkge1xyXG4gICAgY29uc3Qgcm90YXRpb25WYWx1ZSA9IHBhcnNlRmxvYXQoIG1hdGNoWzFdICk7XHJcbiAgICByZXR1cm4gcm90YXRpb25WYWx1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVnZXhSZW1vdmVSb3RhdGlvbkZyb21Cb2R5KCkge1xyXG4gIHJldHVybiBnZXRSZWdleFJlbW92ZVJvdGF0aW9uQmFzZWRPbkF4aXMoIGdldEJvZHlSb3RhdGlvbkF4aXMoKSApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWdleFJlbW92ZVJvdGF0aW9uQmFzZWRPbkF4aXMoIGF4aXM6ICd4JyB8ICd5JyB8ICd6JyApIHtcclxuICBzd2l0Y2ggKCBheGlzICkge1xyXG4gICAgY2FzZSAneCc6XHJcbiAgICAgIHJldHVybiByZWdleEdyb3VwUm90YXRlWFZhbHVlO1xyXG4gICAgY2FzZSAneSc6XHJcbiAgICAgIHJldHVybiByZWdleEdyb3VwUm90YXRlWVZhbHVlO1xyXG4gICAgY2FzZSAneic6XHJcbiAgICAgIHJldHVybiByZWdleEdyb3VwUm90YXRlWlZhbHVlO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHJlZ2V4R3JvdXBSb3RhdGVWYWx1ZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCb2R5Um90YXRpb25BeGlzKCk6ICd4JyB8ICd5JyB8ICd6JyB7XHJcbiAgcmV0dXJuIGdldEVsZW1lbnRSb3RhdGlvbkF4aXMoIGRvY3VtZW50LmJvZHkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRSb3RhdGlvbkF4aXMoIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICk6ICd4JyB8ICd5JyB8ICd6JyB7XHJcbiAgY29uc3QgZWxlbWVudFRyYW5zZm9ybSA9IGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtLnRvTG93ZXJDYXNlKCk7XHJcbiAgaWYgKCBlbGVtZW50VHJhbnNmb3JtLmluY2x1ZGVzKCAneCcgKSApIHtcclxuICAgIHJldHVybiAneCc7XHJcbiAgfSBlbHNlIGlmICggZWxlbWVudFRyYW5zZm9ybS5pbmNsdWRlcyggJ3knICkgKSB7XHJcbiAgICByZXR1cm4gJ3knO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJ3onO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybUNvb3Jkc0Zyb21FbGVtZW50KCBlbGVtZW50OiBIVE1MRWxlbWVudCwgY2hlY2tCb2R5Um90YXRpb246IGJvb2xlYW4gPSBmYWxzZSApOiBQb2ludDJEIHtcclxuICBjb25zdCBhcnJDb21wdXRlZERyYWdnYWJsZVRyYW5zbGF0ZSA9ICggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW1lbnQgKS50cmFuc2Zvcm0ubWF0Y2goIHJlZ2V4TnVtYmVyUGF0dGVybiApID8/IFswLCAwXSApLm1hcCggbiA9PiArbiApO1xyXG5cclxuICBsZXQgcmVzdWx0ID0ge1xyXG4gICAgeDogYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGVbNF0gIT09IHVuZGVmaW5lZCA/IE1hdGgucm91bmQoIGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzRdICkgOiAwLFxyXG4gICAgeTogYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGVbNV0gIT09IHVuZGVmaW5lZCA/IE1hdGgucm91bmQoIGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzVdICkgOiAwXHJcbiAgfVxyXG5cclxuICBpZiAoIGNoZWNrQm9keVJvdGF0aW9uICkge1xyXG4gICAgY29uc3QgYm9keUFuZ2xlID0gZ2V0RWxlbWVudFJvdGF0aW9uSW5EZWdyZWVzKCBkb2N1bWVudC5ib2R5LCBnZXRFbGVtZW50Um90YXRpb25BeGlzKCBlbGVtZW50ICkgKSB8fCAwO1xyXG4gICAgcmV0dXJuIHJvdGF0ZUNvb3JkaW5hdGVzKCByZXN1bHQueCwgcmVzdWx0LnksIGJvZHlBbmdsZSApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrRXZlbnRUb0Nvb3JkaW5hdGVzKCBldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQgKSB7XHJcbiAgaWYgKCBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQgKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiBldmVudC5jbGllbnRYLFxyXG4gICAgICB5OiBldmVudC5jbGllbnRZXHJcbiAgICB9O1xyXG4gIH0gZWxzZSBpZiAoIGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudCApIHtcclxuICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiB0b3VjaC5jbGllbnRYLFxyXG4gICAgICB5OiB0b3VjaC5jbGllbnRZXHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBcIkV2ZW50IG5vdCBGb3VuZFwiO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZpc2libGVEaXZBYm92ZVBhcmVudCggeyBwYXJlbnRFbGVtZW50LCBpZCwgcG9zaXRpb24sIGRpbWVuc2lvbnMgfTogeyBwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudDsgaWQ6IHN0cmluZzsgcG9zaXRpb24/OiB7IHRvcDogbnVtYmVyOyBsZWZ0OiBudW1iZXI7IH07IGRpbWVuc2lvbnM/OiBEaW1lbnNpb25zOyB9ICkge1xyXG4gIHZhciBpbnZpc2libGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG5cclxuICBpZiAoICFwYXJlbnRFbGVtZW50LnN0eWxlLnBvc2l0aW9uICkge1xyXG4gICAgcGFyZW50RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgfVxyXG5cclxuICBpbnZpc2libGVEaXYuaWQgPSBpZDtcclxuICBpbnZpc2libGVEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gIGludmlzaWJsZURpdi5zdHlsZS53aWR0aCA9IGRpbWVuc2lvbnMgJiYgZGltZW5zaW9ucy53aWR0aCA/IGRpbWVuc2lvbnMud2lkdGgudG9TdHJpbmcoKSArICdweCcgOiAnMTAwJSc7XHJcbiAgaW52aXNpYmxlRGl2LnN0eWxlLmhlaWdodCA9IGRpbWVuc2lvbnMgJiYgZGltZW5zaW9ucy5oZWlnaHQgPyBkaW1lbnNpb25zLmhlaWdodC50b1N0cmluZygpICsgJ3B4JyA6ICcxMDAlJztcclxuICBpbnZpc2libGVEaXYuc3R5bGUudG9wID0gKCBwb3NpdGlvbj8udG9wLnRvU3RyaW5nKCkgPz8gJzAnICkgKyAncHgnO1xyXG4gIGludmlzaWJsZURpdi5zdHlsZS5sZWZ0ID0gKCBwb3NpdGlvbj8ubGVmdC50b1N0cmluZygpID8/ICcwJyApICsgJ3B4JztcclxuICBpbnZpc2libGVEaXYuc3R5bGUub3BhY2l0eSA9ICcwJzsgLy8gTWFrZSB0aGUgZGl2IGludmlzaWJsZVxyXG4gIGludmlzaWJsZURpdi5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2F1dG8nOyAvLyBBbGxvdyB0aGUgZGl2IHRvIGludGVyY2VwdCBtb3VzZSBldmVudHNcclxuXHJcbiAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZCggaW52aXNpYmxlRGl2ICk7XHJcblxyXG4gIHJldHVybiBpbnZpc2libGVEaXY7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoaWRlRWxlbWVudCggZWxlbWVudDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICBlbGVtZW50LnN0eWxlLnpJbmRleCA9ICctMSc7XHJcbiAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnMHB4ICFpbXBvcnRhbnQnO1xyXG4gIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzBweCAhaW1wb3J0YW50JztcclxuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ2hpZGRlbicsICcnICk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzbGVlcEFzeW5jKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPiggKCByZXNvbHZlICkgPT4gc2V0VGltZW91dCggKCkgPT4gcmVzb2x2ZSgpLCBtcyApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaW5kRWxlbWVudHNCeUNoZWNrKCB0cmlnZ2VyRWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQsIG9uQ2hlY2s6IEZ1bmN0aW9uLCBvblVuY2hlY2s6IEZ1bmN0aW9uICkge1xyXG4gIGlmICggdHJpZ2dlckVsZW1lbnQuY2hlY2tlZCApIHtcclxuICAgIG9uQ2hlY2soIHRhcmdldEVsZW1lbnQgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHRyaWdnZXJHcm91cCA9IHRyaWdnZXJFbGVtZW50Lm5hbWVcclxuICAgID8gQXJyYXkuZnJvbSggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggYFtuYW1lPVwiJHsgdHJpZ2dlckVsZW1lbnQubmFtZSB9XCJdYCApIClcclxuICAgIDogW3RyaWdnZXJFbGVtZW50XTtcclxuXHJcbiAgdHJpZ2dlckdyb3VwLmZvckVhY2goIHQgPT4gdC5hZGRFdmVudExpc3RlbmVyKCAnY2hhbmdlJywgZXZ0ID0+IHtcclxuICAgIGlmICggdHJpZ2dlckVsZW1lbnQuY2hlY2tlZCApIHtcclxuICAgICAgb25DaGVjayggdGFyZ2V0RWxlbWVudCwgZXZ0ICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvblVuY2hlY2soIHRhcmdldEVsZW1lbnQsIGV2dCApO1xyXG4gICAgfVxyXG4gIH0gKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0SW5wdXRGb3JjZVBob25lTnVtYmVyRm9ybWF0KCBpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgKSB7XHJcbiAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBwaG9uZUlucHV0ID0gdGhpcy52YWx1ZTtcclxuXHJcbiAgICBjb25zdCBjbGVhblBob25lSW5wdXQgPSBwaG9uZUlucHV0LnJlcGxhY2UoIC9cXEQvZywgJycgKTtcclxuICAgIGlmICggY2xlYW5QaG9uZUlucHV0Lmxlbmd0aCA+IDExICkge1xyXG4gICAgICBwaG9uZUlucHV0ID0gY2xlYW5QaG9uZUlucHV0LnNsaWNlKCAwLCAxMSApO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBwaG9uZU51bWJlckZvcm1hdHRlZCA9IHRvUGhvbmVOdW1iZXIoIHBob25lSW5wdXQgKTtcclxuXHJcbiAgICBpZiAoIHBob25lTnVtYmVyRm9ybWF0dGVkLmxlbmd0aCA9PT0gMTAgKSB7XHJcbiAgICAgIHBob25lTnVtYmVyRm9ybWF0dGVkID0gcGhvbmVOdW1iZXJGb3JtYXR0ZWQucmVwbGFjZUFsbCggJy0nLCAnJyApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudmFsdWUgPSBwaG9uZU51bWJlckZvcm1hdHRlZDtcclxuICB9ICk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGVCcm93c2VyKCkge1xyXG4gIHJldHVybiAvQW5kcm9pZHxpUGhvbmUvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyRGV2aWNlVHlwZSgpOiAnYW5kcm9pZCcgfCAnYXBwbGUnIHwgJ2Rlc2t0b3AnIHtcclxuICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8ICggd2luZG93IGFzIGFueSApLm9wZXJhO1xyXG5cclxuICBpZiAoIC9hbmRyb2lkL2kudGVzdCggdXNlckFnZW50ICkgKSB7XHJcbiAgICByZXR1cm4gJ2FuZHJvaWQnO1xyXG4gIH0gZWxzZSBpZiAoIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KCB1c2VyQWdlbnQgKSAmJiAhKCB3aW5kb3cgYXMgYW55ICkuTVNTdHJlYW0gKSB7XHJcbiAgICByZXR1cm4gJ2FwcGxlJztcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuICdkZXNrdG9wJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09uU2NyZWVuKCBlbGVtZW50OiBIVE1MRWxlbWVudCApIHtcclxuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICByZXR1cm4gKFxyXG4gICAgcmVjdC50b3AgPj0gMCAmJlxyXG4gICAgcmVjdC5sZWZ0ID49IDAgJiZcclxuICAgIHJlY3QuYm90dG9tIDw9ICggd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgKSAmJlxyXG4gICAgcmVjdC5yaWdodCA8PSAoIHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCApXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRFbGVtZW50Vmlld0lmQ2hlY2tlZCggdHJpZ2dlckVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIHRhcmdldEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIG9wdGlvbnMgPSB7XHJcbiAgb25DaGVjazogKCB0cmlnZ2VyRWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgKSA9PiB7IH0sXHJcbiAgb25VbmNoZWNrOiAoIHRyaWdnZXJFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCB0YXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCApID0+IHsgfVxyXG59ICkge1xyXG4gIGJpbmRFbGVtZW50c0J5Q2hlY2soXHJcbiAgICB0cmlnZ2VyRWxlbWVudCxcclxuICAgIHRhcmdldEVsZW1lbnQsXHJcbiAgICAoIGVsOiBIVE1MRWxlbWVudCApID0+IHtcclxuICAgICAgZWwuY2xhc3NMaXN0LmFkZCggJ3Nob3cnICk7XHJcbiAgICAgIG9wdGlvbnMub25DaGVjayggdHJpZ2dlckVsZW1lbnQsIHRhcmdldEVsZW1lbnQgKTtcclxuICAgIH0sXHJcbiAgICAoIGVsOiBIVE1MRWxlbWVudCApID0+IHtcclxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSggJ3Nob3cnICk7XHJcbiAgICAgIG9wdGlvbnMub25VbmNoZWNrKCB0cmlnZ2VyRWxlbWVudCwgdGFyZ2V0RWxlbWVudCApO1xyXG4gICAgfSxcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVGcm9tUmFkaW9Hcm91cCggZ3JvdXBOYW1lOiBzdHJpbmcgKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGBbbmFtZT0keyBncm91cE5hbWUgfV06Y2hlY2tlZGAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIGlmICggZWwgKSB7XHJcbiAgICByZXR1cm4gZWwudmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNtb290aFNjcm9sbCggdGFyZ2V0WTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyICk6IHZvaWQge1xyXG4gIGNvbnN0IHN0YXJ0WSA9IHdpbmRvdy5zY3JvbGxZIHx8IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICBsZXQgc3RhcnRUaW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgZnVuY3Rpb24gc3RlcCggY3VycmVudFRpbWU6IG51bWJlciApIHtcclxuICAgIGlmICggIXN0YXJ0VGltZSApIHN0YXJ0VGltZSA9IGN1cnJlbnRUaW1lO1xyXG4gICAgY29uc3QgZWxhcHNlZFRpbWUgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcclxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5taW4oIGVsYXBzZWRUaW1lIC8gZHVyYXRpb24sIDEgKTtcclxuICAgIGNvbnN0IGVhc2VkUHJvZ3Jlc3MgPSBsZXJwKCAwLCAxLCBwcm9ncmVzcyApO1xyXG4gICAgd2luZG93LnNjcm9sbFRvKCAwLCBsZXJwKCBzdGFydFksIHRhcmdldFksIGVhc2VkUHJvZ3Jlc3MgKSApO1xyXG4gICAgaWYgKCBlbGFwc2VkVGltZSA8IGR1cmF0aW9uICkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHN0ZXAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSggc3RlcCApO1xyXG59XHJcblxyXG4vLyBSZXRvcm5hIHVtYSBmdW7Dp8OjbyBxdWUgbsOjbyB2YWkgc2VyIGNvbXBsZXRhZGEgY2FzbyBzZWphIGNoYW1hZGEgbm92YW1lbnRlIGVtIHsgZGVsYXkgfSBtaWxpc3NlZ3VuZG9zXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZUZhY3RvcnkoIGZ1bmM6IEZ1bmN0aW9uLCBkZWxheTogbnVtYmVyICk6IEZ1bmN0aW9uIHtcclxuICBsZXQgaW5EZWJvdW5jZTogbnVtYmVyO1xyXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gd2luZG93O1xyXG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcclxuICAgIGNsZWFyVGltZW91dCggaW5EZWJvdW5jZSApO1xyXG4gICAgaW5EZWJvdW5jZSA9IHdpbmRvdy5zZXRUaW1lb3V0KCAoKSA9PiBmdW5jLmFwcGx5KCBjb250ZXh0LCBhcmdzICksIGRlbGF5ICk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gUmV0b3JuYSB1bWEgZnVuw6fDo28gcXVlIHPDsyBwb2RlIHNlciBjb21wbGV0YWRhIHVtYSB2ZXogYSBjYWRhIHsgbGltaXQgfSBtaWxpc3NlZ3VuZG9zIFxyXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGVGYWN0b3J5KCBmdW5jOiBGdW5jdGlvbiwgbGltaXQ6IG51bWJlciApOiBGdW5jdGlvbiB7XHJcbiAgbGV0IGxhc3RGdW5jOiBudW1iZXI7XHJcbiAgbGV0IGxhc3RSYW46IG51bWJlcjtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHdpbmRvdztcclxuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICBpZiAoICFsYXN0UmFuICkge1xyXG4gICAgICBmdW5jLmFwcGx5KCBjb250ZXh0LCBhcmdzICk7XHJcbiAgICAgIGxhc3RSYW4gPSBEYXRlLm5vdygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KCBsYXN0RnVuYyApO1xyXG4gICAgICBsYXN0RnVuYyA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCBEYXRlLm5vdygpIC0gbGFzdFJhbiA+PSBsaW1pdCApIHtcclxuICAgICAgICAgIGZ1bmMuYXBwbHkoIGNvbnRleHQsIGFyZ3MgKTtcclxuICAgICAgICAgIGxhc3RSYW4gPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgbGltaXQgLSAoIERhdGUubm93KCkgLSBsYXN0UmFuICkgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhTY3JvbGxUbyggcG9zOiBudW1iZXIgKTogdm9pZCB7XHJcbiAgZG9jdW1lbnQuYm9keS5zY3JvbGxUbygge1xyXG4gICAgdG9wOiBwb3MsXHJcbiAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoU2Nyb2xsVG9FbGVtZW50KCBlbGVtZW50OiBIVE1MRWxlbWVudCwgdXNlQnJvd3NlckRlZmF1bHRzOiBib29sZWFuID0gdHJ1ZSApOiB2b2lkIHtcclxuICBpZiAoICF1c2VCcm93c2VyRGVmYXVsdHMgKSB7XHJcbiAgICBjb25zdCB0YXJnZXRZID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cuc2Nyb2xsWTtcclxuICAgIGNvbnN0IGR1cmF0aW9uID0gMTAwMDsgLy8gRHVyYcOnw6NvIGZpeGEgZW0gbWlsaXNzZWd1bmRvcyAoMSBzZWd1bmRvKVxyXG4gICAgc21vb3RoU2Nyb2xsKCB0YXJnZXRZLCBkdXJhdGlvbiApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgZG9jdW1lbnQuYm9keS5zY3JvbGxUbygge1xyXG4gICAgdG9wOiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnksXHJcbiAgICBsZWZ0OiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLngsXHJcbiAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0T3B0aW9uQnlUZXh0KCBpZFNlbGVjdEVsZW1lbnQ6IHN0cmluZywgc2VhcmNoVGV4dDogc3RyaW5nLCBjb250YWluczogYm9vbGVhbiA9IGZhbHNlICk6IHZvaWQge1xyXG4gIGNvbnN0IHNlbGVjdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggaWRTZWxlY3RFbGVtZW50ICkgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcblxyXG4gIGlmICggIXNlbGVjdEVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCBvcHRpb25zRWxlbWVudG9TZWxlY3QgPSBbLi4uc2VsZWN0RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnb3B0aW9uJyApXTtcclxuXHJcbiAgbGV0IHNlbGVjdGVkT3B0aW9uO1xyXG4gIGlmICggY29udGFpbnMgKSB7XHJcbiAgICBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnNFbGVtZW50b1NlbGVjdFxyXG4gICAgICAuZmlsdGVyKCBlbCA9PiBlbC50ZXh0Q29udGVudCAmJiBlbC50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCBzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkgKSApWzBdLnZhbHVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnNFbGVtZW50b1NlbGVjdFxyXG4gICAgICAuZmlsdGVyKCBlbCA9PiBlbC50ZXh0Q29udGVudCAmJiBlbC50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkgKVswXS52YWx1ZTtcclxuICB9XHJcblxyXG4gIHNlbGVjdEVsZW1lbnQudmFsdWUgPSBzZWxlY3RlZE9wdGlvbjtcclxufVxyXG5cclxuIiwiXHJcbi8vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjI0NTc2Ny9jcmVhdGluZy1hLWJsb2ItZnJvbS1hLWJhc2U2NC1zdHJpbmctaW4tamF2YXNjcmlwdFxyXG4vLy8gRGl2aWRlIHVtIGFycXVpdm8gYmluw6FyaW8gZW0gdsOhcmlhcyBwYXJ0ZXMsIHBhcmEgcXVlIGEgY29udmVyc8OjbyBzZWphIG90aW1pemFkYSwgZSByZXRvcm5hIHVtYSBibG9iIGNvbSBvIGFycXVpdm9cclxuXHJcbmltcG9ydCB7IGlzTnVsbE9yRW1wdHkgfSBmcm9tICcuL1N0cmluZ1Rvb2xzJztcclxuXHJcbi8vLyBAcGFyYW0gb25Qcm9ncmVzc28gVW0gY2FsbGJhY2sgcXVlIHJlY2ViZSBhIHBvcmNlbnRhZ2VtIGRlIHByb2dyZXNzbyBhdHVhbCBkYSBjb252ZXJzw6NvXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBiYXNlNjRUb0Jsb2IoIHRleHRvQmFzZTY0OiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBzdHJpbmcsIHRhbWFuaG9QYXJ0ZXMgPSAxMDI0LCBvblByb2dyZXNzID0gKCBwcm9ncmVzc29BdHVhbDogbnVtYmVyICkgPT4geyBjb25zb2xlLmxvZyggcHJvZ3Jlc3NvQXR1YWwgKSB9ICkge1xyXG4gIGNvbnN0IGJ5dGVBcnJheXMgPSBuZXcgQXJyYXk8VWludDhBcnJheT4oKTtcclxuICBjb25zdCBmaWxlU2l6ZSA9IHRleHRvQmFzZTY0Lmxlbmd0aDtcclxuXHJcbiAgLy8vIHByZWVuY2hlIGBieXRlQXJyYXlzYCBjb20gb3MgYnl0ZXMgZG8gYXJxdWl2byBwZWdhbmRvIHVtYSBwYXJ0ZSBkZSBcInRhbWFuaG9QYXJ0ZXNcIiBwb3IgdmV6XHJcbiAgZm9yICggbGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IGZpbGVTaXplOyBvZmZzZXQgKz0gdGFtYW5ob1BhcnRlcyApIHtcclxuICAgIC8vLyBwZWdhbmRvIHVtIHBhcnRlIGRlIHRhbWFuaG8ge3RhbWFuaG9QYXJ0ZXN9IGRvIGFycXVpdm9cclxuICAgIGNvbnN0IGNodW5rID0gdGV4dG9CYXNlNjQuc2xpY2UoIG9mZnNldCwgb2Zmc2V0ICsgdGFtYW5ob1BhcnRlcyApO1xyXG5cclxuICAgIC8vLyBjb252ZXJ0ZW5kbyBhIHBhcnRlIGVtIHVtIGFycmF5IGNvbSBjYWRhIGJ5dGUgZGVzc2UgcGVkYcOnbyBkbyBhcnF1aXZvXHJcbiAgICBjb25zdCBhcnJCeXRlc0NodW5rID0gbmV3IEFycmF5PG51bWJlcj4oIGNodW5rLmxlbmd0aCApO1xyXG4gICAgZm9yICggbGV0IGkgPSAwOyBpIDwgY2h1bmsubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIGFyckJ5dGVzQ2h1bmtbaV0gPSBjaHVuay5jaGFyQ29kZUF0KCBpICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8vIHRyYW5zZm9ybWFuZG8gZXNzZSBhcnJheSBlbSB1bSBhcnJheSBjb20gY2FtcG9zIGRvIHRhbWFuaG8gZGUgdW0gYnl0ZVxyXG4gICAgLy8vIGUgdW5pbmRvIGFzIHBhcnRlcyBqw6EgY29uY2x1w61kYXMgZG8gYXJxdWl2b1xyXG4gICAgYnl0ZUFycmF5cy5wdXNoKCBuZXcgVWludDhBcnJheSggYXJyQnl0ZXNDaHVuayApICk7XHJcblxyXG4gICAgLy8vIENoYW1hbmRvIGNhbGxiYWNrIHF1ZSBleGliZSBvIHByb2dyZXNzbyBxdWFuZG8gbyBwYXNzbyBhdHVhbCBmb3IgY29uY2x1w61kb1xyXG4gICAgYXdhaXQgb25Qcm9ncmVzcyggKCBvZmZzZXQgLyBmaWxlU2l6ZSApICogMTAwICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IEJsb2IoIGJ5dGVBcnJheXMsIHsgdHlwZTogY29udGVudFR5cGUgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRGaWxlRnJvbUJsb2IoIGJsb2I6IEJsb2IsIHRpdGxlOiBzdHJpbmcgKSB7XHJcbiAgbGV0IGZpbGUgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKCBibG9iICk7XHJcblxyXG4gIGlmICggZmlsZSApIHtcclxuICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2EnICk7XHJcbiAgICBhLmhyZWYgPSBmaWxlO1xyXG4gICAgYS5kb3dubG9hZCA9IHRpdGxlO1xyXG4gICAgYS5jbGljaygpO1xyXG4gICAgYS5yZW1vdmUoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlUGF0aCggZmlsZVBhdGg6IHN0cmluZyApOiBzdHJpbmcge1xyXG4gIGNvbnN0IHJlZ2V4ID0gLyg/Oi4qW1xcXFwvXSkoW15cXFxcL10rKSQvO1xyXG5cclxuICBjb25zdCBtYXRjaCA9IHJlZ2V4LmV4ZWMoIGZpbGVQYXRoICk7XHJcbiAgaWYgKCBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxICkge1xyXG4gICAgcmV0dXJuIG1hdGNoWzFdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZmlsZVBhdGg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZUV4dGVuc2lvbiggZmlsZU5hbWU6IHN0cmluZyApOiBzdHJpbmcge1xyXG4gIGlmICggaXNOdWxsT3JFbXB0eSggZmlsZU5hbWUgKSApIHJldHVybiAnJztcclxuXHJcbiAgY29uc3QgZGVmYXVsdEZpbGVTcmMgPSBmaWxlTmFtZS5zcGxpdCggJy4nICkucG9wKCk7XHJcbiAgaWYgKCBkZWZhdWx0RmlsZVNyYyAmJiBkZWZhdWx0RmlsZVNyYyAhPT0gZmlsZU5hbWUgKSB7XHJcbiAgICByZXR1cm4gZGVmYXVsdEZpbGVTcmM7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmaWxlVHlwZVN0ciA9IGZpbGVOYW1lLnNwbGl0KCAnLycgKS5wb3AoKTtcclxuICBpZiAoIGZpbGVUeXBlU3RyICYmIGZpbGVUeXBlU3RyICE9PSBmaWxlTmFtZSApIHtcclxuICAgIHJldHVybiBmaWxlVHlwZVN0cjtcclxuICB9XHJcblxyXG4gIHJldHVybiAnJztcclxufSIsImV4cG9ydCBjb25zdCByZWdleE51bWJlclBhdHRlcm4gPSAvLT9cXGQrXFwuP1xcZCovZztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnQyRCB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaW1lbnNpb25zIHtcclxuICB3aWR0aDogbnVtYmVyO1xyXG4gIGhlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhUb1JvdyggaW5kZXg6IG51bWJlciwgZ3JpZFdpZHRoOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoIGluZGV4IC8gZ3JpZFdpZHRoICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmRleFRvQ29sKCBpbmRleDogbnVtYmVyLCBncmlkV2lkdGg6IG51bWJlciApIHtcclxuICByZXR1cm4gaW5kZXggJSBncmlkV2lkdGg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3dDb2xUb0luZGV4KCByb3c6IG51bWJlciwgY29sOiBudW1iZXIsIHdpZHRoOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuICggcm93ICogd2lkdGggKSArIGNvbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUNvb3JkaW5hdGVzRnJvbVBvaW50MkQoIGNvb3JkczogUG9pbnQyRCwgYW5nbGU6IG51bWJlciApOiBQb2ludDJEIHtcclxuICBjb25zdCByYWRpYW5zID0gKCBNYXRoLlBJIC8gMTgwICkgKiBhbmdsZTtcclxuICBjb25zdCBuZXdYID0gY29vcmRzLnggKiBNYXRoLmNvcyggcmFkaWFucyApIC0gY29vcmRzLnkgKiBNYXRoLnNpbiggcmFkaWFucyApO1xyXG4gIGNvbnN0IG5ld1kgPSBjb29yZHMueCAqIE1hdGguc2luKCByYWRpYW5zICkgKyBjb29yZHMueSAqIE1hdGguY29zKCByYWRpYW5zICk7XHJcbiAgcmV0dXJuIHsgeDogbmV3WCwgeTogbmV3WSB9O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUNvb3JkaW5hdGVzKCB4OiBudW1iZXIsIHk6IG51bWJlciwgYW5nbGU6IG51bWJlciApOiBQb2ludDJEIHtcclxuICBjb25zdCByYWRpYW5zID0gKCBNYXRoLlBJIC8gMTgwICkgKiBhbmdsZTtcclxuICBjb25zdCBuZXdYID0geCAqIE1hdGguY29zKCByYWRpYW5zICkgLSB5ICogTWF0aC5zaW4oIHJhZGlhbnMgKTtcclxuICBjb25zdCBuZXdZID0geCAqIE1hdGguc2luKCByYWRpYW5zICkgKyB5ICogTWF0aC5jb3MoIHJhZGlhbnMgKTtcclxuICByZXR1cm4geyB4OiBuZXdYLCB5OiBuZXdZIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcmVEaWFnb25hbHMoIGluZGV4MTogbnVtYmVyLCBpbmRleDI6IG51bWJlciwgZ3JpZFNpemU6IG51bWJlciApOiBib29sZWFuIHtcclxuICBpZiAoIGluZGV4MSA8IDAgfHwgaW5kZXgyIDwgMCApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggJ0ludmFsaWQgY2VsbCBpbmRpY2VzJyApO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgcm93MSA9IGluZGV4VG9Sb3coIGluZGV4MSwgZ3JpZFNpemUgKTtcclxuICBjb25zdCBjb2wxID0gaW5kZXhUb0NvbCggaW5kZXgxLCBncmlkU2l6ZSApO1xyXG5cclxuICBjb25zdCByb3cyID0gaW5kZXhUb1JvdyggaW5kZXgyLCBncmlkU2l6ZSApO1xyXG4gIGNvbnN0IGNvbDIgPSBpbmRleFRvQ29sKCBpbmRleDIsIGdyaWRTaXplICk7XHJcblxyXG4gIHJldHVybiBNYXRoLmFicyggcm93MSAtIHJvdzIgKSA9PT0gTWF0aC5hYnMoIGNvbDEgLSBjb2wyICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmRleFRvUG9pbnQyRCggaW5kZXg6IG51bWJlciwgZ3JpZFdpZHRoOiBudW1iZXIgKTogUG9pbnQyRCB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6IGluZGV4VG9Db2woIGluZGV4LCBncmlkV2lkdGggKSxcclxuICAgIHk6IGluZGV4VG9Sb3coIGluZGV4LCBncmlkV2lkdGggKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgYW1vdW50OiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gKCAxIC0gYW1vdW50ICkgKiBtaW4gKyBhbW91bnQgKiBtYXg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlTGVycCggYTogbnVtYmVyLCBiOiBudW1iZXIsIHZhbDogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgcmV0dXJuICggdmFsIC0gYSApIC8gKCBiIC0gYSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtYXAoIGluTWluOiBudW1iZXIsIGluTWF4OiBudW1iZXIsIG91dE1pbjogbnVtYmVyLCBvdXRNYXg6IG51bWJlciwgdmFsOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gbGVycCggb3V0TWluLCBvdXRNYXgsIGludmVyc2VMZXJwKCBpbk1pbiwgaW5NYXgsIHZhbCApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRFeGNsdXNpdmUoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciApIHtcclxuICByZXR1cm4gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqICggbWF4IC0gbWluICkgKyBtaW4gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWxTZXRzPFQ+KCBzZXQxOiBTZXQ8VD4sIHNldDI6IFNldDxUPiApIHtcclxuICByZXR1cm4gc2V0MS5zaXplID09PSBzZXQyLnNpemUgJiZcclxuICAgIFsuLi5zZXQxXS5ldmVyeSggKCB4ICkgPT4gc2V0Mi5oYXMoIHggKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50SW5jbHVzaXZlKCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIgKSB7XHJcbiAgbWluID0gTWF0aC5jZWlsKCBtaW4gKTtcclxuICBtYXggPSBNYXRoLmZsb29yKCBtYXggKTtcclxuICByZXR1cm4gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqICggbWF4IC0gbWluICsgMSApICkgKyBtaW47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21Gcm9tQXJyYXk8VD4oIGFycjogQXJyYXk8VD4gKSB7XHJcbiAgcmV0dXJuIGFycltnZXRSYW5kb21JbnRFeGNsdXNpdmUoIDAsIGFyci5sZW5ndGggKV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCggbnVtOiBudW1iZXIgPSAwLCBtaW46IG51bWJlciA9IDAsIG1heDogbnVtYmVyID0gMTAwICk6IG51bWJlciB7XHJcbiAgcmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBudW0sIG1heCApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtaW51dGVzVG9NaWxsaXNlY29uZHMoIG1zOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1zICogNjAwMDA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtaWxsaXNlY29uZHNUb01pbnV0ZXMoIG1zOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1zIC8gNjAwMDA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtaWxsaXNlY29uZHNUb0hvdXJzKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBtcyAvIDMuNmUrNjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbGxpc2Vjb25kc1RvRGF5cyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gbXMgLyA4LjY0ZSs3O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVnYWJ5dGVUb0J5dGUoIG1iOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1iICogMTAyNCAqIDEwMjQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBieXRlVG9NZWdhYnl0ZSggYjogbnVtYmVyICkge1xyXG4gIHJldHVybiBiIC8gMTAyNCAvIDEwMjQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBcnJheUZyb21SYW5nZSggc2l6ZTogbnVtYmVyLCBzdGFydGluZ0Zyb206IG51bWJlciA9IDAgKTogbnVtYmVyW10ge1xyXG4gIGxldCByZXN1bHQgPSBbLi4uQXJyYXkoIHNpemUgKS5rZXlzKCldXHJcblxyXG4gIGlmICggc3RhcnRpbmdGcm9tICE9IDAgKSB7XHJcbiAgICByZXN1bHQgPSByZXN1bHQubWFwKCBpID0+IGkgKyBzdGFydGluZ0Zyb20gKTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn0iLCJpbXBvcnQgeyBDcmVhdGVNZWRpYUNvbXBvbmVudE9wdGlvbnMsIE1lZGlhQ29tcG9uZW50IH0gZnJvbSAnLi4vQ29tcG9uZW50cy9NZWRpYUNvbXBvbmVudCc7XHJcbmltcG9ydCAnLi4vRXh0ZW5zaW9ucy9TdHJpbmdFeHRlbnNpb25zJztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudEZyb21IVE1MLCBoaWRlRWxlbWVudCB9IGZyb20gJy4vRE9NVG9vbHMnO1xyXG5pbXBvcnQgeyBnZXRGaWxlRXh0ZW5zaW9uIH0gZnJvbSAnLi9GaWxlVG9vbHMnO1xyXG5cclxuZXhwb3J0IHR5cGUgUG9zc2libGVNZWRpYVR5cGUgPSAnYXVkaW8nIHwgJ3ZpZGVvJztcclxuXHJcbmV4cG9ydCBjb25zdCBhdWRpb0V4dGVuc2lvbnM6IHN0cmluZ1tdID0gWydtcDMnLCAnd2F2JywgJ29nZycsICdhYWMnLCAnd21hJywgJ2ZsYWMnLCAnbTRhJ107XHJcbmV4cG9ydCBjb25zdCB2aWRlb0V4dGVuc2lvbnM6IHN0cmluZ1tdID0gWydtcDQnLCAnYXZpJywgJ21vdicsICdta3YnLCAnd212JywgJ2ZsdicsICd3ZWJtJywgJ200diddO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIE1lZGlhUGxheWVyRWxlbWVudENvbmZpZyA9IHtcclxuICB0eXBlOiBQb3NzaWJsZU1lZGlhVHlwZTtcclxuICBhdXRvcGxheTogYm9vbGVhbjtcclxuICBtdXRlZDogYm9vbGVhbjtcclxuICBsb29wOiBib29sZWFuO1xyXG4gIHByZWxvYWQ6ICdhdXRvJyB8ICdtZXRhZGF0YScgfCAnbm9uZSc7XHJcbiAgb25wbGF5PzogKCBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQgKSA9PiB2b2lkO1xyXG4gIG9ucGF1c2U/OiAoIGF1ZGlvRWxlbWVudDogSFRNTEF1ZGlvRWxlbWVudCApID0+IHZvaWQ7XHJcbiAgb25QbGF5PzogKCBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQgKSA9PiB2b2lkO1xyXG4gIG9uUGF1c2U/OiAoIGF1ZGlvRWxlbWVudDogSFRNTEF1ZGlvRWxlbWVudCApID0+IHZvaWQ7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdEF1ZGlvUGxheWVyQ29uZmlnOiBNZWRpYVBsYXllckVsZW1lbnRDb25maWcgPSB7XHJcbiAgdHlwZTogJ2F1ZGlvJyxcclxuICBhdXRvcGxheTogZmFsc2UsXHJcbiAgbXV0ZWQ6IGZhbHNlLFxyXG4gIGxvb3A6IGZhbHNlLFxyXG4gIHByZWxvYWQ6ICdhdXRvJyxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRWaWRlb1BsYXllckNvbmZpZzogTWVkaWFQbGF5ZXJFbGVtZW50Q29uZmlnID0ge1xyXG4gIHR5cGU6ICd2aWRlbycsXHJcbiAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gIG11dGVkOiBmYWxzZSxcclxuICBsb29wOiBmYWxzZSxcclxuICBwcmVsb2FkOiAnYXV0bycsXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVkaWFUeXBlQnlTb3VyY2UoIHNvdXJjZTogc3RyaW5nICk6IFBvc3NpYmxlTWVkaWFUeXBlIHtcclxuICByZXR1cm4gZ2V0TWVkaWFUeXBlQnlFeHRlbnNpb24oIGdldEZpbGVFeHRlbnNpb24oIHNvdXJjZSApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZWRpYVR5cGVCeUV4dGVuc2lvbiggZXh0ZW5zaW9uOiBzdHJpbmcgKTogUG9zc2libGVNZWRpYVR5cGUge1xyXG4gIGNvbnN0IG5vcm1hbGl6ZWRFeHRlbnNpb24gPSBleHRlbnNpb24udG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgaWYgKCBhdWRpb0V4dGVuc2lvbnMuaW5jbHVkZXMoIG5vcm1hbGl6ZWRFeHRlbnNpb24gKSApIHtcclxuICAgIHJldHVybiAnYXVkaW8nO1xyXG4gIH0gZWxzZSBpZiAoIHZpZGVvRXh0ZW5zaW9ucy5pbmNsdWRlcyggbm9ybWFsaXplZEV4dGVuc2lvbiApICkge1xyXG4gICAgcmV0dXJuICd2aWRlbyc7XHJcbiAgfVxyXG5cclxuICB0aHJvdyBuZXcgRXJyb3IoIFwiSW52YWxpZCBmaWxlIGV4dGVuc2lvbjogXCIgKyBleHRlbnNpb24gKTtcclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVkaWFEZWZhdWx0c0J5U291cmNlKCBzcmM6IHN0cmluZyApOiBNZWRpYVBsYXllckVsZW1lbnRDb25maWcge1xyXG4gIGNvbnN0IGZpbGVFeHRlbnNpb24gPSBnZXRGaWxlRXh0ZW5zaW9uKCBzcmMgKTtcclxuXHJcbiAgaWYgKCAhZmlsZUV4dGVuc2lvbiApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggXCJJbnZhbGlkIGZpbGUgZXh0ZW5zaW9uXCIgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBnZXRNZWRpYURlZmF1bHRzQnlFeHRlbnNpb24oIGZpbGVFeHRlbnNpb24gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE1lZGlhRGVmYXVsdHNCeUV4dGVuc2lvbiggZXh0ZW5zaW9uOiBzdHJpbmcgKTogTWVkaWFQbGF5ZXJFbGVtZW50Q29uZmlnIHtcclxuICBjb25zdCBtZWRpYVR5cGUgPSBnZXRNZWRpYVR5cGVCeUV4dGVuc2lvbiggZXh0ZW5zaW9uICk7XHJcblxyXG4gIHN3aXRjaCAoIG1lZGlhVHlwZSApIHtcclxuICAgIGNhc2UgJ3ZpZGVvJzpcclxuICAgICAgcmV0dXJuIGRlZmF1bHRWaWRlb1BsYXllckNvbmZpZztcclxuICAgIGNhc2UgJ2F1ZGlvJzpcclxuICAgICAgcmV0dXJuIGRlZmF1bHRBdWRpb1BsYXllckNvbmZpZztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ0ludmFsaWQgZmlsZSBleHRlbnNpb24gYXQ6ICcgKyBleHRlbnNpb24gKVxyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZWRpYURlZmF1bHRzQnlNZWRpYVR5cGUoIG1lZGlhVHlwZTogUG9zc2libGVNZWRpYVR5cGUgKTogTWVkaWFQbGF5ZXJFbGVtZW50Q29uZmlnIHtcclxuICBzd2l0Y2ggKCBtZWRpYVR5cGUgKSB7XHJcbiAgICBjYXNlICd2aWRlbyc6XHJcbiAgICAgIHJldHVybiBkZWZhdWx0VmlkZW9QbGF5ZXJDb25maWc7XHJcbiAgICBjYXNlICdhdWRpbyc6XHJcbiAgICAgIHJldHVybiBkZWZhdWx0QXVkaW9QbGF5ZXJDb25maWc7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoICdJbnZhbGlkIGZpbGUgZXh0ZW5zaW9uIGF0OiAnICsgbWVkaWFUeXBlIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVNZWRpYUNvbXBvbmVudE9uQm9keSggb3B0aW9uczogQ3JlYXRlTWVkaWFDb21wb25lbnRPcHRpb25zICkge1xyXG4gIHJldHVybiBhd2FpdCBNZWRpYUNvbXBvbmVudC5jcmVhdGVNZWRpYUNvbXBvbmVudE9uQm9keSggb3B0aW9ucyApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVkaWFQbGF5ZXIoIGFyclNvdXJjZXM6IHN0cmluZ1tdLCBwbGF5ZXJDb25maWc6IE1lZGlhUGxheWVyRWxlbWVudENvbmZpZyApIHtcclxuICBjb25zdCBpc01lZGlhVHlwZVZpZGVvID0gcGxheWVyQ29uZmlnICYmIHBsYXllckNvbmZpZy50eXBlID09PSAndmlkZW8nO1xyXG4gIGxldCBtZWRpYUVsZW1lbnRIVE1MID0gaXNNZWRpYVR5cGVWaWRlb1xyXG4gICAgPyB2aWRlb0VsZW1lbnRIVE1MKCBhcnJTb3VyY2VzLCBwbGF5ZXJDb25maWcgKVxyXG4gICAgOiBhdWRpb0VsZW1lbnRIVE1MKCBhcnJTb3VyY2VzLCBwbGF5ZXJDb25maWcgKTtcclxuXHJcbiAgY29uc3QgbWVkaWFFbGVtZW50ID0gZ2V0RWxlbWVudEZyb21IVE1MKCBtZWRpYUVsZW1lbnRIVE1MICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEVsZW1lbnQoICdhZnRlcmJlZ2luJywgbWVkaWFFbGVtZW50ICk7XHJcblxyXG4gIGlmICggIWlzTWVkaWFUeXBlVmlkZW8gKSB7XHJcbiAgICBoaWRlRWxlbWVudCggbWVkaWFFbGVtZW50ICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbWVkaWFFbGVtZW50O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmlkZW9FbGVtZW50SFRNTCggYXJyU291cmNlczogc3RyaW5nW10sIHBsYXllckNvbmZpZzogTWVkaWFQbGF5ZXJFbGVtZW50Q29uZmlnICkge1xyXG4gIHJldHVybiBgPHZpZGVvIHBsYXlzaW5saW5lICR7IHBhcmFtc1RvUGxheWVyQ29uZmlnKCBwbGF5ZXJDb25maWcgKSB9PlxyXG4gICAgJHsgYXJyU291cmNlcy5tYXAoIHNyYyA9PiB2aWRlb1NvdXJjZUVsZW1lbnRIVE1MKCBzcmMgKSApLnJlZHVjZSggKCBhY2MsIG5leHQgKSA9PiBhY2MgKyBuZXh0LCAnJyApIH1cclxuICA8L3ZpZGVvPmA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdWRpb0VsZW1lbnRIVE1MKCBhcnJTb3VyY2VzOiBzdHJpbmdbXSwgcGxheWVyQ29uZmlnOiBNZWRpYVBsYXllckVsZW1lbnRDb25maWcgKSB7XHJcbiAgcmV0dXJuIGA8YXVkaW8gcGxheXNpbmxpbmUgJHsgcGFyYW1zVG9QbGF5ZXJDb25maWcoIHBsYXllckNvbmZpZyApIH0+XHJcbiAgICAkeyBhcnJTb3VyY2VzLm1hcCggc3JjID0+IGF1ZGlvU291cmNlRWxlbWVudEhUTUwoIHNyYyApICkucmVkdWNlKCAoIGFjYywgbmV4dCApID0+IGFjYyArIG5leHQsICcnICkgfVxyXG4gIDwvYXVkaW8+YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZpZGVvU291cmNlRWxlbWVudEhUTUwoIHNyYzogc3RyaW5nICkge1xyXG4gIHJldHVybiBgPHNvdXJjZSBzcmM9XCIkeyBzcmMgfVwiIHR5cGU9XCJ2aWRlby8keyBnZXRGaWxlRXh0ZW5zaW9uKCBzcmMgKSB9XCI+YDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGF1ZGlvU291cmNlRWxlbWVudEhUTUwoIHNyYzogc3RyaW5nICkge1xyXG4gIHJldHVybiBgPHNvdXJjZSBzcmM9XCIkeyBzcmMgfVwiIHR5cGU9XCJhdWRpby8keyBnZXRGaWxlRXh0ZW5zaW9uKCBzcmMgKSB9XCI+YDtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyYW1zVG9QbGF5ZXJDb25maWcoIHBsYXllckNvbmZpZzogTWVkaWFQbGF5ZXJFbGVtZW50Q29uZmlnICkge1xyXG4gIGNvbnN0IHBhcmFtQXV0b1BsYXkgPSBwbGF5ZXJDb25maWcuYXV0b3BsYXkgPyAnYXV0b3BsYXknIDogJyc7XHJcbiAgY29uc3QgcGFyYW1NdXRlZCA9IHBsYXllckNvbmZpZy5tdXRlZCA/ICdtdXRlZCcgOiAnJztcclxuICBjb25zdCBwYXJhbUxvb3AgPSBwbGF5ZXJDb25maWcubG9vcCA/ICdsb29wJyA6ICcnO1xyXG4gIGNvbnN0IHBhcmFtUHJlbG9hZCA9IHBsYXllckNvbmZpZy5wcmVsb2FkID8gJ3ByZWxvYWQ9XCInICsgcGxheWVyQ29uZmlnLnByZWxvYWQgKyAnXCInIDogJyc7XHJcblxyXG4gIHJldHVybiBgICR7IHBhcmFtQXV0b1BsYXkgfSAkeyBwYXJhbU11dGVkIH0gJHsgcGFyYW1Mb29wIH0gJHsgcGFyYW1QcmVsb2FkIH1gLnRyaW1FbmQoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBsYXlCdXR0b25FbGVtZW50KCBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQsIHBsYXllckNvbmZpZz86IE1lZGlhUGxheWVyRWxlbWVudENvbmZpZyApIHtcclxuICBjb25zdCBidXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2J1dHRvbicgKTtcclxuICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdwbGF5LWJ1dHRvbicgKTtcclxuXHJcbiAgc2V0VGltZW91dCggKCkgPT4ge1xyXG4gICAgaWYgKCBhdWRpb0VsZW1lbnQucGF1c2VkICkge1xyXG4gICAgICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdwYXVzZWQnICk7XHJcbiAgICB9XHJcbiAgfSwgMzAwICk7XHJcblxyXG4gIGJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgaWYgKCBhdWRpb0VsZW1lbnQucGF1c2VkICkge1xyXG4gICAgICBhdWRpb0VsZW1lbnQucGxheSgpO1xyXG4gICAgICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICdwYXVzZWQnICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhdWRpb0VsZW1lbnQucGF1c2UoKTtcclxuICAgICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKCAncGF1c2VkJyApO1xyXG4gICAgfVxyXG4gIH0gKTtcclxuXHJcbiAgc2V0QXVkaW9FbGVtZW50UGxheVBhdXNlRXZlbnRzKCBidXR0b25FbGVtZW50LCBhdWRpb0VsZW1lbnQsIHBsYXllckNvbmZpZyApO1xyXG5cclxuICByZXR1cm4gYnV0dG9uRWxlbWVudDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHNldEF1ZGlvRWxlbWVudFBsYXlQYXVzZUV2ZW50cyggYnV0dG9uRWxlbWVudDogSFRNTEJ1dHRvbkVsZW1lbnQsIGF1ZGlvRWxlbWVudDogSFRNTEF1ZGlvRWxlbWVudCwgcGxheWVyQ29uZmlnPzogTWVkaWFQbGF5ZXJFbGVtZW50Q29uZmlnICkge1xyXG4gIGF1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncGxheScsICgpID0+IHtcclxuICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ3BhdXNlZCcgKTtcclxuICAgIGlmICggcGxheWVyQ29uZmlnICYmIHBsYXllckNvbmZpZy5vblBsYXkgKSB7XHJcbiAgICAgIHBsYXllckNvbmZpZy5vblBsYXkoIGF1ZGlvRWxlbWVudCApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggcGxheWVyQ29uZmlnICYmIHBsYXllckNvbmZpZy5vbnBsYXkgKSB7XHJcbiAgICAgIHBsYXllckNvbmZpZy5vbnBsYXkoIGF1ZGlvRWxlbWVudCApO1xyXG4gICAgfVxyXG4gIH0gKTtcclxuXHJcbiAgYXVkaW9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwYXVzZScsICgpID0+IHtcclxuICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3BhdXNlZCcgKTtcclxuICAgIGlmICggcGxheWVyQ29uZmlnICYmIHBsYXllckNvbmZpZy5vblBhdXNlICkge1xyXG4gICAgICBwbGF5ZXJDb25maWcub25QYXVzZSggYXVkaW9FbGVtZW50ICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCBwbGF5ZXJDb25maWcgJiYgcGxheWVyQ29uZmlnLm9ucGF1c2UgKSB7XHJcbiAgICAgIHBsYXllckNvbmZpZy5vbnBhdXNlKCBhdWRpb0VsZW1lbnQgKTtcclxuICAgIH1cclxuICB9ICk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGxheUJ1dHRvbkNTUygpIHtcclxuICByZXR1cm4gYFxyXG4gICAgLnBsYXktYnV0dG9uIHtcclxuICAgICAgbWFyZ2luOiAwO1xyXG4gICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBib3JkZXI6IDA7XHJcbiAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICB3aWR0aDogMDtcclxuICAgICAgaGVpZ2h0OiAzNHB4O1xyXG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICMyMDIwMjA7XHJcbiAgICAgIHRyYW5zaXRpb246IDEwMG1zIGFsbCBlYXNlO1xyXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgIGJvcmRlci1zdHlsZTogZG91YmxlO1xyXG4gICAgICBib3JkZXItd2lkdGg6IDBweCAwIDBweCAzMHB4O1xyXG4gICAgfVxyXG5cclxuICAgIC5wbGF5LWJ1dHRvbi5wYXVzZWQge1xyXG4gICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gICAgICBib3JkZXItd2lkdGg6IDIzcHggMHB4IDIzcHggMzRweDtcclxuICAgIH1cclxuXHJcbiAgICAucGxheS1idXR0b246aG92ZXIge1xyXG4gICAgICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICM0MDQwNDA7XHJcbiAgICB9XHJcbiAgYDtcclxufVxyXG5cclxuZXhwb3J0IHsgQ3JlYXRlTWVkaWFDb21wb25lbnRPcHRpb25zIH07IiwiZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFjY2VudHMoIHN0cjogc3RyaW5nICkge1xyXG4gIHJldHVybiBzdHIubm9ybWFsaXplKCAnTkZEJyApLnJlcGxhY2UoIC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoIHN0cjogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgaWYgKCB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiAnJztcclxuICB9XHJcbiAgcmV0dXJuIHN0ci5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZyggMSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoVGVybSggc3RyaW5nQXJyYXk6IHN0cmluZ1tdLCBzZWFyY2hUZXJtOiBzdHJpbmcgKTogc3RyaW5nW10ge1xyXG4gIHJldHVybiBzdHJpbmdBcnJheVxyXG4gICAgLmZpbHRlciggKCB2OiBzdHJpbmcgKSA9PiB2LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpICkgPiAtMSApXHJcbiAgICAuc2xpY2UoIDAsIDEwIClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHplcm9CZWZvcmUoIG46IG51bWJlciApIHtcclxuICByZXR1cm4gbi50b1N0cmluZygpLnBhZFN0YXJ0KCAyLCAnMCcgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbE9yRW1wdHkoIHN0cjogc3RyaW5nICkge1xyXG4gIHJldHVybiB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCAhc3RyIHx8IHN0ciA9PT0gJydcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvUGhvbmVOdW1iZXIoIGlucHV0VGV4dDogc3RyaW5nICkge1xyXG4gIGNvbnN0IGNsZWFuTnVtYmVyID0gaW5wdXRUZXh0LnJlcGxhY2UoIC9cXEQvZywgJycgKTtcclxuXHJcbiAgbGV0IHJlc3VsdDtcclxuICBpZiAoIGNsZWFuTnVtYmVyLmxlbmd0aCA8PSAxMCApIHtcclxuICAgIGNvbnN0IHJlZ2V4ID0gL14oXFxkezJ9KShcXGR7NH0pKFxcZHswLDR9KSQvO1xyXG4gICAgcmVzdWx0ID0gY2xlYW5OdW1iZXIucmVwbGFjZSggcmVnZXgsICcoJDEpICQyLSQzJyApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCByZWdleCA9IC9eKFxcZHsyfSkoXFxkezV9KShcXGR7MCw0fSkkLztcclxuICAgIHJlc3VsdCA9IGNsZWFuTnVtYmVyLnJlcGxhY2UoIHJlZ2V4LCAnKCQxKSAkMi0kMycgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTcGVjaWFsQ2hhcmFjdGVycyggaW5wdXQ6IHN0cmluZyApOiBzdHJpbmcge1xyXG4gIHJldHVybiBpbnB1dC5yZXBsYWNlKCAvW15hLXpBLVowLTldL2csICcnICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlU3BlY2lhbFdpdGhXaGl0ZXNwYWNlKCBpbnB1dDogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2UoIC9bXmEtekEtWjAtOV0vZywgJyAnICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlUGVyY2VudEVuY29kaW5nKCBodG1sOiBzdHJpbmcgKTogc3RyaW5nIHtcclxuICAvLyBSZXBsYWNlICUyMCB3aXRoIGFjdHVhbCBzcGFjZXNcclxuICByZXR1cm4gaHRtbC5yZXBsYWNlKCAvJTIwL2csICcgJyApO1xyXG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IE9iamVjdEV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLi8uLi9FeHRyYXMvT2JqZWN0RXZlbnRMaXN0ZW5lcic7XHJcbmltcG9ydCB7IGdldEVsZW1lbnRGcm9tSFRNTCwgaW5zZXJ0RWxlbWVudEF0SW5kZXgsIGlzVmFsaWRZb3V0dWJlVXJsT3JJZCB9IGZyb20gJy4uLy4uL1Rvb2xzL0RPTVRvb2xzJztcclxuaW1wb3J0IHsgcmVtb3ZlRmlsZVBhdGggfSBmcm9tICcuLi8uLi9Ub29scy9GaWxlVG9vbHMnO1xyXG5pbXBvcnQgeyByZW1vdmVTcGVjaWFsQ2hhcmFjdGVycywgcmVwbGFjZVBlcmNlbnRFbmNvZGluZyB9IGZyb20gJy4uLy4uL1Rvb2xzL1N0cmluZ1Rvb2xzJztcclxuaW1wb3J0IHsgTWVkaWFDb21wb25lbnQgfSBmcm9tICcuLi9NZWRpYUNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE1lZGlhUGxheWVyIH0gZnJvbSAnLi4vVHlwZXMnO1xyXG5pbXBvcnQgeyBZb3V0dWJlSWZyYW1lIH0gZnJvbSAnLi4vWW91dHViZUlmcmFtZS9Zb3V0dWJlSWZyYW1lU3dpdGNoZXInO1xyXG5pbXBvcnQgeyB0ZW1wbGF0ZVNvdW5kYm9hcmRJbnB1dCwgdGVtcGxhdGVTb3VuZGJvYXJkSXRlbUNvbnRhaW5lciB9IGZyb20gJy4vVGVtcGxhdGVzU291bmRib2FyZCc7XHJcblxyXG5cclxuZXhwb3J0IHR5cGUgU291bmRib2FyZEl0ZW1PcHRpb25zID0ge1xyXG4gIHNyYzogc3RyaW5nO1xyXG4gIGF1dG9SZXBlYXRPblBsYXk6IGJvb2xlYW47XHJcbiAgc3RhcnRzQXQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFNvdW5kYm9hcmRJdGVtUG9zc2libGVJbnB1dCA9IHN0cmluZyB8IFNvdW5kYm9hcmRJdGVtT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIFNvdW5kYm9hcmRPcHRpb25zID0ge1xyXG4gIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgYXJyTWVkaWFTcmM6IFNvdW5kYm9hcmRJdGVtUG9zc2libGVJbnB1dFtdO1xyXG4gIGNvbnRhaW5lcnNDbGFzc0xpc3Q6IHN0cmluZ1tdO1xyXG4gIGl0ZW1DbGFzc0xpc3Q6IHN0cmluZ1tdO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IHR5cGUgU291bmRib2FyZENvbXBvbmVudCA9IHtcclxuICBtZWRpYTogTWVkaWFQbGF5ZXI7XHJcbiAgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgaW5wdXRDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gIGJ1dHRvblJlbW92ZUl0ZW06IEhUTUxCdXR0b25FbGVtZW50O1xyXG4gIG1lZGlhQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICBpdGVtT3B0aW9uczogU291bmRib2FyZEl0ZW1PcHRpb25zO1xyXG4gIGluZGV4OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgU291bmRib2FyZCBleHRlbmRzIE9iamVjdEV2ZW50TGlzdGVuZXIge1xyXG4gIHB1YmxpYyByZWFkb25seSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gIHB1YmxpYyBjb250YWluZXJzQ2xhc3NMaXN0OiBzdHJpbmdbXTtcclxuICBwdWJsaWMgaXRlbUNsYXNzTGlzdDogc3RyaW5nW107XHJcblxyXG4gIHByaXZhdGUgX3NldE1lZGlhQ29udHJvbGxlcnMgPSBuZXcgU2V0PFNvdW5kYm9hcmRDb21wb25lbnQ+KCk7XHJcbiAgcHJpdmF0ZSBfbWFwTWVkaWFDb250cm9sbGVyc0J5SWQgPSBuZXcgTWFwPHN0cmluZywgU291bmRib2FyZENvbXBvbmVudD4oKTtcclxuICBwcml2YXRlIF9tYXBJbnB1dEJ5Q29tcG9uZW50SWQ6IE1hcDxzdHJpbmcsIEhUTUxJbnB1dEVsZW1lbnQ+ID0gbmV3IE1hcDxzdHJpbmcsIEhUTUxJbnB1dEVsZW1lbnQ+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zOiBTb3VuZGJvYXJkT3B0aW9ucyApIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcclxuICAgIHRoaXMuY29udGFpbmVyc0NsYXNzTGlzdCA9IG9wdGlvbnMuY29udGFpbmVyc0NsYXNzTGlzdCA/PyBbXTtcclxuICAgIHRoaXMuaXRlbUNsYXNzTGlzdCA9IG9wdGlvbnMuaXRlbUNsYXNzTGlzdCA/PyBbXTtcclxuXHJcbiAgICB0aGlzLmFkZE1lZGlhTGlzdCggb3B0aW9ucy5hcnJNZWRpYVNyYyApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEluc3RhbnRNUDNEb3dubG9hZExpbmsoIHVybDogc3RyaW5nICkge1xyXG4gICAgaWYgKCAhU291bmRib2FyZC5pc015SW5zdGFudHNMaW5rKCB1cmwgKSApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCAnTm90IGEgTXlJbnN0YW50cyBsaW5rJyApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hdGNoZXMgPSB1cmwubWF0Y2goIC9cXC9pbnN0YW50XFwvKFteL10rKVxcLz8vICk7XHJcbiAgICBpZiAoICFtYXRjaGVzIHx8IG1hdGNoZXMubGVuZ3RoIDwgMiApIHtcclxuICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuICAgIGNvbnN0IHNvdW5kTmFtZSA9IG1hdGNoZXNbMV07XHJcblxyXG4gICAgY29uc3Qgc2FuaXRpemVkU291bmROYW1lID0gc291bmROYW1lLnJlcGxhY2UoIC8tXFxkKyQvLCAnJyApO1xyXG5cclxuICAgIGNvbnN0IGRvd25sb2FkTGluayA9IGBodHRwczovL3d3dy5teWluc3RhbnRzLmNvbS9tZWRpYS9zb3VuZHMvJHsgc2FuaXRpemVkU291bmROYW1lIH0ubXAzYDtcclxuICAgIHJldHVybiBkb3dubG9hZExpbms7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNNeUluc3RhbnRzTGluayggdXJsOiBzdHJpbmcgKSB7XHJcbiAgICByZXR1cm4gdXJsLmluY2x1ZGVzKCAnbXlpbnN0YW50cy5jb20nICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgYWRkTWVkaWFMaXN0KCBhcnJNZWRpYVNyYzogU291bmRib2FyZEl0ZW1Qb3NzaWJsZUlucHV0W10gKTogUHJvbWlzZTxTb3VuZGJvYXJkQ29tcG9uZW50W10+IHtcclxuICAgIGxldCBtZWRpYUNvbXBvbmVudHM6IFNvdW5kYm9hcmRDb21wb25lbnRbXSA9IFtdO1xyXG5cclxuICAgIGF3YWl0IFByb21pc2UuYWxsKCBhcnJNZWRpYVNyYy5tYXAoIGFzeW5jICggbWVkaWFTcmMgKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNyY09wdGlvbnMgPSB0aGlzLmdldFNvdXJjZUlucHV0RGVmYXVsdE9wdGlvbnMoIG1lZGlhU3JjICk7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGF3YWl0IHRoaXMuYWRkTWVkaWEoIHNyY09wdGlvbnMgKTtcclxuICAgICAgbWVkaWFDb21wb25lbnRzLnB1c2goIGNvbXBvbmVudCApO1xyXG4gICAgfSApICk7XHJcblxyXG4gICAgcmV0dXJuIG1lZGlhQ29tcG9uZW50cztcclxuICB9XHJcblxyXG4gIGdldEN1c3RvbU1lZGlhQ29tcG9uZW50TWVkaWFPcHRpb25zKCBtZWRpYU9wdGlvbnM6IFNvdW5kYm9hcmRJdGVtT3B0aW9ucyApOiBTb3VuZGJvYXJkSXRlbU9wdGlvbnMge1xyXG4gICAgY29uc3QgcmVzdWx0OiBTb3VuZGJvYXJkSXRlbU9wdGlvbnMgPSBzdHJ1Y3R1cmVkQ2xvbmUoIG1lZGlhT3B0aW9ucyApO1xyXG5cclxuICAgIGlmICggU291bmRib2FyZC5pc015SW5zdGFudHNMaW5rKCBtZWRpYU9wdGlvbnMuc3JjICkgKSB7XHJcbiAgICAgIHJlc3VsdC5zcmMgPSBTb3VuZGJvYXJkLmdldEluc3RhbnRNUDNEb3dubG9hZExpbmsoIG1lZGlhT3B0aW9ucy5zcmMgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBjb21wb25lbnRzKCk6IFNvdW5kYm9hcmRDb21wb25lbnRbXSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSggdGhpcy5fc2V0TWVkaWFDb250cm9sbGVycyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGFkZE1lZGlhKCBtZWRpYU9wdGlvbnM6IFNvdW5kYm9hcmRJdGVtT3B0aW9ucywgaW5kZXg/OiBudW1iZXIgKTogUHJvbWlzZTxTb3VuZGJvYXJkQ29tcG9uZW50PiB7XHJcbiAgICBsZXQgY29tcG9uZW50UmVzdWx0OiBTb3VuZGJvYXJkQ29tcG9uZW50O1xyXG5cclxuICAgIGlmICggaXNWYWxpZFlvdXR1YmVVcmxPcklkKCBtZWRpYU9wdGlvbnMuc3JjICkgKSB7XHJcbiAgICAgIGNvbXBvbmVudFJlc3VsdCA9IGF3YWl0IHRoaXMuYWRkSWZyYW1lKCB0aGlzLmNvbnRhaW5lci5pZCwgbWVkaWFPcHRpb25zLCBpbmRleCApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29tcG9uZW50UmVzdWx0ID0gYXdhaXQgdGhpcy5hZGRNZWRpYUNvbXBvbmVudCggdGhpcy5jb250YWluZXIuaWQsIHRoaXMuZ2V0Q3VzdG9tTWVkaWFDb21wb25lbnRNZWRpYU9wdGlvbnMoIG1lZGlhT3B0aW9ucyApLCBpbmRleCApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0Q29tcG9uZW50TmFtZUJ5SWQoIGNvbXBvbmVudFJlc3VsdC5tZWRpYS5pZCwgY29tcG9uZW50UmVzdWx0Lm1lZGlhLm5hbWUgKTtcclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50UmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRTb3VyY2VJbnB1dERlZmF1bHRPcHRpb25zKCBpbnB1dDogU291bmRib2FyZEl0ZW1Qb3NzaWJsZUlucHV0ICk6IFNvdW5kYm9hcmRJdGVtT3B0aW9ucyB7XHJcbiAgICBpZiAoIHR5cGVvZiAoIGlucHV0ICkgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNyYzogaW5wdXQsXHJcbiAgICAgICAgYXV0b1JlcGVhdE9uUGxheTogdHJ1ZSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5wdXQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkWW91dHViZUxpc3QoIGFyclZpZGVvT3B0aW9uczogU291bmRib2FyZEl0ZW1Qb3NzaWJsZUlucHV0W10gPSBbXSApIHtcclxuICAgIGNvbnN0IGFyck1lZGlhSW5wdXRzID0gYXJyVmlkZW9PcHRpb25zLm1hcCggc3JjID0+IHRoaXMuZ2V0U291cmNlSW5wdXREZWZhdWx0T3B0aW9ucyggc3JjICkgKTtcclxuICAgIGFyck1lZGlhSW5wdXRzLmZvckVhY2goIHZpZGVvSWQgPT4ge1xyXG4gICAgICB0aGlzLmFkZElmcmFtZSggYCR7IHRoaXMuY29udGFpbmVyLmlkIH1JZnJhbWVUYWJsZUl0ZW0keyB2aWRlb0lkLnNyYyB9YCwgdmlkZW9JZCApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFkZEF1ZGlvTGlzdCggYXJyTWVkaWFPcHRpb25zOiBTb3VuZGJvYXJkSXRlbVBvc3NpYmxlSW5wdXRbXSA9IFtdICkge1xyXG4gICAgY29uc3QgYXJyTWVkaWFJbnB1dHMgPSBhcnJNZWRpYU9wdGlvbnMubWFwKCBzcmMgPT4gdGhpcy5nZXRTb3VyY2VJbnB1dERlZmF1bHRPcHRpb25zKCBzcmMgKSApO1xyXG4gICAgYXJyTWVkaWFJbnB1dHMuZm9yRWFjaCggbWVkaWFJbnB1dCA9PiB0aGlzLmFkZE1lZGlhQ29tcG9uZW50KCB0aGlzLmNvbnRhaW5lci5pZCwgdGhpcy5nZXRDdXN0b21NZWRpYUNvbXBvbmVudE1lZGlhT3B0aW9ucyggbWVkaWFJbnB1dCApICkgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkQ29tcG9uZW50SW50ZXJhY3Rpb25CbG9ja0V2ZW50KCBjb21wb25lbnQ6IFNvdW5kYm9hcmRDb21wb25lbnQsIG1lZGlhT3B0aW9uczogU291bmRib2FyZEl0ZW1PcHRpb25zICkge1xyXG4gICAgY29tcG9uZW50Lm1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoICdvbmludGVyYWN0aW9uYmxvY2tlZCcsICgpID0+IHtcclxuICAgICAgY29tcG9uZW50Lm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgaWYgKCBtZWRpYU9wdGlvbnMuYXV0b1JlcGVhdE9uUGxheSApIHtcclxuICAgICAgICBjb21wb25lbnQubWVkaWEucGxheVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29tcG9uZW50Lm1lZGlhLnRvZ2dsZSgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0SW5wdXRCeVNvdXJjZSggc3JjOiBzdHJpbmcgKSB7XHJcbiAgICBpZiAoICF0aGlzLl9tYXBJbnB1dEJ5Q29tcG9uZW50SWQuaGFzKCBzcmMgKSApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkVsZW1lbnQgc3JjIG5vdCBvbiBzb3VuZCB0YWJsZS5cIiApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9tYXBJbnB1dEJ5Q29tcG9uZW50SWQuZ2V0KCBzcmMgKSE7XHJcbiAgfVxyXG5cclxuICBnZXQgY29tcG9uZW50c0NvbnRyb2xsZXJzKCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oIHRoaXMuX3NldE1lZGlhQ29udHJvbGxlcnMgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0RWxlbWVudE1lZGlhQ29udGFpbmVyKCBjb250YWluZXJJZDogc3RyaW5nLCBtZWRpYU5hbWU6IHN0cmluZyA9IFwiXCIgKSB7XHJcbiAgICBjb25zdCBlbGVtZW50TWVkaWFDb250YWluZXIgPSBnZXRFbGVtZW50RnJvbUhUTUwoIHRlbXBsYXRlU291bmRib2FyZEl0ZW1Db250YWluZXIoIGNvbnRhaW5lcklkLCBtZWRpYU5hbWUgKSApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgZWxlbWVudE1lZGlhQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoIC4uLnRoaXMuY29udGFpbmVyc0NsYXNzTGlzdCApO1xyXG4gICAgcmV0dXJuIGVsZW1lbnRNZWRpYUNvbnRhaW5lcjtcclxuICB9XHJcblxyXG5cclxuICBwdWJsaWMgc2V0Q29tcG9uZW50TmFtZUJ5SWQoIGNvbXBvbmVudElkOiBzdHJpbmcsIGNvbXBvbmVudE5hbWU6IHN0cmluZyApIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudE5hbWVFbGVtZW50ID0gdGhpcy5nZXRFbGVtZW50SXRlbU5hbWVDb250YWluZXJCeUlkKCBjb21wb25lbnRJZCApO1xyXG4gICAgY29tcG9uZW50TmFtZUVsZW1lbnQuaW5uZXJIVE1MID0gcmVwbGFjZVBlcmNlbnRFbmNvZGluZyggY29tcG9uZW50TmFtZSApO1xyXG4gICAgY29tcG9uZW50TmFtZUVsZW1lbnQuc2V0QXR0cmlidXRlKCAndGl0bGUnLCByZXBsYWNlUGVyY2VudEVuY29kaW5nKCBjb21wb25lbnROYW1lICkgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0RWxlbWVudEl0ZW1OYW1lQ29udGFpbmVyQnlJZCggaXRlbUlkOiBzdHJpbmcgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5fbWFwTWVkaWFDb250cm9sbGVyc0J5SWQuZ2V0KCBpdGVtSWQgKTtcclxuICAgIGlmICggIWNvbXBvbmVudCApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkNvbXBvbmVudCBkb2VzIG5vdCBleGlzdC5cIiApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVsZW1lbnRNZWRpYU5hbWUgPSBjb21wb25lbnQubWVkaWFDb250YWluZXIucXVlcnlTZWxlY3RvciggJy5zb3VuZC10YWJsZS1tZWRpYS1uYW1lJyApIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgaWYgKCAhZWxlbWVudE1lZGlhTmFtZSApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIk1lZGlhIG5hbWUgZm9yIHRoaXMgZWxlbWVudCB3YXMgcmVtb3ZlZC5cIiApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBlbGVtZW50TWVkaWFOYW1lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE5ld01lZGlhQ29tcG9uZW50SWQoIGNvbnRhaW5lcklkOiBzdHJpbmcsIG1lZGlhT3B0aW9uczogU291bmRib2FyZEl0ZW1PcHRpb25zICkge1xyXG4gICAgcmV0dXJuIHJlbW92ZVNwZWNpYWxDaGFyYWN0ZXJzKCBjb250YWluZXJJZCArICdBdWRpb0VsZW1lbnQnICsgcmVtb3ZlRmlsZVBhdGgoIG1lZGlhT3B0aW9ucy5zcmMgKSArIGNyeXB0by5yYW5kb21VVUlEKCkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXROZXdZb3V0dWJlSWZyYW1lSWQoIGNvbnRhaW5lcklkOiBzdHJpbmcsIG1lZGlhT3B0aW9uczogU291bmRib2FyZEl0ZW1PcHRpb25zICkge1xyXG4gICAgcmV0dXJuIHJlbW92ZVNwZWNpYWxDaGFyYWN0ZXJzKCBjb250YWluZXJJZCArICdZb3V0dWJlSWZyYW1lJyArIHJlbW92ZUZpbGVQYXRoKCBtZWRpYU9wdGlvbnMuc3JjICkgKyBjcnlwdG8ucmFuZG9tVVVJRCgpICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGFkZE1lZGlhQ29tcG9uZW50KCBjb250YWluZXJJZDogc3RyaW5nLCBtZWRpYU9wdGlvbnM6IFNvdW5kYm9hcmRJdGVtT3B0aW9ucywgaW5kZXg/OiBudW1iZXIgKTogUHJvbWlzZTxTb3VuZGJvYXJkQ29tcG9uZW50PiB7XHJcbiAgICBjb25zdCBhdWRpb0VsZW1lbnRJZCA9IHRoaXMuZ2V0TmV3TWVkaWFDb21wb25lbnRJZCggY29udGFpbmVySWQsIG1lZGlhT3B0aW9ucyApO1xyXG4gICAgaWYgKCB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5oYXMoIGF1ZGlvRWxlbWVudElkICkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJBIGNvbXBvbmVudCB3aXRoIHRoaXMgaWQgYWxyZWFkeSBleGlzdHM6IFwiICsgYXVkaW9FbGVtZW50SWQgKTtcclxuICAgIH1cclxuXHJcbiAgICBpbmRleCA9IGluZGV4ID8/IHRoaXMubGVuZ3RoO1xyXG4gICAgY29uc3QgYXVkaW9Db250YWluZXIgPSB0aGlzLmdldEVsZW1lbnRNZWRpYUNvbnRhaW5lciggY29udGFpbmVySWQgKTtcclxuICAgIGF1ZGlvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoICdsb2FkaW5nJywgJ25vdC1yZWFkeScgKTtcclxuICAgIGluc2VydEVsZW1lbnRBdEluZGV4KCB0aGlzLmNvbnRhaW5lciwgYXVkaW9Db250YWluZXIsIGluZGV4ICk7XHJcblxyXG4gICAgY29uc3QgbWVkaWFDb21wb25lbnQgPSBhd2FpdCBNZWRpYUNvbXBvbmVudC5jcmVhdGVNZWRpYUNvbXBvbmVudCgge1xyXG4gICAgICBzcmM6IG1lZGlhT3B0aW9ucy5zcmMsXHJcbiAgICAgIG1lZGlhRWxlbWVudElkOiBhdWRpb0VsZW1lbnRJZCxcclxuICAgICAgYmxvY2tJbnRlcmFjdGlvbjogdHJ1ZSxcclxuICAgICAgY29udGFpbmVyOiBhdWRpb0NvbnRhaW5lclxyXG4gICAgfSApO1xyXG5cclxuICAgIGF3YWl0IG1lZGlhQ29tcG9uZW50LmxvYWQoKTtcclxuXHJcbiAgICBtZWRpYUNvbXBvbmVudC5zdGFydHNBdCA9IG1lZGlhT3B0aW9ucy5zdGFydHNBdCA/PyAwO1xyXG5cclxuICAgIGNvbnN0IGlucHV0SW5mbyA9IHRoaXMuYWRkSW5wdXRFbGVtZW50VG9Db250YWluZXIoIGF1ZGlvQ29udGFpbmVyLCBtZWRpYUNvbXBvbmVudCwgbWVkaWFDb21wb25lbnQuaWQsIG1lZGlhT3B0aW9ucy5zcmMgKTtcclxuICAgIGNvbnN0IHNvdW5kYm9hcmRNZWRpYUNvbXBvbmVudDogU291bmRib2FyZENvbXBvbmVudCA9IHtcclxuICAgICAgbWVkaWE6IG1lZGlhQ29tcG9uZW50LFxyXG4gICAgICBpbnB1dDogaW5wdXRJbmZvLmlucHV0LFxyXG4gICAgICBpbnB1dENvbnRhaW5lcjogaW5wdXRJbmZvLmNvbnRhaW5lcixcclxuICAgICAgYnV0dG9uUmVtb3ZlSXRlbTogaW5wdXRJbmZvLmJ1dHRvbkVsZW1lbnQsXHJcbiAgICAgIG1lZGlhQ29udGFpbmVyOiBhdWRpb0NvbnRhaW5lcixcclxuICAgICAgaXRlbU9wdGlvbnM6IG1lZGlhT3B0aW9ucyxcclxuICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICB9O1xyXG5cclxuICAgIG1lZGlhQ29tcG9uZW50LmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCAnc291bmQtdGFibGUtaXRlbScsIC4uLiB0aGlzLml0ZW1DbGFzc0xpc3QgKTtcclxuXHJcbiAgICB0aGlzLl9zZXRNZWRpYUNvbnRyb2xsZXJzLmFkZCggc291bmRib2FyZE1lZGlhQ29tcG9uZW50ICk7XHJcbiAgICB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5zZXQoIG1lZGlhQ29tcG9uZW50LmlkLCBzb3VuZGJvYXJkTWVkaWFDb21wb25lbnQgKTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50SW50ZXJhY3Rpb25CbG9ja0V2ZW50KCBzb3VuZGJvYXJkTWVkaWFDb21wb25lbnQsIG1lZGlhT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuc2V0Q29tcG9uZW50TmFtZUJ5SWQoIG1lZGlhQ29tcG9uZW50LmlkLCBtZWRpYUNvbXBvbmVudC5uYW1lICk7XHJcblxyXG4gICAgYXVkaW9Db250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSggJ2xvYWRpbmcnLCAnbm90LXJlYWR5JyApO1xyXG5cclxuICAgIHJldHVybiBzb3VuZGJvYXJkTWVkaWFDb21wb25lbnQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGFkZElmcmFtZSggY29udGFpbmVySWQ6IHN0cmluZywgbWVkaWFPcHRpb25zOiBTb3VuZGJvYXJkSXRlbU9wdGlvbnMsIGluZGV4PzogbnVtYmVyICk6IFByb21pc2U8U291bmRib2FyZENvbXBvbmVudD4ge1xyXG4gICAgY29uc3QgaWZyYW1lSWQgPSB0aGlzLmdldE5ld1lvdXR1YmVJZnJhbWVJZCggY29udGFpbmVySWQsIG1lZGlhT3B0aW9ucyApO1xyXG4gICAgaWYgKCB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5oYXMoIGlmcmFtZUlkICkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJBIGNvbXBvbmVudCB3aXRoIHRoaXMgaWQgYWxyZWFkeSBleGlzdHM6IFwiICsgaWZyYW1lSWQgKTtcclxuICAgIH1cclxuXHJcbiAgICBpbmRleCA9IGluZGV4ID8/IHRoaXMubGVuZ3RoO1xyXG4gICAgY29uc3QgZWxlbWVudElmcmFtZUNvbnRhaW5lciA9IHRoaXMuZ2V0RWxlbWVudE1lZGlhQ29udGFpbmVyKCBjb250YWluZXJJZCApO1xyXG4gICAgZWxlbWVudElmcmFtZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCAnbG9hZGluZycsICdub3QtcmVhZHknICk7XHJcbiAgICBpbnNlcnRFbGVtZW50QXRJbmRleCggdGhpcy5jb250YWluZXIsIGVsZW1lbnRJZnJhbWVDb250YWluZXIsIGluZGV4ICk7XHJcblxyXG4gICAgY29uc3QgbmV3SWZyYW1lID0gbmV3IFlvdXR1YmVJZnJhbWUoIHtcclxuICAgICAgaWZyYW1lSWQ6IGlmcmFtZUlkLFxyXG4gICAgICB2aWRlb0lkOiBtZWRpYU9wdGlvbnMuc3JjLFxyXG4gICAgICBwYXJlbnRFbGVtZW50OiBlbGVtZW50SWZyYW1lQ29udGFpbmVyLFxyXG4gICAgICBzdGFydHNBdDogbWVkaWFPcHRpb25zLnN0YXJ0c0F0ID8/IDAsXHJcbiAgICAgIGNsYXNzTGlzdDogWydzb3VuZC10YWJsZS1pdGVtJywgJ292ZXJmbG93LWhpZGRlbicsIC4uLiB0aGlzLml0ZW1DbGFzc0xpc3RdLFxyXG4gICAgICBibG9ja0ludGVyYWN0aW9uOiB0cnVlLFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGlucHV0SW5mbyA9IHRoaXMuYWRkSW5wdXRFbGVtZW50VG9Db250YWluZXIoIGVsZW1lbnRJZnJhbWVDb250YWluZXIsIG5ld0lmcmFtZSwgbmV3SWZyYW1lLmlkLCBtZWRpYU9wdGlvbnMuc3JjICk7XHJcbiAgICBjb25zdCBzb3VuZGJvYXJkWW91dHViZUNvbXBvbmVudDogU291bmRib2FyZENvbXBvbmVudCA9IHtcclxuICAgICAgbWVkaWE6IG5ld0lmcmFtZSxcclxuICAgICAgaW5wdXQ6IGlucHV0SW5mby5pbnB1dCxcclxuICAgICAgaW5wdXRDb250YWluZXI6IGlucHV0SW5mby5jb250YWluZXIsXHJcbiAgICAgIGJ1dHRvblJlbW92ZUl0ZW06IGlucHV0SW5mby5idXR0b25FbGVtZW50LFxyXG4gICAgICBtZWRpYUNvbnRhaW5lcjogZWxlbWVudElmcmFtZUNvbnRhaW5lcixcclxuICAgICAgaXRlbU9wdGlvbnM6IG1lZGlhT3B0aW9ucyxcclxuICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX3NldE1lZGlhQ29udHJvbGxlcnMuYWRkKCBzb3VuZGJvYXJkWW91dHViZUNvbXBvbmVudCApO1xyXG4gICAgdGhpcy5fbWFwTWVkaWFDb250cm9sbGVyc0J5SWQuc2V0KCBuZXdJZnJhbWUuaWQsIHNvdW5kYm9hcmRZb3V0dWJlQ29tcG9uZW50ICk7XHJcblxyXG4gICAgYXdhaXQgWW91dHViZUlmcmFtZS5idWlsZFNpbmdsZUlmcmFtZSggbmV3SWZyYW1lICk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnRJbnRlcmFjdGlvbkJsb2NrRXZlbnQoIHNvdW5kYm9hcmRZb3V0dWJlQ29tcG9uZW50LCBtZWRpYU9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnNldENvbXBvbmVudE5hbWVCeUlkKCBpZnJhbWVJZCwgbmV3SWZyYW1lLnZpZGVvTmFtZSApO1xyXG5cclxuICAgIGVsZW1lbnRJZnJhbWVDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSggJ2xvYWRpbmcnLCAnbm90LXJlYWR5JyApO1xyXG5cclxuICAgIHJldHVybiBzb3VuZGJvYXJkWW91dHViZUNvbXBvbmVudDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBjaGFuZ2VDb21wb25lbnRTb3VyY2VUb0lucHV0VmFsdWUoIGNvbXBvbmVudElkOiBzdHJpbmcgKTogUHJvbWlzZTxTb3VuZGJvYXJkQ29tcG9uZW50PiB7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5nZXQoIGNvbXBvbmVudElkICkhO1xyXG4gICAgaWYgKCAhY29tcG9uZW50ICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiQ29tcG9uZW50IGlkIGRvZXMgbm90IGV4aXN0XCIgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jaGFuZ2VDb21wb25lbnRTb3VyY2UoIGNvbXBvbmVudElkLCBjb21wb25lbnQuaW5wdXQudmFsdWUgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBjaGFuZ2VDb21wb25lbnRTb3VyY2UoIGNvbXBvbmVudElkOiBzdHJpbmcsIG5ld1NvdXJjZTogc3RyaW5nICk6IFByb21pc2U8U291bmRib2FyZENvbXBvbmVudD4ge1xyXG4gICAgbGV0IGNvbXBvbmVudCA9IHRoaXMuX21hcE1lZGlhQ29udHJvbGxlcnNCeUlkLmdldCggY29tcG9uZW50SWQgKSE7XHJcbiAgICBpZiAoICFjb21wb25lbnQgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJDb21wb25lbnQgaWQgZG9lcyBub3QgZXhpc3RcIiApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLyBJZiBpdCdzIGZyb20geW91dHViZSBwcmVzZXJ2ZSB0aGUgcGxheWVyIGFuZCBjaGFuZ2UgdGhlIHNvdXJjZVxyXG4gICAgaWYgKCBpc1ZhbGlkWW91dHViZVVybE9ySWQoIG5ld1NvdXJjZSApICkge1xyXG4gICAgICBpZiAoIGNvbXBvbmVudC5tZWRpYSBpbnN0YW5jZW9mIFlvdXR1YmVJZnJhbWUgKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jaGFuZ2VZb3V0dWJlSWZyYW1lU291cmNlKCBjb21wb25lbnRJZCwgbmV3U291cmNlICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnRCeUlkKCBjb21wb25lbnRJZCApO1xyXG4gICAgICAgIGNvbXBvbmVudCA9IGF3YWl0IHRoaXMuYWRkTWVkaWEoIHtcclxuICAgICAgICAgIHNyYzogbmV3U291cmNlLFxyXG4gICAgICAgICAgYXV0b1JlcGVhdE9uUGxheTogY29tcG9uZW50Lml0ZW1PcHRpb25zLmF1dG9SZXBlYXRPblBsYXlcclxuICAgICAgICB9LCBjb21wb25lbnQuaW5kZXggKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnRCeUlkKCBjb21wb25lbnRJZCApO1xyXG4gICAgICBjb21wb25lbnQgPSBhd2FpdCB0aGlzLmFkZE1lZGlhKCB7XHJcbiAgICAgICAgc3JjOiBuZXdTb3VyY2UsXHJcbiAgICAgICAgYXV0b1JlcGVhdE9uUGxheTogY29tcG9uZW50Lml0ZW1PcHRpb25zLmF1dG9SZXBlYXRPblBsYXlcclxuICAgICAgfSwgY29tcG9uZW50LmluZGV4ICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fbWFwTWVkaWFDb250cm9sbGVyc0J5SWQuZGVsZXRlKCBjb21wb25lbnRJZCApO1xyXG4gICAgdGhpcy5fbWFwSW5wdXRCeUNvbXBvbmVudElkLmRlbGV0ZSggY29tcG9uZW50SWQgKTtcclxuXHJcbiAgICB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5zZXQoIGNvbXBvbmVudC5tZWRpYS5pZCwgY29tcG9uZW50ICk7XHJcbiAgICB0aGlzLl9tYXBJbnB1dEJ5Q29tcG9uZW50SWQuc2V0KCBjb21wb25lbnQubWVkaWEuaWQsIGNvbXBvbmVudC5pbnB1dCApO1xyXG5cclxuICAgIHRoaXMuc2V0Q29tcG9uZW50TmFtZUJ5SWQoIGNvbXBvbmVudC5tZWRpYS5pZCwgY29tcG9uZW50Lm1lZGlhLm5hbWUgKTtcclxuXHJcbiAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjaGFuZ2VNZWRpYUNvbXBvbmVudFNvdXJjZSggY29tcG9uZW50SWQ6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZyApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuX21hcE1lZGlhQ29udHJvbGxlcnNCeUlkLmdldCggY29tcG9uZW50SWQgKSE7XHJcbiAgICBpZiAoICFjb21wb25lbnQgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJDb21wb25lbnQgaWQgZG9lcyBub3QgZXhpc3RcIiApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggISggY29tcG9uZW50Lm1lZGlhIGluc3RhbmNlb2YgTWVkaWFDb21wb25lbnQgKSApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkludmFsaWQgb3BlcmF0aW9uXCIgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnQuaXRlbU9wdGlvbnMuc3JjID0gbmV3VmFsdWU7XHJcbiAgICBjb25zdCBuZXdBdWRpb09wdGlvbnM6IFNvdW5kYm9hcmRJdGVtT3B0aW9ucyA9IHRoaXMuZ2V0Q3VzdG9tTWVkaWFDb21wb25lbnRNZWRpYU9wdGlvbnMoIGNvbXBvbmVudC5pdGVtT3B0aW9ucyApO1xyXG4gICAgY29uc3QgbmV3SWQgPSB0aGlzLmdldE5ld01lZGlhQ29tcG9uZW50SWQoIGNvbXBvbmVudC5tZWRpYUNvbnRhaW5lci5pZCwgbmV3QXVkaW9PcHRpb25zICk7XHJcblxyXG4gICAgaWYgKCB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5oYXMoIG5ld0lkICkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJBIGNvbXBvbmVudCB3aXRoIHRoaXMgaWQgYWxyZWFkeSBleGlzdHM6IFwiICsgbmV3SWQgKTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBjb21wb25lbnQubWVkaWEuY2hhbmdlU291cmNlKCBuZXdBdWRpb09wdGlvbnMuc3JjLCBuZXdJZCApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjaGFuZ2VZb3V0dWJlSWZyYW1lU291cmNlKCBjb21wb25lbnRJZDogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nICkge1xyXG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5fbWFwTWVkaWFDb250cm9sbGVyc0J5SWQuZ2V0KCBjb21wb25lbnRJZCApITtcclxuICAgIGlmICggIWNvbXBvbmVudCApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkNvbXBvbmVudCBpZCBkb2VzIG5vdCBleGlzdFwiICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhKCBjb21wb25lbnQubWVkaWEgaW5zdGFuY2VvZiBZb3V0dWJlSWZyYW1lICkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJJbnZhbGlkIG9wZXJhdGlvblwiICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhaXNWYWxpZFlvdXR1YmVVcmxPcklkKCBuZXdWYWx1ZSApICkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiSW52YWxpZCB5b3V0dWJlIFVSTFwiICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29tcG9uZW50Lml0ZW1PcHRpb25zLnNyYyA9IG5ld1ZhbHVlO1xyXG4gICAgY29uc3QgbmV3SWQgPSB0aGlzLmdldE5ld1lvdXR1YmVJZnJhbWVJZCggY29tcG9uZW50Lm1lZGlhQ29udGFpbmVyLmlkLCBjb21wb25lbnQuaXRlbU9wdGlvbnMgKTtcclxuXHJcbiAgICBpZiAoIHRoaXMuX21hcE1lZGlhQ29udHJvbGxlcnNCeUlkLmhhcyggbmV3SWQgKSApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkEgY29tcG9uZW50IHdpdGggdGhpcyBpZCBhbHJlYWR5IGV4aXN0czogXCIgKyBuZXdJZCApO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IGNvbXBvbmVudC5tZWRpYS5jaGFuZ2VWaWRlbygge1xyXG4gICAgICBpZnJhbWVJZDogbmV3SWQsXHJcbiAgICAgIHZpZGVvSWQ6IG5ld1ZhbHVlLFxyXG4gICAgICBzdGFydHNBdDogMFxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRJbnB1dEVsZW1lbnRUb0NvbnRhaW5lciggY29udGFpbmVyOiBIVE1MRWxlbWVudCwgY29tcG9uZW50TWVkaWE6IE1lZGlhUGxheWVyLCBjb21wb25lbnRJZDogc3RyaW5nLCBpbnB1dFNvdXJjZTogc3RyaW5nICkge1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50Q29udGFpbmVyID0gZ2V0RWxlbWVudEZyb21IVE1MKCB0ZW1wbGF0ZVNvdW5kYm9hcmRJbnB1dCggY29tcG9uZW50SWQsICdTb3VyY2UnLCBpbnB1dFNvdXJjZSApICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoICdiZWZvcmVlbmQnLCBpbnB1dEVsZW1lbnRDb250YWluZXIgKTtcclxuXHJcbiAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBpbnB1dEVsZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvciggJy5zb3VuZC10YWJsZS1pbnB1dCcgKSEgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBpbnB1dEVsZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvciggJy5zb3VuZC10YWJsZS1yZW1vdmUtaXRlbS1idXR0b24nICkhIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGFyckNvbXBvbmVudHNFeGNlcHRUaGlzID0gdGhpcy5jb21wb25lbnRzLmZpbHRlciggYyA9PiBjLm1lZGlhLmlkICE9PSBjb21wb25lbnRNZWRpYS5pZCApO1xyXG5cclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnaW5wdXQnLCBpbnB1dEVsZW1lbnQudmFsdWUsIGNvbXBvbmVudE1lZGlhLCBhcnJDb21wb25lbnRzRXhjZXB0VGhpcyApO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmlucHV0JywgaW5wdXRFbGVtZW50LnZhbHVlLCBjb21wb25lbnRNZWRpYSwgYXJyQ29tcG9uZW50c0V4Y2VwdFRoaXMgKTtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnaW5wdXRjaGFuZ2UnLCBpbnB1dEVsZW1lbnQudmFsdWUsIGNvbXBvbmVudE1lZGlhLCBhcnJDb21wb25lbnRzRXhjZXB0VGhpcyApO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmlucHV0Y2hhbmdlJywgaW5wdXRFbGVtZW50LnZhbHVlLCBjb21wb25lbnRNZWRpYSwgYXJyQ29tcG9uZW50c0V4Y2VwdFRoaXMgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBidXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHtcclxuICAgICAgY29uc3QgYXJyQ29tcG9uZW50c0V4Y2VwdFRoaXMgPSB0aGlzLmNvbXBvbmVudHMuZmlsdGVyKCBjID0+IGMubWVkaWEuaWQgIT09IGNvbXBvbmVudE1lZGlhLmlkICk7XHJcbiAgICAgIHRoaXMucmVtb3ZlSXRlbSggY29tcG9uZW50TWVkaWEgKTtcclxuXHJcbiAgICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ3JlbW92ZWVsZW1lbnQnLCBpbnB1dEVsZW1lbnQudmFsdWUsIGNvbXBvbmVudE1lZGlhLCBhcnJDb21wb25lbnRzRXhjZXB0VGhpcyApO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbnJlbW92ZWVsZW1lbnQnLCBpbnB1dEVsZW1lbnQudmFsdWUsIGNvbXBvbmVudE1lZGlhLCBhcnJDb21wb25lbnRzRXhjZXB0VGhpcyApO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdyZW1vdmVpdGVtJywgaW5wdXRFbGVtZW50LnZhbHVlLCBjb21wb25lbnRNZWRpYSwgYXJyQ29tcG9uZW50c0V4Y2VwdFRoaXMgKTtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25yZW1vdmVpdGVtJywgaW5wdXRFbGVtZW50LnZhbHVlLCBjb21wb25lbnRNZWRpYSwgYXJyQ29tcG9uZW50c0V4Y2VwdFRoaXMgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbnB1dDogaW5wdXRFbGVtZW50LFxyXG4gICAgICBjb250YWluZXI6IGlucHV0RWxlbWVudENvbnRhaW5lcixcclxuICAgICAgYnV0dG9uRWxlbWVudDogYnV0dG9uRWxlbWVudFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNvbXBvbmVudCggY29tcG9uZW50OiBTb3VuZGJvYXJkQ29tcG9uZW50ICkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQ29tcG9uZW50QnlJZCggY29tcG9uZW50Lm1lZGlhLmlkICk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVJdGVtKCBjb21wb25lbnQ6IE1lZGlhUGxheWVyICkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQ29tcG9uZW50QnlJZCggY29tcG9uZW50LmlkICk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDb21wb25lbnRCeUlkKCBpdGVtSWQ6IHN0cmluZyApIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuX21hcE1lZGlhQ29udHJvbGxlcnNCeUlkLmdldCggaXRlbUlkICk7XHJcbiAgICBpZiAoICFjb21wb25lbnQgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnQubWVkaWEuZGVzdHJveSgpO1xyXG4gICAgY29tcG9uZW50Lm1lZGlhQ29udGFpbmVyLnJlbW92ZSgpO1xyXG5cclxuICAgIHRoaXMuX21hcE1lZGlhQ29udHJvbGxlcnNCeUlkLmRlbGV0ZSggaXRlbUlkICk7XHJcbiAgICB0aGlzLl9tYXBJbnB1dEJ5Q29tcG9uZW50SWQuZGVsZXRlKCBpdGVtSWQgKTtcclxuICAgIHRoaXMuX3NldE1lZGlhQ29udHJvbGxlcnMuZGVsZXRlKCBjb21wb25lbnQgKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNvbXBvbmVudENvbnRhaW5lciIsIl9lbGVtZW50IiwidGVtcGxhdGVFbGVtZW50IiwiY29tcG9uZW50TmFtZSIsInN1YkNvbXBvbmVudENvdW50QnlOYW1lIiwiTWFwIiwic3ViQ29tcG9uZW50cyIsImNvbnN0cnVjdG9yIiwidGVtcGxhdGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiRXJyb3IiLCJ0aGlzIiwiY3JlYXRlRWxlbWVudCIsImNvbnRlbnQiLCJhcHBlbmRDaGlsZCIsImJvZHkiLCJnZXRUZW1wbGF0ZUNsb25lTm9kZXMiLCJjbG9uZU5vZGUiLCJjaGlsZHJlbiIsImJ1aWxkU2luZ2xlU3ViQ29tcG9uZW50IiwiY29tcG9uZW50IiwicGFyZW50IiwiaGFzIiwic2V0IiwiY29tcG9uZW50Q291bnQiLCJnZXQiLCJidWlsZCIsImNhcGl0YWxpemVGaXJzdExldHRlciIsImJ1aWxkT25Cb2R5IiwiZWxlbWVudElkIiwiaWQiLCJpdGVtIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiYnVpbGRTdWJDb21wb25lbnRzIiwiY29udGFpbmVyIiwiTWVkaWFDb21wb25lbnQiLCJzcmMiLCJtZWRpYUVsZW1lbnQiLCJfY29udGFpbmVyIiwiX2lzUmVhZHkiLCJfc3RhcnRzQXQiLCJfYmxvY2tJbnRlcmFjdGlvbiIsIl9kaXZCbG9ja0ludGVyYWN0aW9uIiwib3B0aW9ucyIsInN1cGVyIiwiYmxvY2tJbnRlcmFjdGlvbiIsIm1lZGlhRWxlbWVudElkIiwic3RhcnRzQXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcCIsImdldEludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24iLCJzZXR1cEludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24iLCJzZXRFbGVtZW50c0F0dHJpYnV0ZXMiLCJzZXRBdHRyaWJ1dGUiLCJkaW1lbnNpb25zIiwid2lkdGgiLCJoZWlnaHQiLCJsb2FkIiwiY2FsbEV2ZW50c0J5TmFtZSIsImRlc3Ryb3kiLCJyZW1vdmUiLCJpc1JlYWR5IiwiaXNQbGF5aW5nIiwicGF1c2VkIiwidmFsIiwiX3ZpZGVvSW5mb0F0dHJpYnV0ZUxpc3QiLCJuYW1lIiwicmVwbGFjZVBlcmNlbnRFbmNvZGluZyIsInJlbW92ZUZpbGVQYXRoIiwic2V0QXR0cmlidXRlTGlzdEZvckVsZW1lbnQiLCJkaXZCbG9ja0ludGVyYWN0aW9uIiwiZmlsZU5hbWUiLCJxdWVyeVNlbGVjdG9yIiwidCIsInBsYXllckN1cnJlbnRUaW1lIiwiY3VycmVudFRpbWUiLCJwbGF5ZXJEdXJhdGlvbiIsImR1cmF0aW9uIiwidGltZUNvbnNpZGVyaW5nU3RhcnQiLCJjbGFtcCIsInNlZWsiLCJzb3VyY2VFbGVtZW50cyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjaGFuZ2VTb3VyY2UiLCJuZXdJZCIsImlubmVySFRNTCIsImF1ZGlvU291cmNlRWxlbWVudEhUTUwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlYWR5U3RhdGUiLCJIVE1MTWVkaWFFbGVtZW50IiwiSEFWRV9NRVRBREFUQSIsImVycm9yIiwicGxheVdpdGhvdXRUcmlnZ2VyRXZlbnRzIiwicGxheVByb21pc2UiLCJwbGF5IiwidW5kZWZpbmVkIiwidGhlbiIsIl8iLCJjYXRjaCIsInNldENsYXNzZXNQbGF5aW5nIiwicGF1c2VXaXRob3V0VHJpZ2dlckV2ZW50cyIsInBhdXNlIiwic2V0Q2xhc3Nlc1BhdXNlZCIsInRvZ2dsZSIsIm11dGUiLCJ2b2x1bWUiLCJ1bm11dGUiLCJzZWVrVGltZSIsIl9yZWxvYWRCdWZmZXIiLCJnZXRFbGVtZW50RGltZW5zaW9ucyIsIm1lZGlhQ29tcG9uZW50IiwiZWxlbWVudEludmlzaWJsZURpdiIsImNyZWF0ZUludmlzaWJsZURpdkFib3ZlUGFyZW50IiwicGFyZW50RWxlbWVudCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInN0eWxlIiwiZGlzcGxheSIsInpJbmRleCIsImNyZWF0ZU1lZGlhQ29tcG9uZW50T25Cb2R5IiwibWVkaWFUeXBlIiwiZ2V0TWVkaWFUeXBlQnlTb3VyY2UiLCJtZWRpYURlZmF1bHRzIiwiZ2V0TWVkaWFEZWZhdWx0c0J5TWVkaWFUeXBlIiwibWVkaWFDb21wb25lbnRDb250YWluZXIiLCJNZWRpYUNvbXBvbmVudEZhY3RvcnkiLCJjcmVhdGVNZWRpYUNvbXBvbmVudEJ5VHlwZSIsImNyZWF0ZU1lZGlhQ29tcG9uZW50IiwicGxheWVyQ29uZmlnIiwiY3JlYXRlTWVkaWFQbGF5ZXIiLCJ0ZW1wbGF0ZVNvdW5kYm9hcmRJdGVtQ29udGFpbmVyIiwiaXRlbUlkIiwibWVkaWFOYW1lIiwidHJpbSIsInRlbXBsYXRlU291bmRib2FyZElucHV0IiwibGFiZWxUZXh0IiwidmFsdWUiLCJwbGFjZWhvbGRlciIsIk1lZGlhUGxheWVyIiwiT2JqZWN0RXZlbnRMaXN0ZW5lciIsInRlbXBsYXRlQmFja2dyb3VuZFlvdXR1YmVJZnJhbWVFbGVtZW50IiwiaWZyYW1lSWQiLCJZb3V0dWJlSWZyYW1lIiwic3RhdGljIiwicGxheWVyIiwiX2lzUGxheWVyUmVhZHkiLCJfdmlkZW9JZCIsInZpZGVvTmFtZSIsInZpZGVvVGh1bWIiLCJjaGFubmVsVVJMIiwiY2hhbm5lbE5hbWUiLCJfaWZyYW1lRWxlbWVudCIsIl9pZnJhbWVDb250YWluZXIiLCJfaWZyYW1lUGFyZW50RWxlbWVudCIsIl9pc1BsYXlpbmciLCJfZGltZW5zaW9ucyIsInRvcERpdiIsIl9zdGFydE11dGVkIiwiX3BsYXlpbmdPYnNlcnZlckludGVydmFsIiwiX2V2ZW50TGlzdGVuZXIiLCJjYWNoZWRWaWRlb0luZm8iLCJfZGljdFlvdXR1YmVJZnJhbWVCeUlkIiwidmlkZW9JZCIsInN0YXJ0TXV0ZWQiLCJnZXRZb3V0dWJlSWZyYW1lRWxlbWVudCIsInNldHVwUGFyZW50RnJvbVlvdXR1YmVJZnJhbWUiLCJpZnJhbWVDb250YWluZXIiLCJzZXRDbGFzc2VzSWZyYW1lUGF1c2VkIiwic2V0VmlkZW9JbmZvIiwic2V0RXh0ZXJuYWxIVE1MRWxlbWVudHNBdHRyaWJ1dGVzIiwiZXh0cmFjdFlvdVR1YmVJZCIsImRlbGV0ZSIsImdldFZpZGVvSW5mbyIsInRpdGxlIiwiYXV0aG9yX25hbWUiLCJ0aHVtYm5haWxfdXJsIiwiYXV0aG9yX3VybCIsImNoYW5nZVZpZGVvIiwiaXNWYWxpZFlvdXR1YmVVcmxPcklkIiwibG9hZFZpZGVvQnlJZCIsImRlbGF5IiwicHJlcGFyZU9wdGlvbnMiLCJsb2FkVmlkZW8iLCJzZWVrVG8iLCJsb2FkVmlkZW9JbmZvIiwicmVzcG9uc2UiLCJoYW5kbGVQcm9taXNlIiwiZmV0Y2giLCJ2aWRlb1VSTCIsImNvbnNvbGUiLCJkYXRhIiwianNvbiIsIm9uUGxheWVyUmVhZHkiLCJldmVudCIsIl9hcnJZb3V0dWJlSWZyYW1lSWRSZWFkeSIsInB1c2giLCJzZXRQbGF5YmFja1F1YWxpdHkiLCJwYXVzZVZpZGVvIiwiY2hlY2tJZkV2ZXJ5SWZyYW1lSXNSZWFkeSIsIm9uUGxheWVyU3RhdGVDaGFuZ2UiLCJfeW91dHViZUFQSVJlZmVyZW5jZSIsIlBsYXllclN0YXRlIiwiUExBWUlORyIsInNldEludGVydmFsIiwic2V0Q2xhc3Nlc0lmcmFtZVBsYXlpbmciLCJjbGVhckludGVydmFsIiwib25FdmVyeVlvdXR1YmVJZnJhbWVSZWFkeSIsImlmcmFtZUVsZW1lbnQiLCJpc1BsYXllclJlYWR5IiwiZ2V0RHVyYXRpb24iLCJnZXRDdXJyZW50VGltZSIsInByb2dyZXNzUGVyY2VudCIsInBsYXllclByb2dyZXNzUGVyY2VudCIsInBsYXlWaWRlbyIsInJlbG9hZEJ1ZmZlciIsImNvbnNpZGVyU3RhcnRzQXQiLCJrZXlzIiwic29tZSIsInIiLCJpbmNsdWRlcyIsImFyck9iamVjdFRvU2V0T25FdmVyeUlmcmFtZVJlYWR5IiwiZm9yRWFjaCIsIm8iLCJzZXR1cCIsImtleSIsImNvbnRhaW5lckRpdiIsImluc2VydEFkamFjZW50SFRNTCIsImlmcmFtZVBhcmVudEVsZW1lbnQiLCJzZXRFeHRlcm5hbEhUTUxFbGVtZW50cyIsImNyZWF0ZUludmlzaWJsZURpdlRvcCIsImNyZWF0ZUludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24iLCJzZXRJZnJhbWVDb250YWluZXJBdHRyaWJ1dGVzIiwic2V0VG9wRGl2QXR0cmlidXRlcyIsInNldERpdkJsb2NrSW50ZXJhY3Rpb25BdHRyaWJ1dGVzIiwiZ2V0SW52aXNpYmxlVG9wRGl2IiwiZXZ0IiwiaW5pdFBsYXllciIsIlBsYXllciIsInBsYXllclZhcnMiLCJldmVudHMiLCJiaW5kIiwiYnVpbGRTaW5nbGVJZnJhbWUiLCJ5b3V0dWJlSWZyYW1lIiwidGFnIiwiZmlyc3RTY3JpcHRUYWciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJ3YWl0VW50aWxFbGVtZW50RXhpc3RzIiwicG9sbEZvclZhcmlhYmxlQXN5bmMiLCJwcm90b3R5cGUiLCJsb2FkZWQiLCJidWlsZElmcmFtZXMiLCJwb2xsRm9yVmFyaWFibGUiLCJzZXRZb3V0dWJlSWZyYW1lRWxlbWVudHMiLCJ5dElmcmFtZSIsIlN0cmluZyIsImlzTnVsbE9yRW1wdHkiLCJ0cnVuY2F0ZSIsIm1heCIsImRlY29yYXRvciIsImxlbmd0aCIsInN1YnN0cmluZyIsInRvU3RyaW5nIiwicmVtb3ZlQWNjZW50cyIsIm5vcm1hbGl6ZSIsInJlcGxhY2UiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInplcm9CZWZvcmUiLCJwYWRTdGFydCIsImV2ZW50c0J5TmFtZSIsImV2ZW50TmFtZSIsIm5ld0V2ZW50IiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsInRvTG93ZXJDYXNlIiwiZ2V0RXZlbnRzQnlOYW1lIiwicmVtb3ZlRXZlbnRCeUlkIiwiZXZlbnRJZCIsImZpbHRlciIsImUiLCJldmVudEFyZ3MiLCJkaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2UiLCJkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdCIsImRpY3RLZXlzQnlBY3Rpb25LZXl1cCIsImFzeW5jIiwicHJvbWlzZSIsImlucHV0IiwidGVzdCIsIm1hdGNoIiwiZWxlbWVudCIsImF0dHJMaXN0IiwiZ2V0RWxlbWVudEZyb21IVE1MIiwiaHRtbCIsInJlc3VsdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ2YXJpYWJsZU5hbWUiLCJyZWFkeUNvbmRpdGlvbiIsImNhbGxiYWNrIiwicG9sbCIsIndpbmRvdyIsInNlbGVjdG9yIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwiZGlzY29ubmVjdCIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwibXMiLCJzZXRUaW1lb3V0IiwiaW5zZXJ0RWxlbWVudEF0SW5kZXgiLCJuZXdFbGVtZW50IiwiaW5kZXgiLCJjaGlsZE5vZGVzIiwicmVmTm9kZSIsImludmlzaWJsZURpdiIsIm9wYWNpdHkiLCJwb2ludGVyRXZlbnRzIiwiaGlkZUVsZW1lbnQiLCJyZXBlYXQiLCJwYWlyIiwiY29kZSIsImtiRXZlbnQiLCJydW5Pbmx5T25jZUtleWRvd25BY3Rpb25zIiwicnVuS2V5ZG93bkFjdGlvbnNSZXBlYXQiLCJmaWxlUGF0aCIsImV4ZWMiLCJnZXRGaWxlRXh0ZW5zaW9uIiwiZGVmYXVsdEZpbGVTcmMiLCJzcGxpdCIsInBvcCIsImZpbGVUeXBlU3RyIiwibnVtIiwibWluIiwiTWF0aCIsImF1ZGlvRXh0ZW5zaW9ucyIsInZpZGVvRXh0ZW5zaW9ucyIsImRlZmF1bHRBdWRpb1BsYXllckNvbmZpZyIsInR5cGUiLCJhdXRvcGxheSIsIm11dGVkIiwibG9vcCIsInByZWxvYWQiLCJkZWZhdWx0VmlkZW9QbGF5ZXJDb25maWciLCJzb3VyY2UiLCJleHRlbnNpb24iLCJub3JtYWxpemVkRXh0ZW5zaW9uIiwiZ2V0TWVkaWFUeXBlQnlFeHRlbnNpb24iLCJhcnJTb3VyY2VzIiwiaXNNZWRpYVR5cGVWaWRlbyIsIm1lZGlhRWxlbWVudEhUTUwiLCJwYXJhbXNUb1BsYXllckNvbmZpZyIsIm1hcCIsInZpZGVvU291cmNlRWxlbWVudEhUTUwiLCJyZWR1Y2UiLCJhY2MiLCJuZXh0IiwidmlkZW9FbGVtZW50SFRNTCIsImF1ZGlvRWxlbWVudEhUTUwiLCJ0cmltRW5kIiwic3RyIiwicmVtb3ZlU3BlY2lhbENoYXJhY3RlcnMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwib2JqIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiU291bmRib2FyZCIsImNvbnRhaW5lcnNDbGFzc0xpc3QiLCJpdGVtQ2xhc3NMaXN0IiwiX3NldE1lZGlhQ29udHJvbGxlcnMiLCJTZXQiLCJfbWFwTWVkaWFDb250cm9sbGVyc0J5SWQiLCJfbWFwSW5wdXRCeUNvbXBvbmVudElkIiwiYWRkTWVkaWFMaXN0IiwiYXJyTWVkaWFTcmMiLCJnZXRJbnN0YW50TVAzRG93bmxvYWRMaW5rIiwidXJsIiwiaXNNeUluc3RhbnRzTGluayIsIm1hdGNoZXMiLCJtZWRpYUNvbXBvbmVudHMiLCJhbGwiLCJtZWRpYVNyYyIsInNyY09wdGlvbnMiLCJnZXRTb3VyY2VJbnB1dERlZmF1bHRPcHRpb25zIiwiYWRkTWVkaWEiLCJnZXRDdXN0b21NZWRpYUNvbXBvbmVudE1lZGlhT3B0aW9ucyIsIm1lZGlhT3B0aW9ucyIsInN0cnVjdHVyZWRDbG9uZSIsImNvbXBvbmVudHMiLCJjb21wb25lbnRSZXN1bHQiLCJhZGRJZnJhbWUiLCJhZGRNZWRpYUNvbXBvbmVudCIsInNldENvbXBvbmVudE5hbWVCeUlkIiwibWVkaWEiLCJhdXRvUmVwZWF0T25QbGF5IiwiYWRkWW91dHViZUxpc3QiLCJhcnJWaWRlb09wdGlvbnMiLCJhZGRBdWRpb0xpc3QiLCJhcnJNZWRpYU9wdGlvbnMiLCJtZWRpYUlucHV0IiwiYWRkQ29tcG9uZW50SW50ZXJhY3Rpb25CbG9ja0V2ZW50IiwiZ2V0SW5wdXRCeVNvdXJjZSIsImNvbXBvbmVudHNDb250cm9sbGVycyIsImdldEVsZW1lbnRNZWRpYUNvbnRhaW5lciIsImNvbnRhaW5lcklkIiwiZWxlbWVudE1lZGlhQ29udGFpbmVyIiwiY29tcG9uZW50SWQiLCJjb21wb25lbnROYW1lRWxlbWVudCIsImdldEVsZW1lbnRJdGVtTmFtZUNvbnRhaW5lckJ5SWQiLCJlbGVtZW50TWVkaWFOYW1lIiwibWVkaWFDb250YWluZXIiLCJnZXROZXdNZWRpYUNvbXBvbmVudElkIiwiZ2V0TmV3WW91dHViZUlmcmFtZUlkIiwiYXVkaW9FbGVtZW50SWQiLCJhdWRpb0NvbnRhaW5lciIsImlucHV0SW5mbyIsImFkZElucHV0RWxlbWVudFRvQ29udGFpbmVyIiwic291bmRib2FyZE1lZGlhQ29tcG9uZW50IiwiaW5wdXRDb250YWluZXIiLCJidXR0b25SZW1vdmVJdGVtIiwiYnV0dG9uRWxlbWVudCIsIml0ZW1PcHRpb25zIiwiZWxlbWVudElmcmFtZUNvbnRhaW5lciIsIm5ld0lmcmFtZSIsInNvdW5kYm9hcmRZb3V0dWJlQ29tcG9uZW50IiwiY2hhbmdlQ29tcG9uZW50U291cmNlVG9JbnB1dFZhbHVlIiwiY2hhbmdlQ29tcG9uZW50U291cmNlIiwibmV3U291cmNlIiwiY2hhbmdlWW91dHViZUlmcmFtZVNvdXJjZSIsInJlbW92ZUNvbXBvbmVudEJ5SWQiLCJjaGFuZ2VNZWRpYUNvbXBvbmVudFNvdXJjZSIsIm5ld1ZhbHVlIiwibmV3QXVkaW9PcHRpb25zIiwiY29tcG9uZW50TWVkaWEiLCJpbnB1dFNvdXJjZSIsImlucHV0RWxlbWVudENvbnRhaW5lciIsImlucHV0RWxlbWVudCIsImFyckNvbXBvbmVudHNFeGNlcHRUaGlzIiwiYyIsInJlbW92ZUl0ZW0iLCJyZW1vdmVDb21wb25lbnQiXSwic291cmNlUm9vdCI6IiJ9
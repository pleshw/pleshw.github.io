var YoutubeIframe;(()=>{"use strict";var e={2560:(e,t,i)=>{i.d(t,{S:()=>s});var n=i(7930);class s extends n.ObjectEventListener{constructor(){super()}}},2152:(e,t,i)=>{function n(e){return`\n  <div id="${e}">\n  </div>\n  `.trim()}i.d(t,{templateBackgroundYoutubeIframeElement:()=>n})},5102:(e,t,i)=>{i.r(t),i.d(t,{YoutubeIframe:()=>c,YoutubeIframeSwitcher:()=>o.YoutubeIframeSwitcher,YoutubeIframeSync:()=>l.YoutubeIframeSync,createDraggableYoutubeIframe:()=>m});var n=i(1319),s=i(4763),r=i(739),a=i(2152),o=i(4785),l=i(3362),h=i(7930),d=i(2560);function m({iframeId:e,videoId:t,startsAt:i,parentElement:n,classList:r=[]}){return{iframeController:new c({startsAt:i,iframeId:e,videoId:t,parentElement:n,classList:r}),draggable:new s.DraggableElement({element:n??document.body,allowDraggingByInnerContent:!0,onDrop:()=>{}})}}class c extends d.S{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;_videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;topDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new h.ObjectEventListener;cachedVideoInfo={};constructor(e){if(c._dictYoutubeIframeById.has(e.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=e.iframeId,this._startsAt=e.startsAt??0,this._videoId=e.videoId,this._startMuted=!!e.startMuted,this._blockInteraction=!!e.blockInteraction,this._iframeContainer=c.getYoutubeIframeElement({iframeId:e.iframeId,classList:e.classList}),this._iframeParentElement=c.setupParentFromYoutubeIframe({parentElement:e.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=e.dimensions??(0,n.getElementDimensions)(this._iframeParentElement),c._dictYoutubeIframeById.set(e.iframeId,this),this.setVideoInfo().then((()=>{this.setExternalHTMLElementsAttributes()}))}get name(){return this.videoName}get container(){return this._iframeContainer}get videoId(){return(0,n.extractYouTubeId)(this._videoId)}destroy(){this.player.destroy(),this.container.remove(),c._dictYoutubeIframeById.delete(this.id)}async setVideoInfo(){this.cachedVideoInfo=await this.getVideoInfo()??{},this.videoName=this.cachedVideoInfo.title?this.cachedVideoInfo.title:"",this.channelName=this.cachedVideoInfo.author_name?this.cachedVideoInfo.author_name:"",this.videoThumb=this.cachedVideoInfo.thumbnail_url?this.cachedVideoInfo.thumbnail_url:"",this.channelURL=this.cachedVideoInfo.author_url?this.cachedVideoInfo.author_url:""}async changeVideo(e){if((0,n.isValidYoutubeUrlOrId)(e.videoId)){for(;!this.player||!this.player.loadVideoById;)await(0,n.delay)(100);this.prepareOptions(e),await this.loadVideo(),this.player.seekTo(this.startsAt,!0),this.isPlaying?this.playWithoutTriggerEvents():this.pauseWithoutTriggerEvents()}}prepareOptions(e){this.id=e.iframeId,this._videoId=e.videoId,this.startsAt=e.startsAt??this.startsAt}async loadVideo(){this._isPlayerReady=!1,this.player.loadVideoById({videoId:this.videoId,startSeconds:this.startsAt,suggestedQuality:"highres"}),await this.setVideoInfo(),this.setExternalHTMLElementsAttributes()}async loadVideoInfo(){return await this.setVideoInfo(),this.setExternalHTMLElementsAttributes(),this.cachedVideoInfo}async getVideoInfo(){const e=await(0,n.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));return e.error?(console.error(e.error),null):await e.data().json()}onPlayerReady(e){this._startMuted&&this.player.mute(),c._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),c.checkIfEveryIframeIsReady()}onPlayerStateChange(e){e.data===c._youtubeAPIReference.PlayerState.PLAYING?(this._isPlaying=!0,this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this,this.isPlaying)),100),this.setClassesIframePlaying()):this._playingObserverInterval&&(clearInterval(this._playingObserverInterval),this.setClassesIframePaused(),this._isPlaying=!1,this._playingObserverInterval=null),this.callEventsByName("playerstatechange",this,this.isPlaying),this.callEventsByName("onplayerstatechange",this,this.isPlaying)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(e){const t=(0,r.clamp)(e+this.startsAt,this.startsAt,this.playerDuration);this.seek(t)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,r.clamp)(this._startsAt,0,this._startsAt)}set startsAt(e){this._startsAt=(0,r.clamp)(e,0,e)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(e,t=!1,i=!1){return this.callEventsByName("onseek",e,t,i,this),e+=i?this._startsAt:0,this.player.seekTo(e,t),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...c._dictYoutubeIframeById.keys()].some((e=>!this._arrYoutubeIframeIdReady.includes(e)))||(this.arrObjectToSetOnEveryIframeReady.forEach((e=>e.setup(c._dictYoutubeIframeById))),c._dictYoutubeIframeById.forEach(((e,t)=>{e.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:e,classList:t}){const i=document.createElement("div");return i.classList.add("yt-iframe-container"),t&&i.classList.add(...t),i.id=`containerYoutubeIframe${e}`,i.insertAdjacentHTML("afterbegin",(0,a.templateBackgroundYoutubeIframeElement)(e)),i}static setupParentFromYoutubeIframe({parentElement:e,iframeContainer:t}){const i=e??document.body;return i.classList.add("yt-iframe-parent"),i.insertAdjacentElement("afterbegin",t),i}setExternalHTMLElements(){this.createInvisibleDivTop(),this.createInvisibleDivBlockInteraction(),this.setExternalHTMLElementsAttributes()}setExternalHTMLElementsAttributes(){this.setIframeContainerAttributes(),this.setTopDivAttributes(),this.setDivBlockInteractionAttributes()}createInvisibleDivTop(){this.topDiv=c.getInvisibleTopDiv(this),this.topDiv.style.zIndex="990"}createInvisibleDivBlockInteraction(){this._divBlockInteraction=c.getInvisibleDivBlockInteraction(this),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(e=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}setDivBlockInteractionAttributes(){this.divBlockInteraction&&(0,n.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}setIframeContainerAttributes(){this._iframeContainer&&(0,n.setAttributeListForElement)(this._iframeContainer,this._videoInfoAttributeList)}setTopDivAttributes(){this.topDiv&&(0,n.setAttributeListForElement)(this.topDiv,this._videoInfoAttributeList)}set blockInteraction(e){this._blockInteraction=e,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new c._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;get _videoInfoAttributeList(){return[["yt-iframe-id",this.id],["yt-iframe-video-name",this.videoName],["yt-iframe-video-channel-name",this.channelName],["yt-iframe-video-thumb-url",this.videoThumb],["yt-iframe-video-channel-url",this.channelURL]]}static async buildSingleIframe(e){if(e._isPlayerReady)return e;if(!document.getElementById("ytIframeAPIScriptTag")){var t=document.createElement("script");t.id="ytIframeAPIScriptTag",t.src="https://www.youtube.com/iframe_api";var i=document.getElementsByTagName("script")[0];i&&i.parentNode&&i.parentNode.insertBefore(t,i)}return await(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag"),await(0,n.pollForVariableAsync)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(t=>{c._youtubeAPIReference=t,e.build()})),await e.loadVideoInfo(),e}static buildIframes(){if(!document.getElementById("ytIframeAPIScriptTag")){var e=document.createElement("script");e.id="ytIframeAPIScriptTag",e.src="https://www.youtube.com/iframe_api";var t=document.getElementsByTagName("script")[0];t&&t.parentNode&&t.parentNode.insertBefore(e,t)}(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag").then((()=>{(0,n.pollForVariable)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(e=>{c._youtubeAPIReference=e,c.setYoutubeIframeElements()}))}))}build(){this.setExternalHTMLElements(),this.initPlayer()}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((e,t)=>{e.isPlayerReady||e.build()}))}static getInvisibleTopDiv(e){return(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleTopDivHoldToDrag${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:.2*e.dimensions.height}})}static getInvisibleDivBlockInteraction(e){const t=(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleDivBlockInteraction${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("yt-div-block-interaction"),t}}},4785:(e,t,i)=>{i.d(t,{YoutubeIframeSwitcher:()=>r});var n=i(5102),s=i(7930);class r extends s.ObjectEventListener{switchBetween;constructor(e){super(),this.switchBetween=e.switchBetween,n.YoutubeIframe.arrObjectToSetOnEveryIframeReady.push(this)}setup(e){this.switchBetween.forEach((e=>e.addEventListener("onplay",(()=>{const t=this.switchBetween.filter((t=>t.id!==e.id));t.forEach((e=>e.pause())),this.callEventsByName("onalternate",this,e,t),e.callEventsByName("onalternate",this,e,t)}))))}}},3362:(e,t,i)=>{i.d(t,{YoutubeIframeSync:()=>r});var n=i(5102),s=i(7930);class r extends s.ObjectEventListener{mainIframe;subIframes;constructor(e){super(),this.mainIframe=e.mainIframe,this.subIframes=Array.isArray(e.subIframes)?e.subIframes:[e.subIframes],n.YoutubeIframe.arrObjectToSetOnEveryIframeReady.push(this)}setup(e){this.syncSubIframes(),this.syncEventsWithMainIframe()}syncSubIframes(){this.subIframes.forEach((e=>{e.seek(this.mainIframe.startsAt,!0),e.pause(),e.addEventListener("onplayerstatechange",(()=>{e.seek(this.mainIframe.playerCurrentTime,!0),this.mainIframe.isPlaying?e.playWithoutTriggerEvents():e.pauseWithoutTriggerEvents()})),e.addEventListener("onplay",(()=>{this.mainIframe.play(),e.callEventsByName("onsync",e,this.mainIframe,"play",this.subIframes)})),e.addEventListener("onpause",(()=>{this.mainIframe.pause(),e.callEventsByName("onsync",e,this.mainIframe,"play",this.subIframes)}))}))}syncEventsWithMainIframe(){this.mainIframe.addEventListener("onplayerstatechange",(()=>{this.subIframes.forEach((e=>{e.seek(this.mainIframe.playerCurrentTime,!0),this.mainIframe.isPlaying?e.playWithoutTriggerEvents():e.pauseWithoutTriggerEvents()}))})),this.mainIframe.addEventListener("onplay",(()=>{this.subIframes.forEach((e=>{e.seek(this.mainIframe.playerCurrentTime,!0),e.playWithoutTriggerEvents(),e.callEventsByName("onsync",this.mainIframe,e,"play",this.subIframes)}))})),this.mainIframe.addEventListener("onpause",(()=>{this.subIframes.forEach((e=>{e.pauseWithoutTriggerEvents(),e.callEventsByName("onsync",this.mainIframe,e,"pause",this.subIframes)}))})),this.mainIframe.addEventListener("onseek",((e,t,i)=>{this.subIframes.forEach((n=>{e+=i?this.mainIframe.startsAt:0,n.seek(e,t),n.callEventsByName("onsync",this.mainIframe,n,"seek",this.subIframes)}))}))}}},4763:(e,t,i)=>{i.d(t,{DraggableElement:()=>r});var n=i(1319),s=i(8586);class r extends s.MovableElement{allowDraggingByInnerContent;draggingState;lastStartPoint;onDrop;onDrag;_enabled=!0;constructor(e){if(!e.element)throw new Error("Null draggable element. Please pass a valid element in constructor.");super(e),this.allowDraggingByInnerContent=!e.allowDraggingByInnerContent||e.allowDraggingByInnerContent,this.draggingState={dragging:!1},this.onDrag=e.onDrag,this.onDrop=e.onDrop,this.element.addEventListener("pointerdown",this.start.bind(this)),this.element.addEventListener("pointerup",this.end.bind(this)),this.element.addEventListener("pointercancel",this.end.bind(this)),this.element.addEventListener("pointermove",this.move.bind(this)),this.element.addEventListener("touchstart",(e=>e.preventDefault())),this.element.addEventListener("dragstart",(e=>e.preventDefault())),this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),100)}get enabled(){return this._enabled}set enabled(e){this._enabled=e}set dragging(e){this.enabled&&(this.draggingState.dragging=e,this.dragging?this.element.classList.add("dragging"):this.element.classList.remove("dragging"))}get dragging(){return this.draggingState.dragging}start(e){if(!this.enabled)return;const t=e instanceof MouseEvent,i=t&&0===e.button,s=e instanceof PointerEvent;if(t&&!i)return;if(!this.allowDraggingByInnerContent&&e.target!==this.element)return;this.callEventsByName("onDrag",this.element,this),this.onDrag&&this.onDrag(this.element,this),this.dragging=!0,e.stopPropagation();let{x:r,y:a}=(0,n.clickEventToCoordinates)(e);this.lastStartPoint={x:r,y:a},this.movingState.delta={dx:this.movingState.pos.x-r,dy:this.movingState.pos.y-a},s&&(this.draggingState.pointerId=e.pointerId,this.element.setPointerCapture(e.pointerId)),this.element.style.userSelect="none"}end(){this.dragging=!1,this.element.style.userSelect="",this.callEventsByName("onDrop",this.element,this),this.onDrop&&this.onDrop(this.element,this)}updatePosition(){this.dragging||super.updatePosition()}move(e){if(!this.enabled)return;const t=e instanceof PointerEvent;if(!this.dragging)return;if(!this.allowDraggingByInnerContent&&!(e.target===this.element||t&&this.draggingState.pointerId===e.pointerId))return;e.stopPropagation();let{x:i,y:s}=(0,n.clickEventToCoordinates)(e);super.moveToPosition(i,s)}static makeElementDraggable(e){return new r({element:e})}static makeElementDraggableByQuerySelector(e){const t=document.querySelector(e);return t?new r({element:t}):null}}},8586:(e,t,i)=>{i.d(t,{MovableElement:()=>r});var n=i(7930),s=i(1319);class r extends n.ObjectEventListener{element;movingState;intervalUpdatePosition;onBeforeMove;onAfterMove;constructor(e){if(super(),!e.element)throw new Error("Null movable element. Please pass a valid element in constructor.");this.element=e.element,this.onBeforeMove=e.onBeforeMove,this.onAfterMove=e.onAfterMove,this.movingState={pos:{x:0,y:0},delta:{dx:0,dy:0}},this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),200)}get position(){return this.movingState.pos}set position(e){this.moveToPosition(e.x,e.y)}get x(){return this.movingState.pos.x}set x(e){this.moveToPosition(e,this.y)}get y(){return this.movingState.pos.y}set y(e){this.moveToPosition(this.x,e)}setTranslate(e,t){this.callEventsByName("onBeforeMove",this.element,this),this.onBeforeMove&&this.onBeforeMove(this.element,this),this.resetTranslate(),this.element.style.transform+=`translate(${e}px, ${t}px)`,this.callEventsByName("onAfterMove",this.element,this),this.onAfterMove&&this.onAfterMove(this.element,this)}setTranslateByPoint2D(e){this.setTranslate(e.x,e.y)}updatePosition(){this.movingState.pos=(0,s.getTransformCoordsFromElement)(this.element),this.movingState.delta.dx=0,this.movingState.delta.dy=0}resetTranslate(){this.element.style.transform=this.element.style.transform.replace(s.regexRemoveTranslateFromTransform,"")}moveToPosition(e,t){this.movingState.pos={x:e+this.movingState.delta.dx,y:t+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToPoint2D(e){this.movingState.pos={x:e.x+this.movingState.delta.dx,y:e.y+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToTargetElement(e){const t=e.getBoundingClientRect(),i=(0,s.getTransformCoordsFromElement)(this.element),n=(0,s.getDistanceFromBorder)(this.element,e),r=i.x+n.right,a=i.y+n.bottom;this.setTranslateByPoint2D({x:Math.round(r-t.width),y:Math.round(a-t.height)})}moveToCenterOfTargetElement(e){const t=e.getBoundingClientRect(),i=(0,s.getTransformCoordsFromElement)(this.element),n=(0,s.getDistanceFromBorder)(this.element,e),r=i.x+n.right,a=i.y+n.bottom;this.setTranslateByPoint2D({x:Math.round(r-t.width/2),y:Math.round(a-t.height/2)})}static makeElementMovable(e){return new r({element:e})}}},7930:(e,t,i)=>{i.d(t,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(e,t){const i={id:crypto.randomUUID(),event:t};return this.eventsByName.has(e.toLowerCase())?(this.eventsByName.get(e.toLowerCase()).push(i),i.id):(this.eventsByName.set(e.toLowerCase(),[i]),i.id)}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}removeEventById(e){this.eventsByName.forEach(((t,i)=>{this.eventsByName.set(i,t.filter((t=>t.id!==e)))}))}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e.event(...t)))}}},1319:(e,t,i)=>{i.d(t,{clickEventToCoordinates:()=>B,createInvisibleDivAboveParent:()=>T,delay:()=>E,extractYouTubeId:()=>y,getDistanceFromBorder:()=>w,getElementDimensions:()=>g,getTransformCoordsFromElement:()=>_,handlePromise:()=>c,isValidYoutubeUrlOrId:()=>u,pollForVariable:()=>p,pollForVariableAsync:()=>I,regexRemoveTranslateFromTransform:()=>s,setAttributeListForElement:()=>f,waitUntilElementExists:()=>b});var n=i(739);const s=/translate\([^)]*\)/g,r=/rotate\((-?\d+\.?\d*)deg\)/,a=/rotateX\((-?\d+\.?\d*)deg\)/,o=/rotateY\((-?\d+\.?\d*)deg\)/,l=/rotateZ\((-?\d+\.?\d*)deg\)/,h=new Map,d=new Map,m=new Map;async function c(e){try{const t=await e;return{data:()=>t,error:null}}catch(e){return console.error(e),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:e instanceof Error?e:new Error(String(e))}}}function u(e){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(e)||/^[a-zA-Z0-9_-]{11}$/.test(e)}function y(e){const t=e.match(/[?&]v=([^?&]+)/);return t&&t[1]?t[1]:11===e.length?e:null}function f(e,t){t.forEach((([t,i])=>{e.setAttribute(t,i)}))}function g(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height}}function v(e){const t=e.getBoundingClientRect(),i=t.left+t.width/2,n=t.top+t.height/2,s=function(){const e=function(e){switch(e){case"x":return a;case"y":return o;case"z":return l;default:return r}}(P(document.body)).exec(document.body.style.transform);return e?parseFloat(e[1]):0}(),h=Math.PI/180*s,d=Math.cos(h),m=Math.sin(h),c=i+(t.left-i)*d-(t.top-n)*m,u=n+(t.left-i)*m+(t.top-n)*d,y=i+(t.right-i)*d-(t.bottom-n)*m,f=n+(t.right-i)*m+(t.bottom-n)*d,g=Math.min(c,y),v=Math.min(u,f),p=Math.max(u,f),I=Math.max(c,y);return{x:g,y:v,width:t.width,height:t.height,toJSON:t.toJSON,left:g,top:v,bottom:p,right:I}}function p(e,t,i){const n=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(n),i(window[e]))}),100)}async function I(e,t,i){return new Promise((n=>{const s=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(s),i(window[e]),n())}),100)}))}function b(e){return new Promise((t=>{if(document.querySelector(e))return t(document.querySelector(e));const i=new MutationObserver((n=>{document.querySelector(e)&&(i.disconnect(),t(document.querySelector(e)))}));i.observe(document.body,{childList:!0,subtree:!0})}))}async function E(e){return new Promise((t=>setTimeout(t,e)))}function w(e,t,i=!1){const n=i?v(e):e.getBoundingClientRect(),s=i?v(t):t.getBoundingClientRect(),r=n.left+n.width/2,a=n.top+n.height/2;return{top:a-s.top,right:s.right-r,bottom:s.bottom-a,left:r-s.left}}function P(e){const t=e.style.transform.toLowerCase();return t.includes("x")?"x":t.includes("y")?"y":"z"}function _(e,t=!1){const i=(window.getComputedStyle(e).transform.match(n.regexNumberPattern)??[0,0]).map((e=>+e));let s={x:void 0!==i[4]?Math.round(i[4]):0,y:void 0!==i[5]?Math.round(i[5]):0};if(t){const t=function(e,t="x"){let i;switch(t){case"x":i=a;break;case"y":i=o;break;case"z":i=l;break;default:i=r}const n=i.exec(e.style.transform);return n?parseFloat(n[1]):0}(document.body,P(e))||0;return(0,n.rotateCoordinates)(s.x,s.y,t)}return s}function B(e){if(e instanceof MouseEvent)return{x:e.clientX,y:e.clientY};if(e instanceof TouchEvent){const t=e.changedTouches[0];return{x:t.clientX,y:t.clientY}}throw"Event not Found"}function T({parentElement:e,id:t,position:i,dimensions:n}){var s=document.createElement("div");return e.style.position||(e.style.position="relative"),s.id=t,s.style.position="absolute",s.style.width=n&&n.width?n.width.toString()+"px":"100%",s.style.height=n&&n.height?n.height.toString()+"px":"100%",s.style.top=(i?.top.toString()??"0")+"px",s.style.left=(i?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",e.appendChild(s),s}new Map,window.addEventListener("keydown",(e=>{e.repeat||function(e){for(const t of h)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e),function(e){for(const t of d)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e)})),window.addEventListener("keyup",(e=>{for(const t of m)e.code===t[0]&&t[1].forEach((t=>t(e)))}))},739:(e,t,i)=>{i.d(t,{clamp:()=>r,regexNumberPattern:()=>n,rotateCoordinates:()=>s});const n=/-?\d+\.?\d*/g;function s(e,t,i){const n=Math.PI/180*i;return{x:e*Math.cos(n)-t*Math.sin(n),y:e*Math.sin(n)+t*Math.cos(n)}}function r(e=0,t=0,i=100){return Math.max(t,Math.min(e,i))}}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=i(5102);YoutubeIframe=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
var YoutubeIframe;(()=>{"use strict";var e={2152:(e,t,i)=>{function n(e){return`\n  <div id="${e}">\n  </div>\n  `.trim()}i.d(t,{templateBackgroundYoutubeIframeElement:()=>n})},5102:(e,t,i)=>{i.r(t),i.d(t,{YoutubeIframe:()=>d,YoutubeIframeSwitcher:()=>o.YoutubeIframeSwitcher,YoutubeIframeSync:()=>l.YoutubeIframeSync,createDraggableYoutubeIframe:()=>m});var n=i(1319),s=i(4763),r=i(739),a=i(2152),o=i(4785),l=i(3362),h=i(7930);function m({iframeId:e,videoId:t,startsAt:i,parentElement:n,classList:r=[]}){return{iframeController:new d({startsAt:i,iframeId:e,videoId:t,parentElement:n,classList:r}),draggable:new s.DraggableElement({element:n??document.body,allowDraggingByInnerContent:!0,onDrop:()=>{}})}}class d extends h.ObjectEventListener{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;invisibleDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new h.ObjectEventListener;constructor(e){if(d._dictYoutubeIframeById.has(e.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=e.iframeId,this._startsAt=e.startsAt??0,this.videoId=e.videoId,this._startMuted=!!e.startMuted,this._blockInteraction=!!e.blockInteraction,this._iframeContainer=d.getYoutubeIframeElement({iframeId:e.iframeId,classList:e.classList}),this._iframeParentElement=d.setupParentFromYoutubeIframe({parentElement:e.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=e.dimensions??(0,n.getElementDimensions)(this._iframeParentElement),d._dictYoutubeIframeById.set(e.iframeId,this),this.getVideoInfo().then((e=>{this.videoName=e&&e.title?e.title:"",this.channelName=e&&e.author_name?e.author_name:"",this.videoThumb=e&&e.thumbnail_url?e.thumbnail_url:"",this.channelURL=e&&e.author_url?e.author_url:""}))}async getVideoInfo(){const e=await(0,n.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));if(!e.error)return await e.data().json();console.error(e.error)}onPlayerReady(e){this._startMuted&&this.player.mute(),d._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),d.checkIfEveryIframeIsReady()}onPlayerStateChange(e){this._isPlaying=e.data===d._youtubeAPIReference.PlayerState.PLAYING,this._isPlaying?(this.setClassesIframePlaying(),this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this)),5)):this._playingObserverInterval&&(this.setClassesIframePaused(),clearInterval(this._playingObserverInterval),this._playingObserverInterval=null),this.callEventsByName("onplayerstatechange",this._isPlaying,this)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(e){this.seek(e)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,r.clamp)(this._startsAt,0,this._startsAt)}set startsAt(e){this._startsAt=(0,r.clamp)(e,0,e)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(e,t=!1,i=!1){return this.callEventsByName("onseek",e,t,i,this),e+=i?this._startsAt:0,this.player.seekTo(e,t),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...d._dictYoutubeIframeById.keys()].some((e=>!this._arrYoutubeIframeIdReady.includes(e)))||(this.arrObjectToSetOnEveryIframeReady.forEach((e=>e.setup(d._dictYoutubeIframeById))),d._dictYoutubeIframeById.forEach(((e,t)=>{e.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:e,classList:t}){const i=document.createElement("div");return i.classList.add("yt-iframe-container"),t&&i.classList.add(...t),i.id=`containerYoutubeIframe${e}`,i.insertAdjacentHTML("afterbegin",(0,a.templateBackgroundYoutubeIframeElement)(e)),i}static setupParentFromYoutubeIframe({parentElement:e,iframeContainer:t}){const i=e??document.body;return i.classList.add("yt-iframe-parent"),i.insertAdjacentElement("afterbegin",t),i}setInvisibleTopDiv(e){this.invisibleDiv=e,this.invisibleDiv.style.zIndex="990"}setInvisibleDivBlockInteraction(e){this._divBlockInteraction=e,this._divBlockInteraction.setAttribute("yt-iframe-id",this.id),this._divBlockInteraction.setAttribute("yt-iframe-video-name",this.videoName),this._divBlockInteraction.setAttribute("yt-iframe-video-channel-name",this.channelName),this._divBlockInteraction.setAttribute("yt-iframe-video-thumb-url",this.videoThumb),this._divBlockInteraction.setAttribute("yt-iframe-video-channel-url",this.channelURL),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(e=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}set blockInteraction(e){this._blockInteraction=e,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new d._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;static buildIframes(){var e=document.createElement("script");e.id="ytIframeAPI",e.src="https://www.youtube.com/iframe_api";var t=document.getElementsByTagName("script")[0];t&&t.parentNode&&t.parentNode.insertBefore(e,t),(0,n.waitUntilElementExists)("#ytIframeAPI").then((()=>{(0,n.pollForVariable)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(e=>{d._youtubeAPIReference=e,d.setYoutubeIframeElements()}))}))}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((e,t)=>{e.setInvisibleTopDiv(this.getInvisibleTopDiv(e)),e.setInvisibleDivBlockInteraction(this.getInvisibleDivBlockInteraction(e)),e.initPlayer()}))}static getInvisibleTopDiv(e){return(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleTopDivHoldToDrag${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:.2*e.dimensions.height}})}static getInvisibleDivBlockInteraction(e){const t=(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleDivBlockInteraction${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("yt-div-block-interaction"),t}}},4785:(e,t,i)=>{i.d(t,{YoutubeIframeSwitcher:()=>r});var n=i(5102),s=i(7930);class r extends s.ObjectEventListener{switchBetween;constructor(e){super(),this.switchBetween=e.switchBetween,n.YoutubeIframe.arrObjectToSetOnEveryIframeReady.push(this)}setup(e){this.switchBetween.forEach((e=>e.addEventListener("onplay",(()=>{const t=this.switchBetween.filter((t=>t.id!==e.id));t.forEach((e=>e.pause())),this.callEventsByName("onalternate",this,e,t),e.callEventsByName("onalternate",this,e,t)}))))}}},3362:(e,t,i)=>{i.d(t,{YoutubeIframeSync:()=>r});var n=i(5102),s=i(7930);class r extends s.ObjectEventListener{mainIframe;subIframes;constructor(e){super(),this.mainIframe=e.mainIframe,this.subIframes=Array.isArray(e.subIframes)?e.subIframes:[e.subIframes],n.YoutubeIframe.arrObjectToSetOnEveryIframeReady.push(this)}setup(e){this.syncSubIframes(),this.syncEventsWithMainIframe()}syncSubIframes(){this.subIframes.forEach((e=>{e.seek(this.mainIframe.startsAt,!0),e.pause(),e.addEventListener("onplay",(()=>{this.mainIframe.play(),e.callEventsByName("onsync",e,this.mainIframe,"play",this.subIframes)})),e.addEventListener("onpause",(()=>{this.mainIframe.pause(),e.callEventsByName("onsync",e,this.mainIframe,"play",this.subIframes)}))}))}syncEventsWithMainIframe(){this.mainIframe.addEventListener("onplay",(()=>{this.subIframes.forEach((e=>{e.seek(this.mainIframe.playerCurrentTime,!0),e.playWithoutTriggerEvents(),e.callEventsByName("onsync",this.mainIframe,e,"play",this.subIframes)}))})),this.mainIframe.addEventListener("onpause",(()=>{this.subIframes.forEach((e=>{e.pauseWithoutTriggerEvents(),e.callEventsByName("onsync",this.mainIframe,e,"pause",this.subIframes)}))})),this.mainIframe.addEventListener("onseek",((e,t,i)=>{this.subIframes.forEach((n=>{e+=i?this.mainIframe.startsAt:0,n.seek(e,t),n.callEventsByName("onsync",this.mainIframe,n,"seek",this.subIframes)}))}))}}},4763:(e,t,i)=>{i.d(t,{DraggableElement:()=>r});var n=i(1319),s=i(8586);class r extends s.MovableElement{allowDraggingByInnerContent;draggingState;lastStartPoint;onDrop;onDrag;_enabled=!0;constructor(e){if(!e.element)throw new Error("Null draggable element. Please pass a valid element in constructor.");super(e),this.allowDraggingByInnerContent=!e.allowDraggingByInnerContent||e.allowDraggingByInnerContent,this.draggingState={dragging:!1},this.onDrag=e.onDrag,this.onDrop=e.onDrop,this.element.addEventListener("pointerdown",this.start.bind(this)),this.element.addEventListener("pointerup",this.end.bind(this)),this.element.addEventListener("pointercancel",this.end.bind(this)),this.element.addEventListener("pointermove",this.move.bind(this)),this.element.addEventListener("touchstart",(e=>e.preventDefault())),this.element.addEventListener("dragstart",(e=>e.preventDefault())),this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),100)}get enabled(){return this._enabled}set enabled(e){this._enabled=e}set dragging(e){this.enabled&&(this.draggingState.dragging=e,this.dragging?this.element.classList.add("dragging"):this.element.classList.remove("dragging"))}get dragging(){return this.draggingState.dragging}start(e){if(!this.enabled)return;const t=e instanceof MouseEvent,i=t&&0===e.button,s=e instanceof PointerEvent;if(t&&!i)return;if(!this.allowDraggingByInnerContent&&e.target!==this.element)return;this.callEventsByName("onDrag",this.element,this),this.onDrag&&this.onDrag(this.element,this),this.dragging=!0,e.stopPropagation();let{x:r,y:a}=(0,n.clickEventToCoordinates)(e);this.lastStartPoint={x:r,y:a},this.movingState.delta={dx:this.movingState.pos.x-r,dy:this.movingState.pos.y-a},s&&(this.draggingState.pointerId=e.pointerId,this.element.setPointerCapture(e.pointerId)),this.element.style.userSelect="none"}end(){this.dragging=!1,this.element.style.userSelect="",this.callEventsByName("onDrop",this.element,this),this.onDrop&&this.onDrop(this.element,this)}updatePosition(){this.dragging||super.updatePosition()}move(e){if(!this.enabled)return;const t=e instanceof PointerEvent;if(!this.dragging)return;if(!this.allowDraggingByInnerContent&&!(e.target===this.element||t&&this.draggingState.pointerId===e.pointerId))return;e.stopPropagation();let{x:i,y:s}=(0,n.clickEventToCoordinates)(e);super.moveToPosition(i,s)}static makeElementDraggable(e){return new r({element:e})}static makeElementDraggableByQuerySelector(e){const t=document.querySelector(e);return t?new r({element:t}):null}}},8586:(e,t,i)=>{i.d(t,{MovableElement:()=>r});var n=i(7930),s=i(1319);class r extends n.ObjectEventListener{element;movingState;intervalUpdatePosition;onBeforeMove;onAfterMove;constructor(e){if(super(),!e.element)throw new Error("Null movable element. Please pass a valid element in constructor.");this.element=e.element,this.onBeforeMove=e.onBeforeMove,this.onAfterMove=e.onAfterMove,this.movingState={pos:{x:0,y:0},delta:{dx:0,dy:0}},this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),200)}get position(){return this.movingState.pos}set position(e){this.moveToPosition(e.x,e.y)}get x(){return this.movingState.pos.x}set x(e){this.moveToPosition(e,this.y)}get y(){return this.movingState.pos.y}set y(e){this.moveToPosition(this.x,e)}setTranslate(e,t){this.callEventsByName("onBeforeMove",this.element,this),this.onBeforeMove&&this.onBeforeMove(this.element,this),this.resetTranslate(),this.element.style.transform+=`translate(${e}px, ${t}px)`,this.callEventsByName("onAfterMove",this.element,this),this.onAfterMove&&this.onAfterMove(this.element,this)}setTranslateByPoint2D(e){this.setTranslate(e.x,e.y)}updatePosition(){this.movingState.pos=(0,s.getTransformCoordsFromElement)(this.element),this.movingState.delta.dx=0,this.movingState.delta.dy=0}resetTranslate(){this.element.style.transform=this.element.style.transform.replace(s.regexRemoveTranslateFromTransform,"")}moveToPosition(e,t){this.movingState.pos={x:e+this.movingState.delta.dx,y:t+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToPoint2D(e){this.movingState.pos={x:e.x+this.movingState.delta.dx,y:e.y+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToTargetElement(e){const t=e.getBoundingClientRect(),i=(0,s.getTransformCoordsFromElement)(this.element),n=(0,s.getDistanceFromBorder)(this.element,e),r=i.x+n.right,a=i.y+n.bottom;this.setTranslateByPoint2D({x:Math.round(r-t.width),y:Math.round(a-t.height)})}moveToCenterOfTargetElement(e){const t=e.getBoundingClientRect(),i=(0,s.getTransformCoordsFromElement)(this.element),n=(0,s.getDistanceFromBorder)(this.element,e),r=i.x+n.right,a=i.y+n.bottom;this.setTranslateByPoint2D({x:Math.round(r-t.width/2),y:Math.round(a-t.height/2)})}static makeElementMovable(e){return new r({element:e})}}},7930:(e,t,i)=>{i.d(t,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(e,t){this.eventsByName.has(e.toLowerCase())?this.eventsByName.get(e.toLowerCase()).push(t):this.eventsByName.set(e.toLowerCase(),[t])}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e(...t)))}}},1319:(e,t,i)=>{i.d(t,{clickEventToCoordinates:()=>b,createInvisibleDivAboveParent:()=>E,getDistanceFromBorder:()=>f,getElementDimensions:()=>u,getTransformCoordsFromElement:()=>I,handlePromise:()=>c,pollForVariable:()=>g,regexRemoveTranslateFromTransform:()=>s,waitUntilElementExists:()=>v});var n=i(739);const s=/translate\([^)]*\)/g,r=/rotate\((-?\d+\.?\d*)deg\)/,a=/rotateX\((-?\d+\.?\d*)deg\)/,o=/rotateY\((-?\d+\.?\d*)deg\)/,l=/rotateZ\((-?\d+\.?\d*)deg\)/,h=new Map,m=new Map,d=new Map;async function c(e){try{const t=await e;return{data:()=>t,error:null}}catch(e){return console.error(e),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:e instanceof Error?e:new Error(String(e))}}}function u(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height}}function y(e){const t=e.getBoundingClientRect(),i=t.left+t.width/2,n=t.top+t.height/2,s=function(){const e=function(e){switch(e){case"x":return a;case"y":return o;case"z":return l;default:return r}}(p(document.body)).exec(document.body.style.transform);return e?parseFloat(e[1]):0}(),h=Math.PI/180*s,m=Math.cos(h),d=Math.sin(h),c=i+(t.left-i)*m-(t.top-n)*d,u=n+(t.left-i)*d+(t.top-n)*m,y=i+(t.right-i)*m-(t.bottom-n)*d,g=n+(t.right-i)*d+(t.bottom-n)*m,v=Math.min(c,y),f=Math.min(u,g),I=Math.max(u,g),b=Math.max(c,y);return{x:v,y:f,width:t.width,height:t.height,toJSON:t.toJSON,left:v,top:f,bottom:I,right:b}}function g(e,t,i){const n=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(n),i(window[e]))}),100)}function v(e){return new Promise((t=>{if(document.querySelector(e))return t(document.querySelector(e));const i=new MutationObserver((n=>{document.querySelector(e)&&(i.disconnect(),t(document.querySelector(e)))}));i.observe(document.body,{childList:!0,subtree:!0})}))}function f(e,t,i=!1){const n=i?y(e):e.getBoundingClientRect(),s=i?y(t):t.getBoundingClientRect(),r=n.left+n.width/2,a=n.top+n.height/2;return{top:a-s.top,right:s.right-r,bottom:s.bottom-a,left:r-s.left}}function p(e){const t=e.style.transform.toLowerCase();return t.includes("x")?"x":t.includes("y")?"y":"z"}function I(e,t=!1){const i=(window.getComputedStyle(e).transform.match(n.regexNumberPattern)??[0,0]).map((e=>+e));let s={x:void 0!==i[4]?Math.round(i[4]):0,y:void 0!==i[5]?Math.round(i[5]):0};if(t){const t=function(e,t="x"){let i;switch(t){case"x":i=a;break;case"y":i=o;break;case"z":i=l;break;default:i=r}const n=i.exec(e.style.transform);return n?parseFloat(n[1]):0}(document.body,p(e))||0;return(0,n.rotateCoordinates)(s.x,s.y,t)}return s}function b(e){if(e instanceof MouseEvent)return{x:e.clientX,y:e.clientY};if(e instanceof TouchEvent){const t=e.changedTouches[0];return{x:t.clientX,y:t.clientY}}throw"Event not Found"}function E({parentElement:e,id:t,position:i,dimensions:n}){var s=document.createElement("div");return e.style.position||(e.style.position="relative"),s.id=t,s.style.position="absolute",s.style.width=n&&n.width?n.width.toString()+"px":"100%",s.style.height=n&&n.height?n.height.toString()+"px":"100%",s.style.top=(i?.top.toString()??"0")+"px",s.style.left=(i?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",e.appendChild(s),s}new Map,window.addEventListener("keydown",(e=>{e.repeat||function(e){for(const t of h)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e),function(e){for(const t of m)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e)})),window.addEventListener("keyup",(e=>{for(const t of d)e.code===t[0]&&t[1].forEach((t=>t(e)))}))},739:(e,t,i)=>{i.d(t,{clamp:()=>r,regexNumberPattern:()=>n,rotateCoordinates:()=>s});const n=/-?\d+\.?\d*/g;function s(e,t,i){const n=Math.PI/180*i;return{x:e*Math.cos(n)-t*Math.sin(n),y:e*Math.sin(n)+t*Math.cos(n)}}function r(e=0,t=0,i=100){return Math.max(t,Math.min(e,i))}}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=i(5102);YoutubeIframe=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
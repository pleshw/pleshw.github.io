var AudioTools;(()=>{"use strict";var t={173:(t,e,n)=>{n.d(e,{AudioComponent:()=>r});var o=n(7930),i=n(1319),s=n(6555);class r extends o.ObjectEventListener{src;audioElement;_container;_blockInteraction=!1;_divBlockInteraction;constructor(t){super(),this.src=t.src,this._container=t.container,this.audioElement=t.audioElement,this._blockInteraction=!!t.blockInteraction,t.audioElementId&&(this.audioElement.id=t.audioElementId),this.audioElement.classList.add("audio-component"),this._container.id||(this._container.id=t.audioElementId+"AudioComponentContainer"),this._container.classList.add("audio-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction()}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.audioElement.paused}get fileName(){return this.audioElement.src||this.audioElement.querySelector("source")?.src||""}get currentTime(){return this.audioElement.currentTime}set currentTime(t){this.audioElement.currentTime=t}playWithoutTriggerEvents(){var t=this.audioElement.play();return void 0!==t&&t.then((t=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.audioElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("audio-component-playing"),this._divBlockInteraction.classList.add("audio-component-playing"),this._container.classList.remove("audio-component-paused"),this._divBlockInteraction.classList.remove("audio-component-paused")}setClassesPaused(){this._container.classList.add("audio-component-paused"),this._divBlockInteraction.classList.add("audio-component-paused"),this._container.classList.remove("audio-component-playing"),this._divBlockInteraction.classList.remove("audio-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.audioElement.currentTime=0,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.audioElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.audioElement.volume=1,this.callEventsByName("onunmute",this),this}seek(t,e){return this.currentTime=t,this.callEventsByName("onseek",this),this}get dimensions(){return(0,i.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(t){const e=(0,i.createInvisibleDivAboveParent)({parentElement:t._container,id:`invisibleDivBlockInteraction${t._container.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("audio-component-div-block-interaction"),e}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createAudioComponentOnBody(t){const e=await new s.AudioComponentFactory(t.src).buildOnBody();return new r({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}static async createAudioComponent(t){if(t.container===document.body||!t.container)return this.createAudioComponentOnBody(t);const e=await new s.AudioComponentFactory(t.src).build(t.container);return new r({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}}},6555:(t,e,n)=>{n.d(e,{AudioComponentFactory:()=>s});var o=n(7353),i=n(6401);class s extends i.ComponentContainer{constructor(t,e){super("audioComponent",(0,o.createInvisiblePlayer)([t],e))}async buildSubComponents(t){}}},6401:(t,e,n)=>{n.d(e,{ComponentContainer:()=>o});class o{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(t,e){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw new Error("Invalid template for scene component. Template id: "+e);this.templateElement=t}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(e),document.body.appendChild(this.templateElement);this.componentName=t}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(t,e){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let n=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,n+1),await t.build(e,`${this.componentName}${t.componentName.capitalizeFirstLetter()}${n}`)}async buildOnBody(t){this._element=document.createElement("div"),t&&(this._element.id=t);for(let t of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",t);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${t}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(t,e){for(let e of this.getTemplateCloneNodes())t.insertAdjacentElement("afterbegin",e);return await this.buildSubComponents(t),t}}},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},7930:(t,e,n)=>{n.d(e,{ObjectEventListener:()=>o});class o{eventsByName=new Map;addEventListener(t,e){this.eventsByName.has(t.toLowerCase())?this.eventsByName.get(t.toLowerCase()).push(e):this.eventsByName.set(t.toLowerCase(),[e])}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t(...e)))}}},7353:(t,e,n)=>{n.r(e),n.d(e,{audioElementHTML:()=>l,createAudioComponentOnBody:()=>r,createInvisiblePlayer:()=>a,playButtonCSS:()=>d,sourceElementHTML:()=>c}),n(2976);var o=n(1319),i=n(3164),s=n(173);async function r(t){return await s.AudioComponent.createAudioComponentOnBody(t)}function a(t,e){const n=(0,o.getElementFromHTML)(l(t,e));return document.body.insertAdjacentElement("afterbegin",n),(0,o.hideElement)(n),n}function l(t,e){return`<audio controls ${e?function(t){return` ${t.id?'id="'+t.id+'"':""} ${t.autoPlay||t.autoplay?"autoplay":""} ${t.muted?"muted":""} ${t.loop?"loop":""} ${t.preload?'preload="'+t.preload+'"':""}`.trimEnd()}(e):""}>\n    ${t.map((t=>c(t))).reduce(((t,e)=>t+e),"")}\n  </audio>`}function c(t){return`<source src="${t}" type="audio/${(0,i.getFileExtension)(t)}">`}function d(){return"\n    .play-button {\n      margin: 0;\n      padding: 0;\n      display: flex;\n      border: 0;\n      background: transparent;\n      box-sizing: border-box;\n      width: 0;\n      height: 34px;\n      border-color: transparent transparent transparent #202020;\n      transition: 100ms all ease;\n      cursor: pointer;\n      border-style: double;\n      border-width: 0px 0 0px 30px;\n    }\n\n    .play-button.paused {\n      border-style: solid;\n      border-width: 23px 0px 23px 34px;\n    }\n\n    .play-button:hover {\n      border-color: transparent transparent transparent #404040;\n    }\n  "}},1319:(t,e,n)=>{n.d(e,{createInvisibleDivAboveParent:()=>l,getElementDimensions:()=>a,getElementFromHTML:()=>r,hideElement:()=>c});const o=new Map,i=new Map,s=new Map;function r(t,e=!0){if(!(t=e?t.trim():t))return null;const n=document.createElement("template");n.innerHTML=t;const o=n.content.children;return 1===o.length?o[0]:Array.from(o)}function a(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function l({parentElement:t,id:e,position:n,dimensions:o}){var i=document.createElement("div");return t.style.position||(t.style.position="relative"),i.id=e,i.style.position="absolute",i.style.width=o&&o.width?o.width.toString()+"px":"100%",i.style.height=o&&o.height?o.height.toString()+"px":"100%",i.style.top=(n?.top.toString()??"0")+"px",i.style.left=(n?.left.toString()??"0")+"px",i.style.opacity="0",i.style.pointerEvents="auto",t.appendChild(i),i}function c(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of o)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of i)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of s)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},3164:(t,e,n)=>{n.d(e,{getFileExtension:()=>i});var o=n(2843);function i(t){if((0,o.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const n=t.split("/").pop();return n&&n!==t?n:""}},2843:(t,e,n)=>{function o(t){return"string"!=typeof t||!t||""===t}n.d(e,{isNullOrEmpty:()=>o})}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var s=e[o]={exports:{}};return t[o](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o=n(7353);AudioTools=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
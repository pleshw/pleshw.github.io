var AudioTools; (() => { "use strict"; var e = { 173: (e, t, n) => { n.d(t, { AudioComponent: () => r }); var o = n(930), s = n(555); class r extends o.ObjectEventListener { src; audioElement; container; constructor(e, t, n, o) { super(), this.src = e, this.container = n, this.audioElement = t, o && (this.audioElement.id = o), this.audioElement.classList.add("audio-component"), this.container.id = o + "Container", this.container.classList.add("audio-container") } get paused() { return this.audioElement.paused } get fileName() { return this.audioElement.src || this.audioElement.querySelector("source")?.src || "" } get currentTime() { return this.audioElement.currentTime } play() { var e = this.audioElement.play(); return void 0 !== e && e.then((e => { })).catch((() => { this.stop() })), this.callEventsByName("onplay", this), this } pause() { return this.audioElement.pause(), this.callEventsByName("onpause", this), this } stop() { return this.pause(), this.audioElement.currentTime = 0, this.callEventsByName("onstop", this), this } toggle() { this.paused ? this.play() : this.pause(), this.callEventsByName("ontoggle", this) } static async createAudioComponent(e, t) { const n = await new s.AudioComponentFactory(e).build(document.body), o = n, i = n.querySelector("audio"); return new r(e, i, o, t) } } }, 555: (e, t, n) => { n.d(t, { AudioComponentFactory: () => r }); var o = n(353), s = n(401); class r extends s.ComponentContainer { constructor(e, t) { super("audioComponent", (0, o.createInvisiblePlayer)([e], t)) } async buildSubComponents(e) { } } }, 401: (e, t, n) => { n.d(t, { ComponentContainer: () => o }); class o { _element = null; templateElement; componentName; subComponentCountByName = new Map; subComponents = []; constructor(e, t) { if ("string" == typeof t) { const e = document.getElementById(t); if (!e) throw new Error("Invalid template for scene component. Template id: " + t); this.templateElement = e } else this.templateElement = document.createElement("template"), this.templateElement.content.appendChild(t), document.body.appendChild(this.templateElement); this.componentName = e } getTemplateCloneNodes() { return this.templateElement.content.cloneNode(!0).children } async buildSingleSubComponent(e, t) { this.subComponentCountByName.has(this.componentName) && this.subComponentCountByName.set(this.componentName, 0); let n = this.subComponentCountByName.get(this.componentName); return this.subComponentCountByName.set(this.componentName, n + 1), await e.build(t, `${ this.componentName }${ e.componentName.capitalizeFirstLetter() }${ n }`) } async build(e, t) { this._element = document.createElement("div"), t && (this._element.id = t); for (let e of this.getTemplateCloneNodes()) this._element.insertAdjacentElement("afterbegin", e); if (!this._element) throw new Error(`Fail building SceneComponent. ElementId: ${ t }`); return await this.buildSubComponents(e), e.insertAdjacentElement("beforeend", this._element), this._element } } }, 976: () => { String.prototype.isNullOrEmpty = function () { return "string" != typeof this && !this && "" !== this }, String.prototype.truncate = function (e, t = "...") { return (this.length > e ? this.substring(0, e) + t : this).toString() }, String.prototype.removeAccents = function () { return this.normalize("NFD").replace(/[\u0300-\u036f]/g, "") }, String.prototype.capitalizeFirstLetter = function () { return "string" != typeof this ? "" : this.charAt(0).toUpperCase() + this.substring(1) }, String.prototype.zeroBefore = function () { return this.padStart(2, "0") } }, 930: (e, t, n) => { n.d(t, { ObjectEventListener: () => o }); class o { eventsByName = new Map; addEventListener(e, t) { this.eventsByName.has(e.toLowerCase()) ? this.eventsByName.get(e.toLowerCase()).push(t) : this.eventsByName.set(e.toLowerCase(), [t]) } getEventsByName(e) { return this.eventsByName.has(e.toLowerCase()) || this.eventsByName.set(e.toLowerCase(), []), this.eventsByName.get(e.toLowerCase()) } callEventsByName(e, ...t) { this.getEventsByName(e).forEach((e => e(...t))) } } }, 353: (e, t, n) => { n.r(t), n.d(t, { audioElementHTML: () => u, createAudioComponent: () => i, createInvisiblePlayer: () => a, playButtonCSS: () => d, sourceElementHTML: () => l }), n(976); var o = n(319), s = n(164), r = n(173); async function i(e, t) { return await r.AudioComponent.createAudioComponent(e, t) } function a(e, t) { const n = document.createElement("div"); n.classList.add("audio-container"), n.insertAdjacentHTML("afterbegin", u(e, t)); const s = n.childNodes[0], r = function (e, t) { const n = document.createElement("button"); return n.classList.add("play-button"), setTimeout((() => { e.paused && n.classList.add("paused") }), 300), n.addEventListener("click", (() => { e.paused ? (e.play(), n.classList.remove("paused")) : (e.pause(), n.classList.add("paused")) })), function (e, t, n) { t.addEventListener("play", (() => { e.classList.remove("paused"), n && n.onPlay && n.onPlay(t), n && n.onplay && n.onplay(t) })), t.addEventListener("pause", (() => { e.classList.add("paused"), n && n.onPause && n.onPause(t), n && n.onpause && n.onpause(t) })) }(n, e, t), n }(s, t); return n.insertAdjacentElement("beforeend", r), document.body.insertAdjacentElement("afterbegin", n), (0, o.hideElement)(s), (0, o.hideElement)(r), n } function u(e, t) { return `<audio controls ${ t ? function (e) { return ` ${ e.id ? 'id="' + e.id + '"' : "" } ${ e.autoPlay || e.autoplay ? "autoplay" : "" } ${ e.muted ? "muted" : "" } ${ e.loop ? "loop" : "" } ${ e.preload ? 'preload="' + e.preload + '"' : "" }`.trimEnd() }(t) : "" }>\n    ${ e.map((e => l(e))).reduce(((e, t) => e + t), "") }\n  </audio>` } function l(e) { return `<source src="${ e }" type="audio/${ (0, s.getFileExtension)(e) }">` } function d() { return "\n    .play-button {\n      margin: 0;\n      padding: 0;\n      display: flex;\n      border: 0;\n      background: transparent;\n      box-sizing: border-box;\n      width: 0;\n      height: 34px;\n      border-color: transparent transparent transparent #202020;\n      transition: 100ms all ease;\n      cursor: pointer;\n      border-style: double;\n      border-width: 0px 0 0px 30px;\n    }\n\n    .play-button.paused {\n      border-style: solid;\n      border-width: 23px 0px 23px 34px;\n    }\n\n    .play-button:hover {\n      border-color: transparent transparent transparent #404040;\n    }\n  " } }, 319: (e, t, n) => { n.d(t, { hideElement: () => i }); const o = new Map, s = new Map, r = new Map; function i(e) { e.style.display = "block", e.style.position = "absolute", e.style.zIndex = "-1", e.style.opacity = "0", e.style.width = "0px !important", e.style.height = "0px !important", e.setAttribute("hidden", "") } new Map, window.addEventListener("keydown", (e => { e.repeat || function (e) { for (const t of o) e.code === t[0] && t[1].forEach((t => t(e))) }(e), function (e) { for (const t of s) e.code === t[0] && t[1].forEach((t => t(e))) }(e) })), window.addEventListener("keyup", (e => { for (const t of r) e.code === t[0] && t[1].forEach((t => t(e))) })) }, 164: (e, t, n) => { n.d(t, { getFileExtension: () => s }); var o = n(843); function s(e) { if ((0, o.isNullOrEmpty)(e)) return ""; const t = e.split(".").pop(); if (t && t !== e) return t; const n = e.split("/").pop(); return n && n !== e ? n : "" } }, 843: (e, t, n) => { function o(e) { return "string" != typeof e || !e || "" === e } n.d(t, { isNullOrEmpty: () => o }) } }, t = {}; function n(o) { var s = t[o]; if (void 0 !== s) return s.exports; var r = t[o] = { exports: {} }; return e[o](r, r.exports, n), r.exports } n.n = e => { var t = e && e.__esModule ? () => e.default : () => e; return n.d(t, { a: t }), t }, n.d = (e, t) => { for (var o in t) n.o(t, o) && !n.o(e, o) && Object.defineProperty(e, o, { enumerable: !0, get: t[o] }) }, n.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), n.r = e => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 }) }; var o = n(353); AudioTools = o })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
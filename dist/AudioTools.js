var AudioTools;(()=>{"use strict";var t={173:(t,e,n)=>{n.d(e,{AudioComponent:()=>c});var i=n(7353),o=n(1319),s=n(3164),r=n(2843),a=n(6555),l=n(2560);class c extends l.S{src;audioElement;_container;_startsAt;_blockInteraction=!1;_divBlockInteraction;constructor(t){super(),this.src=t.src,this._container=t.container,this.audioElement=t.audioElement,this._blockInteraction=!!t.blockInteraction,t.audioElementId&&(this.audioElement.id=t.audioElementId),this._startsAt=t.startsAt??0,this.audioElement.classList.add("audio-component"),this.audioElement.addEventListener("ended",(()=>{this.stop()})),this._container.id||(this._container.id=t.audioElementId+"AudioComponentContainer"),this._container.classList.add("audio-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction(),this.setElementsAttributes()}destroy(){this.container.remove()}get isPlaying(){return!this.audioElement.paused}set id(t){this.audioElement.id=t}get id(){return this.audioElement.id}get _videoInfoAttributeList(){return[["audio-component-src",this.src],["audio-component-name",this.name]]}get name(){return(0,r.replacePercentEncoding)((0,s.removeFilePath)(this.src))}setElementsAttributes(){(0,o.setAttributeListForElement)(this.audioElement,this._videoInfoAttributeList),(0,o.setAttributeListForElement)(this.container,this._videoInfoAttributeList),(0,o.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.audioElement.paused}get fileName(){return this.audioElement.src||this.audioElement.querySelector("source")?.src||""}get startsAt(){return this._startsAt}set playerCurrentTime(t){this.audioElement.currentTime=t}get playerCurrentTime(){return this.audioElement.currentTime}get currentTime(){return this.playerCurrentTime-this.startsAt}set currentTime(t){this.seek(t)}get sourceElements(){return Array.from(this.audioElement.querySelectorAll("source"))}changeSource(t,e){this.id=e,this.src=t,this.audioElement.innerHTML=(0,i.sourceElementHTML)(this.src),this.audioElement.load(),this.setElementsAttributes(),this.stop()}playWithoutTriggerEvents(){var t=this.audioElement.play();return void 0!==t&&t.then((t=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.audioElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("audio-component-playing"),this._divBlockInteraction.classList.add("audio-component-playing"),this._container.classList.remove("audio-component-paused"),this._divBlockInteraction.classList.remove("audio-component-paused")}setClassesPaused(){this._container.classList.add("audio-component-paused"),this._divBlockInteraction.classList.add("audio-component-paused"),this._container.classList.remove("audio-component-playing"),this._divBlockInteraction.classList.remove("audio-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.audioElement.currentTime=this.startsAt,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.audioElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.audioElement.volume=1,this.callEventsByName("onunmute",this),this}seek(t,e){return this.playerCurrentTime=t,this.callEventsByName("onseek",this),this}get dimensions(){return(0,o.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(t){const e=(0,o.createInvisibleDivAboveParent)({parentElement:t._container,id:`invisibleDivBlockInteraction${t._container.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("audio-component-div-block-interaction"),e}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createAudioComponentOnBody(t){const e=await new a.AudioComponentFactory(t.src).buildOnBody();return new c({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}static async createAudioComponent(t){if(t.container===document.body||!t.container)return this.createAudioComponentOnBody(t);const e=await new a.AudioComponentFactory(t.src).build(t.container);return new c({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}}},6555:(t,e,n)=>{n.d(e,{AudioComponentFactory:()=>s});var i=n(7353),o=n(6401);class s extends o.ComponentContainer{constructor(t,e){super("audioComponent",(0,i.createInvisiblePlayer)([t],e))}async buildSubComponents(t){}}},6401:(t,e,n)=>{n.d(e,{ComponentContainer:()=>i});class i{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(t,e){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw new Error("Invalid template for scene component. Template id: "+e);this.templateElement=t}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(e),document.body.appendChild(this.templateElement);this.componentName=t}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(t,e){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let n=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,n+1),await t.build(e,`${this.componentName}${t.componentName.capitalizeFirstLetter()}${n}`)}async buildOnBody(t){this._element=document.createElement("div"),t&&(this._element.id=t);for(let t of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",t);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${t}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(t,e){for(let e of this.getTemplateCloneNodes())t.insertAdjacentElement("afterbegin",e);return await this.buildSubComponents(t),t}}},2560:(t,e,n)=>{n.d(e,{S:()=>o});var i=n(7930);class o extends i.ObjectEventListener{constructor(){super()}}},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},7930:(t,e,n)=>{n.d(e,{ObjectEventListener:()=>i});class i{eventsByName=new Map;addEventListener(t,e){const n={id:crypto.randomUUID(),event:e};return this.eventsByName.has(t.toLowerCase())?(this.eventsByName.get(t.toLowerCase()).push(n),n.id):(this.eventsByName.set(t.toLowerCase(),[n]),n.id)}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}removeEventById(t){this.eventsByName.forEach(((e,n)=>{this.eventsByName.set(n,e.filter((e=>e.id!==t)))}))}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t.event(...e)))}}},7353:(t,e,n)=>{n.r(e),n.d(e,{audioElementHTML:()=>l,createAudioComponentOnBody:()=>r,createInvisiblePlayer:()=>a,playButtonCSS:()=>u,sourceElementHTML:()=>c}),n(2976);var i=n(1319),o=n(3164),s=n(173);async function r(t){return await s.AudioComponent.createAudioComponentOnBody(t)}function a(t,e){const n=(0,i.getElementFromHTML)(l(t,e));return document.body.insertAdjacentElement("afterbegin",n),(0,i.hideElement)(n),n}function l(t,e){return`<audio controls ${e?function(t){return` ${t.id?'id="'+t.id+'"':""} ${t.autoPlay||t.autoplay?"autoplay":""} ${t.muted?"muted":""} ${t.loop?"loop":""} ${t.preload?'preload="'+t.preload+'"':""}`.trimEnd()}(e):""}>\n    ${t.map((t=>c(t))).reduce(((t,e)=>t+e),"")}\n  </audio>`}function c(t){return`<source src="${t}" type="audio/${(0,o.getFileExtension)(t)}">`}function u(){return"\n    .play-button {\n      margin: 0;\n      padding: 0;\n      display: flex;\n      border: 0;\n      background: transparent;\n      box-sizing: border-box;\n      width: 0;\n      height: 34px;\n      border-color: transparent transparent transparent #202020;\n      transition: 100ms all ease;\n      cursor: pointer;\n      border-style: double;\n      border-width: 0px 0 0px 30px;\n    }\n\n    .play-button.paused {\n      border-style: solid;\n      border-width: 23px 0px 23px 34px;\n    }\n\n    .play-button:hover {\n      border-color: transparent transparent transparent #404040;\n    }\n  "}},1319:(t,e,n)=>{n.d(e,{createInvisibleDivAboveParent:()=>c,getElementDimensions:()=>l,getElementFromHTML:()=>a,hideElement:()=>u,setAttributeListForElement:()=>r});const i=new Map,o=new Map,s=new Map;function r(t,e){e.forEach((([e,n])=>{t.setAttribute(e,n)}))}function a(t,e=!0){if(!(t=e?t.trim():t))return null;const n=document.createElement("template");n.innerHTML=t;const i=n.content.children;return 1===i.length?i[0]:Array.from(i)}function l(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function c({parentElement:t,id:e,position:n,dimensions:i}){var o=document.createElement("div");return t.style.position||(t.style.position="relative"),o.id=e,o.style.position="absolute",o.style.width=i&&i.width?i.width.toString()+"px":"100%",o.style.height=i&&i.height?i.height.toString()+"px":"100%",o.style.top=(n?.top.toString()??"0")+"px",o.style.left=(n?.left.toString()??"0")+"px",o.style.opacity="0",o.style.pointerEvents="auto",t.appendChild(o),o}function u(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of i)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of o)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of s)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},3164:(t,e,n)=>{n.d(e,{getFileExtension:()=>s,removeFilePath:()=>o});var i=n(2843);function o(t){const e=/(?:.*[\\/])([^\\/]+)$/.exec(t);return e&&e.length>1?e[1]:t}function s(t){if((0,i.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const n=t.split("/").pop();return n&&n!==t?n:""}},2843:(t,e,n)=>{function i(t){return"string"!=typeof t||!t||""===t}function o(t){return t.replace(/%20/g," ")}n.d(e,{isNullOrEmpty:()=>i,replacePercentEncoding:()=>o})}},e={};function n(i){var o=e[i];if(void 0!==o)return o.exports;var s=e[i]={exports:{}};return t[i](s,s.exports,n),s.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i=n(7353);AudioTools=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
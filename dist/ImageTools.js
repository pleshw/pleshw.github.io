var ImageTools; (() => { "use strict"; var t = { 437: (t, e, n) => { n.d(e, { ColorRGBA: () => a }); var r = n(739); class a { r; g; b; a; constructor(t, e, n, a = 1) { this.r = (0, r.clamp)(t, 0, 255), this.g = (0, r.clamp)(e, 0, 255), this.b = (0, r.clamp)(n, 0, 255), this.a = (0, r.clamp)(a, 0, 255) } toString() { return `${ this.r }, ${ this.g }, ${ this.b }, ${ this.a }` } toStringWithoutAlpha() { return `${ this.r }, ${ this.g }, ${ this.b }` } asArray({ noAlpha: t = !1 } = {}) { return t ? [this.r, this.g, this.b] : [this.r, this.g, this.b, this.a] } getCopy() { return new a(this.r, this.g, this.b, this.a) } static increaseSaturation(t, e) { e /= 100; const n = Math.max(...t.asArray({ noAlpha: !0 })), a = t.getCopy(); return a.r = Math.floor((0, r.clamp)(t.r === n ? t.r + t.r * e : t.r - t.r * e, 0, 255)), a.g = Math.floor((0, r.clamp)(t.g === n ? t.g + t.g * e : t.g - t.g * e, 0, 255)), a.b = Math.floor((0, r.clamp)(t.b === n ? t.b + t.b * e : t.b - t.b * e, 0, 255)), a } static getUnique(t, e = !0) { return t.filter(((t, e, n) => n.findIndex((e => JSON.stringify(t) === JSON.stringify(e))) === e)).filter((t => !e || a.isValid(t) && t.a > 0)) } *[Symbol.iterator]() { yield this.r, yield this.g, yield this.b, yield this.a } equals(t) { return this.r === t.r && this.g === t.g && this.b === t.b && this.a === t.a } static isValid(t) { return !("number" != typeof t.r || Number.isNaN(t.r) || "number" != typeof t.g || Number.isNaN(t.g) || "number" != typeof t.b || Number.isNaN(t.b) || "number" != typeof t.a || Number.isNaN(t.a)) } static get BLACK() { return new a(0, 0, 0) } static get NULL() { return new a(0, 0, 0, 0) } } }, 8: (t, e, n) => { n.d(e, { getColorPaletteByContext: () => o }); var r = n(398), a = n(437); function i(t, e) { return new a.ColorRGBA(e[t], e[t + 1], e[t + 2], e[t + 3] / 255) } function o(t, e = 0) { return s(function (t, e = 4) { const n = t.getImageData(0, 0, t.canvas.width, t.canvas.height).data, r = []; for (var a = n.length; a >= 0; a -= e)r.push(i(a, n)); return r }(t), e) } function s(t, e = 0) { if (6 === e || 0 === t.length) { const e = t.reduce(((t, e) => a.ColorRGBA.isValid(t) && a.ColorRGBA.isValid(e) ? (a.ColorRGBA.isValid(e) && (t.r += e.r, t.g += e.g, t.b += e.b, t.a += e.a), t) : a.ColorRGBA.NULL), a.ColorRGBA.NULL); return a.ColorRGBA.NULL.equals(e) ? [a.ColorRGBA.NULL] : [new a.ColorRGBA(Math.round(e.r / t.length), Math.round(e.g / t.length), Math.round(e.b / t.length), Math.round(e.a / t.length))] } const n = function (t) { let e = Number.MAX_VALUE, n = Number.MAX_VALUE, a = Number.MAX_VALUE, i = Number.MIN_VALUE, o = Number.MIN_VALUE, s = Number.MIN_VALUE; t.forEach((t => { e = Math.min(e, t.r), n = Math.min(n, t.g), a = Math.min(a, t.b), i = Math.max(i, t.r), o = Math.max(o, t.g), s = Math.max(s, t.b) })); const c = i - e, u = o - n, h = s - a, g = Math.max(c, u, h); return g === c ? r.COLOR_CHANNEL.R : g === u ? r.COLOR_CHANNEL.G : r.COLOR_CHANNEL.B }(t); t.sort(((t, e) => { switch (n) { case r.COLOR_CHANNEL.R: return t.r - e.r; case r.COLOR_CHANNEL.G: return t.g - e.g; case r.COLOR_CHANNEL.B: return t.b - e.b; default: return t.r - e.r } })); const i = t.length / 2; return a.ColorRGBA.getUnique([...s(t.slice(0, i), e + 1), ...s(t.slice(i + 1), e + 1)].filter((t => !t.equals(a.ColorRGBA.NULL)))) } }, 164: (t, e, n) => { n.d(e, { getFileExtension: () => a }); var r = n(843); function a(t) { if ((0, r.isNullOrEmpty)(t)) return ""; const e = t.split(".").pop(); if (e && e !== t) return e; const n = t.split("/").pop(); return n && n !== t ? n : "" } }, 739: (t, e, n) => { function r(t = 0, e = 0, n = 100) { return Math.max(e, Math.min(t, n)) } n.d(e, { clamp: () => r }) }, 843: (t, e, n) => { function r(t) { return "string" != typeof t || !t || "" === t } n.d(e, { isNullOrEmpty: () => r }) }, 398: (t, e, n) => { var r, a, i, o; n.d(e, { COLOR_CHANNEL: () => o }), function (t) { t[t.PIXEL = 0] = "PIXEL", t[t.PERCENTAGE = 1] = "PERCENTAGE" }(r || (r = {})), function (t) { t[t.HORIZONTAL = 0] = "HORIZONTAL", t[t.VERTICAL = 1] = "VERTICAL" }(a || (a = {})), function (t) { t[t.FROM_TOP = 0] = "FROM_TOP", t[t.FROM_BOTTOM = 1] = "FROM_BOTTOM" }(i || (i = {})), function (t) { t[t.R = 0] = "R", t[t.G = 1] = "G", t[t.B = 2] = "B", t[t.A = 3] = "A" }(o || (o = {})) } }, e = {}; function n(r) { var a = e[r]; if (void 0 !== a) return a.exports; var i = e[r] = { exports: {} }; return t[r](i, i.exports, n), i.exports } n.d = (t, e) => { for (var r in e) n.o(e, r) && !n.o(t, r) && Object.defineProperty(t, r, { enumerable: !0, get: e[r] }) }, n.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), n.r = t => { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }; var r = {}; (() => { n.r(r), n.d(r, { calculateAspectRatioFit: () => a, drawImageOnCanvas: () => m, getCanvasResizeImage: () => g, getGradientByImageInputId: () => f, getGradientByImageURL: () => y, getGradientFromPalette: () => b, getImageByBlob: () => c, getImageByInputId: () => s, getImageByURL: () => o, getImagePaletteByInputId: () => d, getImagePaletteByURL: () => l, getImageResizeDimensionsKeepAspectRatio: () => i, previewImage: () => w, resizeImage: () => C, resizeImageFromInput: () => u, resizeImageFromURL: () => h, setElementBackgroundGradientByCanvasContext: () => p }); var t = n(8), e = n(164); function a(t, e) { const n = Math.min(e.width / t.width, e.height / t.height); return { width: t.width * n, height: t.height * n } } function i({ srcDimensions: t, outputDimensions: e }) { if (e.width && e.width > 0) { const n = e.width / t.width; return { width: e.width, height: t.height * n } } if (e.height && e.height > 0) { const n = e.height / t.height; return { width: t.width * n, height: e.height } } return { width: t.width, height: t.height } } async function o(t) { return new Promise((async n => { const r = new Image; r.src = await fetch(t).then((t => t.blob())).then((t => URL.createObjectURL(t))), r.setAttribute("type", (0, e.getFileExtension)(t)), r.onload = () => { n(r) } })) } async function s(t) { return new Promise((async n => { const r = new Image; let a = document.getElementById(t).files; a && a.length > 0 && (r.src = URL.createObjectURL(a.item(0)), r.setAttribute("type", (0, e.getFileExtension)(a.item(0).type)), r.onload = () => { n(r) }) })) } async function c(t) { return new Promise((async e => { const n = new Image; return n.src = URL.createObjectURL(t), n.onload = () => { e(n) }, n })) } async function u(t, e) { return await s(t).then((t => C(t, e))) } async function h(t, e) { return await o(t).then((t => C(t, e))) } async function g(t, e, n) { const r = n && n.resultCanvasId && document.getElementById(n.resultCanvasId) || document.createElement("canvas"), a = n && n.resultCanvasContext ? n.resultCanvasContext : r.getContext("2d"), o = i({ srcDimensions: t, outputDimensions: e }); r.width = o.width, r.height = o.height; const s = n && n.resizeCanvasId && document.getElementById(n.resizeCanvasId) || document.createElement("canvas"), c = n && n.resizeCanvasContext ? n.resizeCanvasContext : r.getContext("2d"); return s.width = o.width, s.height = o.height, c.drawImage(t, 0, 0, s.width, s.height), c.drawImage(t, 0, 0, s.width, s.height), a.drawImage(s, 0, 0, s.width, s.height, 0, 0, r.width, r.height), { canvas: r, context: a } } async function l(e, n = 2) { const r = await o(e), a = (await m(r)).context; return (0, t.getColorPaletteByContext)(a, n) } async function d(e, n = 2) { const r = await s(e), a = (await m(r)).context; return (0, t.getColorPaletteByContext)(a, n) } async function m(t) { const e = document.createElement("canvas"); e.width = t.width, e.height = t.height; const n = e.getContext("2d", { alpha: !0, willReadFrequently: !0 }); return n.drawImage(t, 0, 0), { canvas: e, context: n } } async function y(t) { return b(await l(t)) } async function f(t) { return b(await d(t)) } function b(t) { return t.map((t => `rgba(${ t.toString() })`)).join(", ").trim() } function p(e, n) { const r = b((0, t.getColorPaletteByContext)(n, 2)); e.style.backgroundImage = `linear-gradient(${ r })` } async function C(t, e) { const n = (await g(t, e)).canvas; return new Promise((async e => { n.toBlob((t => e(t)), `image/${ t.getAttribute("type") || "png" }`) })) } function w({ defaultImageSrc: t, uploadImageInputId: e, previewImageElementId: n }) { let r; e && (r = document.getElementById(e).files); const a = document.getElementById(n); if (!r || r.length < 1) return a.src = t, void (a.style.cursor = "default"); { const t = URL.createObjectURL(r.item(0)); a.src = t, a.onclick = e => window.open(t, "_blank"), a.style.cursor = "pointer" } } })(), ImageTools = r })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLE1BQ05DLE1BQ0wsQ0FFTyxTQUFTQyxFQUE2Q0MsRUFBc0JDLEdBQ2pGLE1BQ01DLEVBQWFULEdBREUsSUFBQXJJLDBCQUEwQjZJLEVBQWUsSUFHOURELEVBQVFHLE1BQU1DLGdCQUFrQixtQkFBb0JGLElBQ3RELENBR096RCxlQUFlMkIsRUFBYXRCLEVBQXVCcUIsR0FDeEQsTUFBTWtDLFNBQTRCL0IsRUFBc0J4QixFQUFLcUIsSUFBcUJ6RyxPQUVsRixPQUFPLElBQUlrRixTQUFTSCxNQUFRSSxJQUMxQndELEVBQWtCQyxRQUFRM0wsR0FBS2tJLEVBQVNsSSxJQUFNLFNBQVVtSSxFQUFJeUQsYUFBYyxTQUFZLFFBQVUsR0FFcEcsQ0FFTyxTQUFTQyxHQUFjLGdCQUFFQyxFQUFlLG1CQUFFQyxFQUFrQixzQkFBRUMsSUFDbkUsSUFBSWhELEVBQ0MrQyxJQUNIL0MsRUFBYUMsU0FBU0MsZUFBZ0I2QyxHQUEyQzVDLE9BR25GLE1BQU04QyxFQUFzQmhELFNBQVNDLGVBQWdCOEMsR0FFckQsSUFBTWhELEdBQVlBLEVBQVM1RixPQUFTLEVBR2xDLE9BRkE2SSxFQUFvQjVELElBQU15RCxPQUMxQkcsRUFBb0JULE1BQU1VLE9BQVMsV0FFOUIsQ0FDTCxNQUFNQyxFQUFVekQsSUFBSUMsZ0JBQWlCSyxFQUFTSSxLQUFNLElBQ3BENkMsRUFBb0I1RCxJQUFNOEQsRUFDMUJGLEVBQW9CRyxRQUFVQyxHQUFLQyxPQUFPQyxLQUFNSixFQUFTLFVBQ3pERixFQUFvQlQsTUFBTVUsT0FBUyxTQUNyQyxDQUNGLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRXh0cmFzL0NvbG9yUkdCQS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVG9vbHMvQ2FudmFzVG9vbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xzL0ZpbGVUb29scy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVG9vbHMvTWF0aFRvb2xzLnRzIiwid2VicGFjazovLy8uL3NyYy9Ub29scy9TdHJpbmdUb29scy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVHlwZXMudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xzL0ltYWdlVG9vbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi9Ub29scy9NYXRoVG9vbHMnO1xyXG5pbXBvcnQgeyBDb21wYXJhYmxlIH0gZnJvbSAnLi4vVHlwZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbG9yUkdCQSBpbXBsZW1lbnRzIENvbXBhcmFibGU8Q29sb3JSR0JBPiB7XHJcbiAgcHVibGljIHI6IG51bWJlcjtcclxuICBwdWJsaWMgZzogbnVtYmVyO1xyXG4gIHB1YmxpYyBiOiBudW1iZXI7XHJcbiAgcHVibGljIGE6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoIHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE6IG51bWJlciA9IDEgKSB7XHJcbiAgICB0aGlzLnIgPSBjbGFtcCggciwgMCwgMjU1ICk7XHJcbiAgICB0aGlzLmcgPSBjbGFtcCggZywgMCwgMjU1ICk7XHJcbiAgICB0aGlzLmIgPSBjbGFtcCggYiwgMCwgMjU1ICk7XHJcbiAgICB0aGlzLmEgPSBjbGFtcCggYSwgMCwgMjU1ICk7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAkeyB0aGlzLnIgfSwgJHsgdGhpcy5nIH0sICR7IHRoaXMuYiB9LCAkeyB0aGlzLmEgfWA7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZ1dpdGhvdXRBbHBoYSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAkeyB0aGlzLnIgfSwgJHsgdGhpcy5nIH0sICR7IHRoaXMuYiB9YDtcclxuICB9XHJcblxyXG4gIGFzQXJyYXkoIHsgbm9BbHBoYSA9IGZhbHNlIH06IHsgbm9BbHBoYT86IGJvb2xlYW47IH0gPSB7fSApOiBudW1iZXJbXSB7XHJcbiAgICBpZiAoIG5vQWxwaGEgKSB7XHJcbiAgICAgIHJldHVybiBbdGhpcy5yLCB0aGlzLmcsIHRoaXMuYl07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW3RoaXMuciwgdGhpcy5nLCB0aGlzLmIsIHRoaXMuYV07XHJcbiAgfVxyXG5cclxuICBnZXRDb3B5KCkge1xyXG4gICAgcmV0dXJuIG5ldyBDb2xvclJHQkEoIHRoaXMuciwgdGhpcy5nLCB0aGlzLmIsIHRoaXMuYSApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGluY3JlYXNlU2F0dXJhdGlvbiggY29sb3I6IENvbG9yUkdCQSwgcGVyY2VudGFnZTogbnVtYmVyICkge1xyXG4gICAgcGVyY2VudGFnZSA9IHBlcmNlbnRhZ2UgLyAxMDA7XHJcblxyXG4gICAgY29uc3QgbWF4VmFsdWUgPSBNYXRoLm1heCggLi4uY29sb3IuYXNBcnJheSggeyBub0FscGhhOiB0cnVlIH0gKSApO1xyXG4gICAgY29uc3QgY29weUNvbG9yID0gY29sb3IuZ2V0Q29weSgpO1xyXG5cclxuICAgIGNvcHlDb2xvci5yID0gTWF0aC5mbG9vciggY2xhbXAoIGNvbG9yLnIgPT09IG1heFZhbHVlID8gY29sb3IuciArICggY29sb3IuciAqIHBlcmNlbnRhZ2UgKSA6IGNvbG9yLnIgLSAoIGNvbG9yLnIgKiBwZXJjZW50YWdlICksIDAsIDI1NSApICk7XHJcbiAgICBjb3B5Q29sb3IuZyA9IE1hdGguZmxvb3IoIGNsYW1wKCBjb2xvci5nID09PSBtYXhWYWx1ZSA/IGNvbG9yLmcgKyAoIGNvbG9yLmcgKiBwZXJjZW50YWdlICkgOiBjb2xvci5nIC0gKCBjb2xvci5nICogcGVyY2VudGFnZSApLCAwLCAyNTUgKSApO1xyXG4gICAgY29weUNvbG9yLmIgPSBNYXRoLmZsb29yKCBjbGFtcCggY29sb3IuYiA9PT0gbWF4VmFsdWUgPyBjb2xvci5iICsgKCBjb2xvci5iICogcGVyY2VudGFnZSApIDogY29sb3IuYiAtICggY29sb3IuYiAqIHBlcmNlbnRhZ2UgKSwgMCwgMjU1ICkgKTtcclxuXHJcbiAgICByZXR1cm4gY29weUNvbG9yO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFVuaXF1ZSggYXJyOiBDb2xvclJHQkFbXSwgcmVtb3ZlVHJhbnNwYXJlbnRQaXhlbHM6IGJvb2xlYW4gPSB0cnVlICkge1xyXG4gICAgcmV0dXJuIGFyclxyXG4gICAgICAuZmlsdGVyKCAoIHYsIGksIGEgKSA9PiBhLmZpbmRJbmRleCggdjIgPT4gKCBKU09OLnN0cmluZ2lmeSggdiApID09PSBKU09OLnN0cmluZ2lmeSggdjIgKSApICkgPT09IGkgKVxyXG4gICAgICAuZmlsdGVyKCBjID0+ICFyZW1vdmVUcmFuc3BhcmVudFBpeGVscyB8fCAoIENvbG9yUkdCQS5pc1ZhbGlkKCBjICkgJiYgYy5hID4gMCApICk7XHJcbiAgfVxyXG5cclxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XHJcbiAgICB5aWVsZCB0aGlzLnI7XHJcbiAgICB5aWVsZCB0aGlzLmc7XHJcbiAgICB5aWVsZCB0aGlzLmI7XHJcbiAgICB5aWVsZCB0aGlzLmE7XHJcbiAgfVxyXG5cclxuICBlcXVhbHMoIGNvbG9yMjogQ29sb3JSR0JBICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuciA9PT0gY29sb3IyLnJcclxuICAgICAgJiYgdGhpcy5nID09PSBjb2xvcjIuZ1xyXG4gICAgICAmJiB0aGlzLmIgPT09IGNvbG9yMi5iXHJcbiAgICAgICYmIHRoaXMuYSA9PT0gY29sb3IyLmE7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNWYWxpZCggY29sb3I6IENvbG9yUkdCQSApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0eXBlb2YgY29sb3IuciA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTiggY29sb3IuciApXHJcbiAgICAgICYmIHR5cGVvZiBjb2xvci5nID09PSAnbnVtYmVyJyAmJiAhTnVtYmVyLmlzTmFOKCBjb2xvci5nIClcclxuICAgICAgJiYgdHlwZW9mIGNvbG9yLmIgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNOYU4oIGNvbG9yLmIgKVxyXG4gICAgICAmJiB0eXBlb2YgY29sb3IuYSA9PT0gJ251bWJlcicgJiYgIU51bWJlci5pc05hTiggY29sb3IuYSApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBCTEFDSygpOiBDb2xvclJHQkEge1xyXG4gICAgcmV0dXJuIG5ldyBDb2xvclJHQkEoIDAsIDAsIDAgKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgTlVMTCgpOiBDb2xvclJHQkEge1xyXG4gICAgcmV0dXJuIG5ldyBDb2xvclJHQkEoIDAsIDAsIDAsIDAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUG9pbnQyRCB9IGZyb20gJy4vTWF0aFRvb2xzJztcclxuaW1wb3J0IHsgQ09MT1JfQ0hBTk5FTCB9IGZyb20gJy4uL1R5cGVzJztcclxuaW1wb3J0IHsgQ29sb3JSR0JBIH0gZnJvbSBcIi4uL0V4dHJhcy9Db2xvclJHQkFcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQaXhlbFBvc2l0aW9uQnlDYW52YXNXaWR0aCggcGl4ZWxJbmRleDogbnVtYmVyLCBjYW52YXNXaWR0aDogbnVtYmVyLCBudW1iZXJPZkNvbG9yQ2hhbm5lbHM6IG51bWJlciA9IDQgKTogUG9pbnQyRCB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6ICggcGl4ZWxJbmRleCAvIG51bWJlck9mQ29sb3JDaGFubmVscyApICUgY2FudmFzV2lkdGgsXHJcbiAgICB5OiBNYXRoLmZsb29yKCBNYXRoLmZsb29yKCBwaXhlbEluZGV4IC8gY2FudmFzV2lkdGggKSAvIG51bWJlck9mQ29sb3JDaGFubmVscyApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGl4ZWxDb2xvckZyb21DYW52YXMoIHBpeGVsSW5kZXg6IG51bWJlciwgcGl4ZWxBcnJheTogVWludDhDbGFtcGVkQXJyYXkgKTogQ29sb3JSR0JBIHtcclxuICByZXR1cm4gbmV3IENvbG9yUkdCQShcclxuICAgIHBpeGVsQXJyYXlbcGl4ZWxJbmRleF0sXHJcbiAgICBwaXhlbEFycmF5W3BpeGVsSW5kZXggKyAxXSxcclxuICAgIHBpeGVsQXJyYXlbcGl4ZWxJbmRleCArIDJdLFxyXG4gICAgcGl4ZWxBcnJheVtwaXhlbEluZGV4ICsgM10gLyAyNTUgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9yQXJyYXlCeUNvbnRleHQoIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgbnVtYmVyT2ZDb2xvckNoYW5uZWxzOiBudW1iZXIgPSA0ICk6IENvbG9yUkdCQVtdIHtcclxuICBjb25zdCBwaXhlbEFycmF5ID0gY29udGV4dFxyXG4gICAgLmdldEltYWdlRGF0YSggMCwgMCwgY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodCApXHJcbiAgICAuZGF0YTtcclxuXHJcbiAgY29uc3QgY29sb3JBcnJheTogQ29sb3JSR0JBW10gPSBbXTtcclxuICBmb3IgKCB2YXIgaSA9IHBpeGVsQXJyYXkubGVuZ3RoOyBpID49IDA7IGkgLT0gbnVtYmVyT2ZDb2xvckNoYW5uZWxzICkge1xyXG4gICAgY29sb3JBcnJheS5wdXNoKCBnZXRQaXhlbENvbG9yRnJvbUNhbnZhcyggaSwgcGl4ZWxBcnJheSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY29sb3JBcnJheTtcclxufVxyXG5cclxuLy8vIEZpbmQgdGhlIGNvbG9yIGNoYW5uZWwgKCByZWQsIGdyZWVuIG9yIGJsdWUpIGluIHRoZSBpbWFnZSB3aXRoIHRoZSBiaWdnZXN0IHJhbmdlXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQmlnZ2VzdENvbG9yUmFuZ2UoIHJnYlZhbHVlczogQ29sb3JSR0JBW10gKSB7XHJcbiAgbGV0IHJNaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gIGxldCBnTWluID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuICBsZXQgYk1pbiA9IE51bWJlci5NQVhfVkFMVUU7XHJcblxyXG4gIGxldCByTWF4ID0gTnVtYmVyLk1JTl9WQUxVRTtcclxuICBsZXQgZ01heCA9IE51bWJlci5NSU5fVkFMVUU7XHJcbiAgbGV0IGJNYXggPSBOdW1iZXIuTUlOX1ZBTFVFO1xyXG5cclxuICByZ2JWYWx1ZXMuZm9yRWFjaCggKCBwaXhlbCApID0+IHtcclxuICAgIHJNaW4gPSBNYXRoLm1pbiggck1pbiwgcGl4ZWwuciApO1xyXG4gICAgZ01pbiA9IE1hdGgubWluKCBnTWluLCBwaXhlbC5nICk7XHJcbiAgICBiTWluID0gTWF0aC5taW4oIGJNaW4sIHBpeGVsLmIgKTtcclxuXHJcbiAgICByTWF4ID0gTWF0aC5tYXgoIHJNYXgsIHBpeGVsLnIgKTtcclxuICAgIGdNYXggPSBNYXRoLm1heCggZ01heCwgcGl4ZWwuZyApO1xyXG4gICAgYk1heCA9IE1hdGgubWF4KCBiTWF4LCBwaXhlbC5iICk7XHJcbiAgfSApO1xyXG5cclxuICBjb25zdCByUmFuZ2UgPSByTWF4IC0gck1pbjtcclxuICBjb25zdCBnUmFuZ2UgPSBnTWF4IC0gZ01pbjtcclxuICBjb25zdCBiUmFuZ2UgPSBiTWF4IC0gYk1pbjtcclxuXHJcbiAgY29uc3QgYmlnZ2VzdFJhbmdlID0gTWF0aC5tYXgoIHJSYW5nZSwgZ1JhbmdlLCBiUmFuZ2UgKTtcclxuICBpZiAoIGJpZ2dlc3RSYW5nZSA9PT0gclJhbmdlICkge1xyXG4gICAgcmV0dXJuIENPTE9SX0NIQU5ORUwuUjtcclxuICB9IGVsc2UgaWYgKCBiaWdnZXN0UmFuZ2UgPT09IGdSYW5nZSApIHtcclxuICAgIHJldHVybiBDT0xPUl9DSEFOTkVMLkc7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBDT0xPUl9DSEFOTkVMLkI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sb3JQYWxldHRlQnlDb250ZXh0KCBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGRlcHRoOiBudW1iZXIgPSAwICk6IENvbG9yUkdCQVtdIHtcclxuICByZXR1cm4gZ2V0Q29sb3JQYWxldHRlKCBnZXRDb2xvckFycmF5QnlDb250ZXh0KCBjb250ZXh0ICksIGRlcHRoICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvclBhbGV0dGUoIHJnYlZhbHVlczogQ29sb3JSR0JBW10sIGRlcHRoOiBudW1iZXIgPSAwICk6IENvbG9yUkdCQVtdIHtcclxuICAvLy8gVHJhbnNmb3JtYW5kbyBlc3NhIHBhcnRlIGRhIGFycmF5IGRlIGNvcmVzIGVtIHbDoXJpb3MgXCJyYW5nZXNcIiBkZSBjb3JlcyBkaWZlcmVudGVzXHJcbiAgY29uc3QgTUFYX0RFUFRIID0gNjtcclxuICBpZiAoIGRlcHRoID09PSBNQVhfREVQVEggfHwgcmdiVmFsdWVzLmxlbmd0aCA9PT0gMCApIHtcclxuICAgIGNvbnN0IGNvbG9yID0gcmdiVmFsdWVzLnJlZHVjZShcclxuICAgICAgKCBwcmV2LCBjdXJyICkgPT4ge1xyXG4gICAgICAgIGlmICggIUNvbG9yUkdCQS5pc1ZhbGlkKCBwcmV2ICkgfHwgIUNvbG9yUkdCQS5pc1ZhbGlkKCBjdXJyICkgKSB7XHJcbiAgICAgICAgICByZXR1cm4gQ29sb3JSR0JBLk5VTEw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIENvbG9yUkdCQS5pc1ZhbGlkKCBjdXJyICkgKSB7XHJcbiAgICAgICAgICBwcmV2LnIgKz0gY3Vyci5yO1xyXG4gICAgICAgICAgcHJldi5nICs9IGN1cnIuZztcclxuICAgICAgICAgIHByZXYuYiArPSBjdXJyLmI7XHJcbiAgICAgICAgICBwcmV2LmEgKz0gY3Vyci5hO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgIH0sXHJcbiAgICAgIENvbG9yUkdCQS5OVUxMXHJcbiAgICApO1xyXG4gICAgaWYgKCAhQ29sb3JSR0JBLk5VTEwuZXF1YWxzKCBjb2xvciApICkge1xyXG4gICAgICByZXR1cm4gW25ldyBDb2xvclJHQkEoXHJcbiAgICAgICAgTWF0aC5yb3VuZCggY29sb3IuciAvIHJnYlZhbHVlcy5sZW5ndGggKSxcclxuICAgICAgICBNYXRoLnJvdW5kKCBjb2xvci5nIC8gcmdiVmFsdWVzLmxlbmd0aCApLFxyXG4gICAgICAgIE1hdGgucm91bmQoIGNvbG9yLmIgLyByZ2JWYWx1ZXMubGVuZ3RoICksXHJcbiAgICAgICAgTWF0aC5yb3VuZCggY29sb3IuYSAvIHJnYlZhbHVlcy5sZW5ndGggKVxyXG4gICAgICApXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBbQ29sb3JSR0JBLk5VTExdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8vIEVuY29udHJhbmRvIG8gY2FuYWwgZGUgY29yIHF1ZSBtYWlzIGFwYXJlY2VcclxuICBjb25zdCBjb21wb25lbnRUb1NvcnRCeSA9IGZpbmRCaWdnZXN0Q29sb3JSYW5nZSggcmdiVmFsdWVzICk7XHJcblxyXG4gIC8vLyBPcmRlbmFuZG8gYSBhcnJheSBwZWxvIGNhbmFsIGRlIGNvciBwcmVkb21pbmFudGVcclxuICByZ2JWYWx1ZXMuc29ydCggKCBwMSwgcDIgKSA9PiB7XHJcbiAgICBzd2l0Y2ggKCBjb21wb25lbnRUb1NvcnRCeSApIHtcclxuICAgICAgY2FzZSBDT0xPUl9DSEFOTkVMLlI6XHJcbiAgICAgICAgcmV0dXJuIHAxLnIgLSBwMi5yXHJcbiAgICAgIGNhc2UgQ09MT1JfQ0hBTk5FTC5HOlxyXG4gICAgICAgIHJldHVybiBwMS5nIC0gcDIuZ1xyXG4gICAgICBjYXNlIENPTE9SX0NIQU5ORUwuQjpcclxuICAgICAgICByZXR1cm4gcDEuYiAtIHAyLmJcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gcDEuciAtIHAyLnJcclxuICAgIH1cclxuICB9ICk7XHJcblxyXG4gIC8vLyBEaXZpZGluZG8gYSBhcnJheSBlbSBkb2lzIGUgdXNhbmRvIHJlY3Vyc8OjbyBwYXJhIG1lbGhvcmFyIG8gZGVzZW1wZW5ob1xyXG4gIGNvbnN0IG1pZCA9IHJnYlZhbHVlcy5sZW5ndGggLyAyO1xyXG4gIHJldHVybiBDb2xvclJHQkEuZ2V0VW5pcXVlKCBbXHJcbiAgICAuLi5nZXRDb2xvclBhbGV0dGUoIHJnYlZhbHVlcy5zbGljZSggMCwgbWlkICksIGRlcHRoICsgMSApLFxyXG4gICAgLi4uZ2V0Q29sb3JQYWxldHRlKCByZ2JWYWx1ZXMuc2xpY2UoIG1pZCArIDEgKSwgZGVwdGggKyAxICksXHJcbiAgXS5maWx0ZXIoIGMgPT4gIWMuZXF1YWxzKCBDb2xvclJHQkEuTlVMTCApICkgKTtcclxufSIsIlxyXG4vLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYyNDU3NjcvY3JlYXRpbmctYS1ibG9iLWZyb20tYS1iYXNlNjQtc3RyaW5nLWluLWphdmFzY3JpcHRcclxuLy8vIERpdmlkZSB1bSBhcnF1aXZvIGJpbsOhcmlvIGVtIHbDoXJpYXMgcGFydGVzLCBwYXJhIHF1ZSBhIGNvbnZlcnPDo28gc2VqYSBvdGltaXphZGEsIGUgcmV0b3JuYSB1bWEgYmxvYiBjb20gbyBhcnF1aXZvXHJcblxyXG5pbXBvcnQgeyBpc051bGxPckVtcHR5IH0gZnJvbSAnLi9TdHJpbmdUb29scyc7XHJcblxyXG4vLy8gQHBhcmFtIG9uUHJvZ3Jlc3NvIFVtIGNhbGxiYWNrIHF1ZSByZWNlYmUgYSBwb3JjZW50YWdlbSBkZSBwcm9ncmVzc28gYXR1YWwgZGEgY29udmVyc8Ojb1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYmFzZTY0VG9CbG9iKCB0ZXh0b0Jhc2U2NDogc3RyaW5nLCBjb250ZW50VHlwZTogc3RyaW5nLCB0YW1hbmhvUGFydGVzID0gMTAyNCwgb25Qcm9ncmVzcyA9ICggcHJvZ3Jlc3NvQXR1YWw6IG51bWJlciApID0+IHsgY29uc29sZS5sb2coIHByb2dyZXNzb0F0dWFsICkgfSApIHtcclxuICBjb25zdCBieXRlQXJyYXlzID0gbmV3IEFycmF5PFVpbnQ4QXJyYXk+KCk7XHJcbiAgY29uc3QgZmlsZVNpemUgPSB0ZXh0b0Jhc2U2NC5sZW5ndGg7XHJcblxyXG4gIC8vLyBwcmVlbmNoZSBgYnl0ZUFycmF5c2AgY29tIG9zIGJ5dGVzIGRvIGFycXVpdm8gcGVnYW5kbyB1bWEgcGFydGUgZGUgXCJ0YW1hbmhvUGFydGVzXCIgcG9yIHZlelxyXG4gIGZvciAoIGxldCBvZmZzZXQgPSAwOyBvZmZzZXQgPCBmaWxlU2l6ZTsgb2Zmc2V0ICs9IHRhbWFuaG9QYXJ0ZXMgKSB7XHJcbiAgICAvLy8gcGVnYW5kbyB1bSBwYXJ0ZSBkZSB0YW1hbmhvIHt0YW1hbmhvUGFydGVzfSBkbyBhcnF1aXZvXHJcbiAgICBjb25zdCBjaHVuayA9IHRleHRvQmFzZTY0LnNsaWNlKCBvZmZzZXQsIG9mZnNldCArIHRhbWFuaG9QYXJ0ZXMgKTtcclxuXHJcbiAgICAvLy8gY29udmVydGVuZG8gYSBwYXJ0ZSBlbSB1bSBhcnJheSBjb20gY2FkYSBieXRlIGRlc3NlIHBlZGHDp28gZG8gYXJxdWl2b1xyXG4gICAgY29uc3QgYXJyQnl0ZXNDaHVuayA9IG5ldyBBcnJheTxudW1iZXI+KCBjaHVuay5sZW5ndGggKTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGNodW5rLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBhcnJCeXRlc0NodW5rW2ldID0gY2h1bmsuY2hhckNvZGVBdCggaSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLyB0cmFuc2Zvcm1hbmRvIGVzc2UgYXJyYXkgZW0gdW0gYXJyYXkgY29tIGNhbXBvcyBkbyB0YW1hbmhvIGRlIHVtIGJ5dGVcclxuICAgIC8vLyBlIHVuaW5kbyBhcyBwYXJ0ZXMgasOhIGNvbmNsdcOtZGFzIGRvIGFycXVpdm9cclxuICAgIGJ5dGVBcnJheXMucHVzaCggbmV3IFVpbnQ4QXJyYXkoIGFyckJ5dGVzQ2h1bmsgKSApO1xyXG5cclxuICAgIC8vLyBDaGFtYW5kbyBjYWxsYmFjayBxdWUgZXhpYmUgbyBwcm9ncmVzc28gcXVhbmRvIG8gcGFzc28gYXR1YWwgZm9yIGNvbmNsdcOtZG9cclxuICAgIGF3YWl0IG9uUHJvZ3Jlc3MoICggb2Zmc2V0IC8gZmlsZVNpemUgKSAqIDEwMCApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ldyBCbG9iKCBieXRlQXJyYXlzLCB7IHR5cGU6IGNvbnRlbnRUeXBlIH0gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkRmlsZUZyb21CbG9iKCBibG9iOiBCbG9iLCB0aXRsZTogc3RyaW5nICkge1xyXG4gIGxldCBmaWxlID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggYmxvYiApO1xyXG5cclxuICBpZiAoIGZpbGUgKSB7XHJcbiAgICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdhJyApO1xyXG4gICAgYS5ocmVmID0gZmlsZTtcclxuICAgIGEuZG93bmxvYWQgPSB0aXRsZTtcclxuICAgIGEuY2xpY2soKTtcclxuICAgIGEucmVtb3ZlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsZUV4dGVuc2lvbiggZmlsZU5hbWU6IHN0cmluZyApOiBzdHJpbmcge1xyXG4gIGlmICggaXNOdWxsT3JFbXB0eSggZmlsZU5hbWUgKSApIHJldHVybiAnJztcclxuXHJcbiAgY29uc3QgZGVmYXVsdEZpbGVTcmMgPSBmaWxlTmFtZS5zcGxpdCggJy4nICkucG9wKCk7XHJcbiAgaWYgKCBkZWZhdWx0RmlsZVNyYyAmJiBkZWZhdWx0RmlsZVNyYyAhPT0gZmlsZU5hbWUgKSB7XHJcbiAgICByZXR1cm4gZGVmYXVsdEZpbGVTcmM7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmaWxlVHlwZVN0ciA9IGZpbGVOYW1lLnNwbGl0KCAnLycgKS5wb3AoKTtcclxuICBpZiAoIGZpbGVUeXBlU3RyICYmIGZpbGVUeXBlU3RyICE9PSBmaWxlTmFtZSApIHtcclxuICAgIHJldHVybiBmaWxlVHlwZVN0cjtcclxuICB9XHJcblxyXG4gIHJldHVybiAnJztcclxufSIsImV4cG9ydCBjb25zdCByZWdleE51bWJlclBhdHRlcm4gPSAvLT9cXGQrXFwuP1xcZCovZztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnQyRCB7XHJcbiAgeDogbnVtYmVyO1xyXG4gIHk6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEaW1lbnNpb25zIHtcclxuICB3aWR0aDogbnVtYmVyO1xyXG4gIGhlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhUb1JvdyggaW5kZXg6IG51bWJlciwgZ3JpZFdpZHRoOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoIGluZGV4IC8gZ3JpZFdpZHRoICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmRleFRvQ29sKCBpbmRleDogbnVtYmVyLCBncmlkV2lkdGg6IG51bWJlciApIHtcclxuICByZXR1cm4gaW5kZXggJSBncmlkV2lkdGg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3dDb2xUb0luZGV4KCByb3c6IG51bWJlciwgY29sOiBudW1iZXIsIHdpZHRoOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuICggcm93ICogd2lkdGggKSArIGNvbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUNvb3JkaW5hdGVzRnJvbVBvaW50MkQoIGNvb3JkczogUG9pbnQyRCwgYW5nbGU6IG51bWJlciApOiBQb2ludDJEIHtcclxuICBjb25zdCByYWRpYW5zID0gKCBNYXRoLlBJIC8gMTgwICkgKiBhbmdsZTtcclxuICBjb25zdCBuZXdYID0gY29vcmRzLnggKiBNYXRoLmNvcyggcmFkaWFucyApIC0gY29vcmRzLnkgKiBNYXRoLnNpbiggcmFkaWFucyApO1xyXG4gIGNvbnN0IG5ld1kgPSBjb29yZHMueCAqIE1hdGguc2luKCByYWRpYW5zICkgKyBjb29yZHMueSAqIE1hdGguY29zKCByYWRpYW5zICk7XHJcbiAgcmV0dXJuIHsgeDogbmV3WCwgeTogbmV3WSB9O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUNvb3JkaW5hdGVzKCB4OiBudW1iZXIsIHk6IG51bWJlciwgYW5nbGU6IG51bWJlciApOiBQb2ludDJEIHtcclxuICBjb25zdCByYWRpYW5zID0gKCBNYXRoLlBJIC8gMTgwICkgKiBhbmdsZTtcclxuICBjb25zdCBuZXdYID0geCAqIE1hdGguY29zKCByYWRpYW5zICkgLSB5ICogTWF0aC5zaW4oIHJhZGlhbnMgKTtcclxuICBjb25zdCBuZXdZID0geCAqIE1hdGguc2luKCByYWRpYW5zICkgKyB5ICogTWF0aC5jb3MoIHJhZGlhbnMgKTtcclxuICByZXR1cm4geyB4OiBuZXdYLCB5OiBuZXdZIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcmVEaWFnb25hbHMoIGluZGV4MTogbnVtYmVyLCBpbmRleDI6IG51bWJlciwgZ3JpZFNpemU6IG51bWJlciApOiBib29sZWFuIHtcclxuICBpZiAoIGluZGV4MSA8IDAgfHwgaW5kZXgyIDwgMCApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggJ0ludmFsaWQgY2VsbCBpbmRpY2VzJyApO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgcm93MSA9IGluZGV4VG9Sb3coIGluZGV4MSwgZ3JpZFNpemUgKTtcclxuICBjb25zdCBjb2wxID0gaW5kZXhUb0NvbCggaW5kZXgxLCBncmlkU2l6ZSApO1xyXG5cclxuICBjb25zdCByb3cyID0gaW5kZXhUb1JvdyggaW5kZXgyLCBncmlkU2l6ZSApO1xyXG4gIGNvbnN0IGNvbDIgPSBpbmRleFRvQ29sKCBpbmRleDIsIGdyaWRTaXplICk7XHJcblxyXG4gIHJldHVybiBNYXRoLmFicyggcm93MSAtIHJvdzIgKSA9PT0gTWF0aC5hYnMoIGNvbDEgLSBjb2wyICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmRleFRvUG9pbnQyRCggaW5kZXg6IG51bWJlciwgZ3JpZFdpZHRoOiBudW1iZXIgKTogUG9pbnQyRCB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHg6IGluZGV4VG9Db2woIGluZGV4LCBncmlkV2lkdGggKSxcclxuICAgIHk6IGluZGV4VG9Sb3coIGluZGV4LCBncmlkV2lkdGggKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgYW1vdW50OiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gKCAxIC0gYW1vdW50ICkgKiBtaW4gKyBhbW91bnQgKiBtYXg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlTGVycCggYTogbnVtYmVyLCBiOiBudW1iZXIsIHZhbDogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgcmV0dXJuICggdmFsIC0gYSApIC8gKCBiIC0gYSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtYXAoIGluTWluOiBudW1iZXIsIGluTWF4OiBudW1iZXIsIG91dE1pbjogbnVtYmVyLCBvdXRNYXg6IG51bWJlciwgdmFsOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gbGVycCggb3V0TWluLCBvdXRNYXgsIGludmVyc2VMZXJwKCBpbk1pbiwgaW5NYXgsIHZhbCApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRFeGNsdXNpdmUoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciApIHtcclxuICByZXR1cm4gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqICggbWF4IC0gbWluICkgKyBtaW4gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWxTZXRzPFQ+KCBzZXQxOiBTZXQ8VD4sIHNldDI6IFNldDxUPiApIHtcclxuICByZXR1cm4gc2V0MS5zaXplID09PSBzZXQyLnNpemUgJiZcclxuICAgIFsuLi5zZXQxXS5ldmVyeSggKCB4ICkgPT4gc2V0Mi5oYXMoIHggKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50SW5jbHVzaXZlKCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIgKSB7XHJcbiAgbWluID0gTWF0aC5jZWlsKCBtaW4gKTtcclxuICBtYXggPSBNYXRoLmZsb29yKCBtYXggKTtcclxuICByZXR1cm4gTWF0aC5mbG9vciggTWF0aC5yYW5kb20oKSAqICggbWF4IC0gbWluICsgMSApICkgKyBtaW47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21Gcm9tQXJyYXk8VD4oIGFycjogQXJyYXk8VD4gKSB7XHJcbiAgcmV0dXJuIGFycltnZXRSYW5kb21JbnRFeGNsdXNpdmUoIDAsIGFyci5sZW5ndGggKV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCggbnVtOiBudW1iZXIgPSAwLCBtaW46IG51bWJlciA9IDAsIG1heDogbnVtYmVyID0gMTAwICk6IG51bWJlciB7XHJcbiAgcmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBudW0sIG1heCApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtaW51dGVzVG9NaWxsaXNlY29uZHMoIG1zOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1zICogNjAwMDA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtaWxsaXNlY29uZHNUb01pbnV0ZXMoIG1zOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1zIC8gNjAwMDA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtaWxsaXNlY29uZHNUb0hvdXJzKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBtcyAvIDMuNmUrNjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbGxpc2Vjb25kc1RvRGF5cyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gbXMgLyA4LjY0ZSs3O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVnYWJ5dGVUb0J5dGUoIG1iOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1iICogMTAyNCAqIDEwMjQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBieXRlVG9NZWdhYnl0ZSggYjogbnVtYmVyICkge1xyXG4gIHJldHVybiBiIC8gMTAyNCAvIDEwMjQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBcnJheUZyb21SYW5nZSggc2l6ZTogbnVtYmVyLCBzdGFydGluZ0Zyb206IG51bWJlciA9IDAgKTogbnVtYmVyW10ge1xyXG4gIGxldCByZXN1bHQgPSBbLi4uQXJyYXkoIHNpemUgKS5rZXlzKCldXHJcblxyXG4gIGlmICggc3RhcnRpbmdGcm9tICE9IDAgKSB7XHJcbiAgICByZXN1bHQgPSByZXN1bHQubWFwKCBpID0+IGkgKyBzdGFydGluZ0Zyb20gKTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWNjZW50cyggc3RyOiBzdHJpbmcgKSB7XHJcbiAgcmV0dXJuIHN0ci5ub3JtYWxpemUoICdORkQnICkucmVwbGFjZSggL1tcXHUwMzAwLVxcdTAzNmZdL2csIFwiXCIgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlciggc3RyOiBzdHJpbmcgKTogc3RyaW5nIHtcclxuICBpZiAoIHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnICkge1xyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuICByZXR1cm4gc3RyLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKCAxICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZWFyY2hUZXJtKCBzdHJpbmdBcnJheTogc3RyaW5nW10sIHNlYXJjaFRlcm06IHN0cmluZyApOiBzdHJpbmdbXSB7XHJcbiAgcmV0dXJuIHN0cmluZ0FycmF5XHJcbiAgICAuZmlsdGVyKCAoIHY6IHN0cmluZyApID0+IHYudG9Mb3dlckNhc2UoKS5pbmRleE9mKCBzZWFyY2hUZXJtLnRvTG93ZXJDYXNlKCkgKSA+IC0xIClcclxuICAgIC5zbGljZSggMCwgMTAgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gemVyb0JlZm9yZSggbjogbnVtYmVyICkge1xyXG4gIHJldHVybiBuLnRvU3RyaW5nKCkucGFkU3RhcnQoIDIsICcwJyApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsT3JFbXB0eSggc3RyOiBzdHJpbmcgKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8ICFzdHIgfHwgc3RyID09PSAnJ1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9QaG9uZU51bWJlciggaW5wdXRUZXh0OiBzdHJpbmcgKSB7XHJcbiAgY29uc3QgY2xlYW5OdW1iZXIgPSBpbnB1dFRleHQucmVwbGFjZSggL1xcRC9nLCAnJyApO1xyXG5cclxuICBsZXQgcmVzdWx0O1xyXG4gIGlmICggY2xlYW5OdW1iZXIubGVuZ3RoIDw9IDEwICkge1xyXG4gICAgY29uc3QgcmVnZXggPSAvXihcXGR7Mn0pKFxcZHs0fSkoXFxkezAsNH0pJC87XHJcbiAgICByZXN1bHQgPSBjbGVhbk51bWJlci5yZXBsYWNlKCByZWdleCwgJygkMSkgJDItJDMnICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IHJlZ2V4ID0gL14oXFxkezJ9KShcXGR7NX0pKFxcZHswLDR9KSQvO1xyXG4gICAgcmVzdWx0ID0gY2xlYW5OdW1iZXIucmVwbGFjZSggcmVnZXgsICcoJDEpICQyLSQzJyApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufSIsImltcG9ydCB7IFBvaW50MkQgfSBmcm9tICcuL1Rvb2xzL01hdGhUb29scyc7XHJcblxyXG5leHBvcnQgZW51bSBDT05WRVJTSU9OX1VOSVQgeyBQSVhFTCwgUEVSQ0VOVEFHRSB9XHJcbmV4cG9ydCBlbnVtIERJUkVDVElPTl9SRUZFUkVOQ0UgeyBIT1JJWk9OVEFMLCBWRVJUSUNBTCB9XHJcbmV4cG9ydCBlbnVtIFZFUlRJQ0FMX1JFRkVSRU5DRSB7IEZST01fVE9QLCBGUk9NX0JPVFRPTSB9XHJcbmV4cG9ydCBlbnVtIENPTE9SX0NIQU5ORUwgeyBSLCBHLCBCLCBBIH07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBhcmFibGU8VD4ge1xyXG4gIGVxdWFscyggYjogVCApOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ1NTUG9zaXRpb24gaW1wbGVtZW50cyBQb2ludDJEIHtcclxuICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSB0eXBlOiBDT05WRVJTSU9OX1VOSVQ7XHJcbiAgcHVibGljIHZlcnRpY2FsUmVmZXJlbmNlOiBWRVJUSUNBTF9SRUZFUkVOQ0U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCB7IHgsIHksIHZlcnRpY2FsUmVmZXJlbmNlID0gVkVSVElDQUxfUkVGRVJFTkNFLkZST01fVE9QLCB0eXBlID0gQ09OVkVSU0lPTl9VTklULlBJWEVMIH06IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IHZlcnRpY2FsUmVmZXJlbmNlPzogVkVSVElDQUxfUkVGRVJFTkNFOyB0eXBlPzogQ09OVkVSU0lPTl9VTklUOyB9ICkge1xyXG4gICAgW3RoaXMueCwgdGhpcy55LCB0aGlzLnZlcnRpY2FsUmVmZXJlbmNlLCB0aGlzLnR5cGVdID0gW3gsIHksIHZlcnRpY2FsUmVmZXJlbmNlLCB0eXBlXTtcclxuICB9XHJcblxyXG4gIGdldCBob3Jpem9udGFsKCk6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2ggKCB0aGlzLnR5cGUgKSB7XHJcbiAgICAgIGNhc2UgQ09OVkVSU0lPTl9VTklULlBJWEVMOlxyXG4gICAgICAgIHJldHVybiBgJHsgdGhpcy54IH1weGA7XHJcbiAgICAgIGNhc2UgQ09OVkVSU0lPTl9VTklULlBFUkNFTlRBR0U6XHJcbiAgICAgICAgcmV0dXJuIGAkeyB0aGlzLnggfSVgO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBgJHsgdGhpcy54IH1weGA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgdmVydGljYWwoKTogc3RyaW5nIHtcclxuICAgIHN3aXRjaCAoIHRoaXMudHlwZSApIHtcclxuICAgICAgY2FzZSBDT05WRVJTSU9OX1VOSVQuUElYRUw6XHJcbiAgICAgICAgcmV0dXJuIGAkeyB0aGlzLnkgfXB4YDtcclxuICAgICAgY2FzZSBDT05WRVJTSU9OX1VOSVQuUEVSQ0VOVEFHRTpcclxuICAgICAgICByZXR1cm4gYCR7IHRoaXMueSB9JWA7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuIGAkeyB0aGlzLnkgfXB4YDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBnZXRDb2xvclBhbGV0dGVCeUNvbnRleHQgfSBmcm9tICcuL0NhbnZhc1Rvb2xzJztcclxuaW1wb3J0IHsgZ2V0RmlsZUV4dGVuc2lvbiB9IGZyb20gJy4vRmlsZVRvb2xzJztcclxuaW1wb3J0IHsgRGltZW5zaW9ucyB9IGZyb20gJy4vTWF0aFRvb2xzJztcclxuaW1wb3J0IHsgQ29sb3JSR0JBIH0gZnJvbSAnLi4vRXh0cmFzL0NvbG9yUkdCQSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQXNwZWN0UmF0aW9GaXQoIHNyY0RpbWVuc2lvbnM6IERpbWVuc2lvbnMsIG91dHB1dERpbWVuc2lvbnM6IERpbWVuc2lvbnMgKTogRGltZW5zaW9ucyB7XHJcbiAgY29uc3QgcmF0aW86IG51bWJlciA9IE1hdGgubWluKCBvdXRwdXREaW1lbnNpb25zLndpZHRoIC8gc3JjRGltZW5zaW9ucy53aWR0aCwgb3V0cHV0RGltZW5zaW9ucy5oZWlnaHQgLyBzcmNEaW1lbnNpb25zLmhlaWdodCApO1xyXG5cclxuICByZXR1cm4geyB3aWR0aDogc3JjRGltZW5zaW9ucy53aWR0aCAqIHJhdGlvLCBoZWlnaHQ6IHNyY0RpbWVuc2lvbnMuaGVpZ2h0ICogcmF0aW8gfTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbWFnZVJlc2l6ZURpbWVuc2lvbnNLZWVwQXNwZWN0UmF0aW8oIHsgc3JjRGltZW5zaW9ucywgb3V0cHV0RGltZW5zaW9ucyB9OiB7IHNyY0RpbWVuc2lvbnM6IERpbWVuc2lvbnM7IG91dHB1dERpbWVuc2lvbnM6IERpbWVuc2lvbnM7IH0gKTogRGltZW5zaW9ucyB7XHJcbiAgaWYgKCBvdXRwdXREaW1lbnNpb25zLndpZHRoICYmIG91dHB1dERpbWVuc2lvbnMud2lkdGggPiAwICkge1xyXG4gICAgY29uc3QgcmF0aW86IG51bWJlciA9IG91dHB1dERpbWVuc2lvbnMud2lkdGggLyBzcmNEaW1lbnNpb25zLndpZHRoO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiBvdXRwdXREaW1lbnNpb25zLndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHNyY0RpbWVuc2lvbnMuaGVpZ2h0ICogcmF0aW9cclxuICAgIH07XHJcbiAgfSBlbHNlIGlmICggb3V0cHV0RGltZW5zaW9ucy5oZWlnaHQgJiYgb3V0cHV0RGltZW5zaW9ucy5oZWlnaHQgPiAwICkge1xyXG4gICAgY29uc3QgcmF0aW86IG51bWJlciA9IG91dHB1dERpbWVuc2lvbnMuaGVpZ2h0IC8gc3JjRGltZW5zaW9ucy5oZWlnaHQ7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lkdGg6IHNyY0RpbWVuc2lvbnMud2lkdGggKiByYXRpbyxcclxuICAgICAgaGVpZ2h0OiBvdXRwdXREaW1lbnNpb25zLmhlaWdodFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aDogc3JjRGltZW5zaW9ucy53aWR0aCxcclxuICAgIGhlaWdodDogc3JjRGltZW5zaW9ucy5oZWlnaHRcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VCeVVSTCggaW1hZ2VTcmM6IHN0cmluZyApOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoIGFzeW5jICggcmVzb2x2ZSApID0+IHtcclxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgaW1nLnNyYyA9IGF3YWl0IGZldGNoKCBpbWFnZVNyYyApXHJcbiAgICAgIC50aGVuKCByZXNwb25zZSA9PiByZXNwb25zZS5ibG9iKCkgKVxyXG4gICAgICAudGhlbiggYmxvYiA9PiBVUkwuY3JlYXRlT2JqZWN0VVJMKCBibG9iICkgKTtcclxuXHJcbiAgICBpbWcuc2V0QXR0cmlidXRlKCAndHlwZScsIGdldEZpbGVFeHRlbnNpb24oIGltYWdlU3JjICkgKVxyXG5cclxuICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIHJlc29sdmUoIGltZyApO1xyXG4gICAgfVxyXG4gIH0gKVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW1hZ2VCeUlucHV0SWQoIGlucHV0SWQ6IHN0cmluZyApOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoIGFzeW5jICggcmVzb2x2ZSApID0+IHtcclxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgbGV0IGZpbGVMaXN0ID0gKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggaW5wdXRJZCApIGFzIEhUTUxJbnB1dEVsZW1lbnQgKS5maWxlcztcclxuXHJcbiAgICBpZiAoIGZpbGVMaXN0ICYmIGZpbGVMaXN0Lmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKCBmaWxlTGlzdC5pdGVtKCAwICkhICk7XHJcblxyXG4gICAgICBpbWcuc2V0QXR0cmlidXRlKCAndHlwZScsIGdldEZpbGVFeHRlbnNpb24oIGZpbGVMaXN0Lml0ZW0oIDAgKSEudHlwZSApICk7XHJcbiAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZSggaW1nICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IClcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEltYWdlQnlCbG9iKCBibG9iOiBCbG9iICk6IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggYXN5bmMgKCByZXNvbHZlICkgPT4ge1xyXG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoIGJsb2IgKTtcclxuXHJcbiAgICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICByZXNvbHZlKCBpbWcgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW1nO1xyXG4gIH0gKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc2l6ZUltYWdlRnJvbUlucHV0KCBpbnB1dElkOiBzdHJpbmcsIHJlc2l6ZURpbWVuc2lvbnM6IERpbWVuc2lvbnMgKTogUHJvbWlzZTxCbG9iIHwgbnVsbD4ge1xyXG4gIHJldHVybiBhd2FpdCBnZXRJbWFnZUJ5SW5wdXRJZCggaW5wdXRJZCApLnRoZW4oIGltZyA9PiByZXNpemVJbWFnZSggaW1nLCByZXNpemVEaW1lbnNpb25zICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc2l6ZUltYWdlRnJvbVVSTCggaW1hZ2VTcmM6IHN0cmluZywgcmVzaXplRGltZW5zaW9uczogRGltZW5zaW9ucyApOiBQcm9taXNlPEJsb2IgfCBudWxsPiB7XHJcbiAgcmV0dXJuIGF3YWl0IGdldEltYWdlQnlVUkwoIGltYWdlU3JjICkudGhlbiggaW1nID0+IHJlc2l6ZUltYWdlKCBpbWcsIHJlc2l6ZURpbWVuc2lvbnMgKSApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2FudmFzUmVzaXplSW1hZ2UoIGltZzogSFRNTEltYWdlRWxlbWVudCwgcmVzaXplRGltZW5zaW9uczogRGltZW5zaW9ucywgY2FudmFzQ29uZmlnPzogeyByZXN1bHRDYW52YXNDb250ZXh0PzogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCByZXNpemVDYW52YXNDb250ZXh0PzogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCByZXN1bHRDYW52YXNJZD86IHN0cmluZywgcmVzaXplQ2FudmFzSWQ/OiBzdHJpbmcgfSApOiBQcm9taXNlPHsgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIH0+IHtcclxuICBjb25zdCByZXN1bHRDYW52YXMgPSBjYW52YXNDb25maWcgJiYgY2FudmFzQ29uZmlnLnJlc3VsdENhbnZhc0lkXHJcbiAgICA/ICggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGNhbnZhc0NvbmZpZy5yZXN1bHRDYW52YXNJZCApIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiY2FudmFzXCIgKSApIGFzIEhUTUxDYW52YXNFbGVtZW50XHJcbiAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiY2FudmFzXCIgKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuXHJcbiAgY29uc3QgcmVzdWx0Q29udGV4dCA9IGNhbnZhc0NvbmZpZyAmJiBjYW52YXNDb25maWcucmVzdWx0Q2FudmFzQ29udGV4dFxyXG4gICAgPyBjYW52YXNDb25maWcucmVzdWx0Q2FudmFzQ29udGV4dFxyXG4gICAgOiByZXN1bHRDYW52YXMuZ2V0Q29udGV4dCggXCIyZFwiICkhO1xyXG5cclxuICBjb25zdCByZXN1bHREaW1lbnNpb25zID0gZ2V0SW1hZ2VSZXNpemVEaW1lbnNpb25zS2VlcEFzcGVjdFJhdGlvKCB7XHJcbiAgICBzcmNEaW1lbnNpb25zOiBpbWcsXHJcbiAgICBvdXRwdXREaW1lbnNpb25zOiByZXNpemVEaW1lbnNpb25zXHJcbiAgfSApO1xyXG5cclxuICByZXN1bHRDYW52YXMud2lkdGggPSByZXN1bHREaW1lbnNpb25zLndpZHRoO1xyXG4gIHJlc3VsdENhbnZhcy5oZWlnaHQgPSByZXN1bHREaW1lbnNpb25zLmhlaWdodDtcclxuXHJcbiAgY29uc3QgcmVzaXplQ2FudmFzID0gY2FudmFzQ29uZmlnICYmIGNhbnZhc0NvbmZpZy5yZXNpemVDYW52YXNJZFxyXG4gICAgPyAoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBjYW52YXNDb25maWcucmVzaXplQ2FudmFzSWQgKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImNhbnZhc1wiICkgKSBhcyBIVE1MQ2FudmFzRWxlbWVudFxyXG4gICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImNhbnZhc1wiICkgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcblxyXG4gIGNvbnN0IHJlc2l6ZUNhbnZhc0NvbnRleHQgPSBjYW52YXNDb25maWcgJiYgY2FudmFzQ29uZmlnLnJlc2l6ZUNhbnZhc0NvbnRleHRcclxuICAgID8gY2FudmFzQ29uZmlnLnJlc2l6ZUNhbnZhc0NvbnRleHRcclxuICAgIDogcmVzdWx0Q2FudmFzLmdldENvbnRleHQoIFwiMmRcIiApITtcclxuXHJcbiAgcmVzaXplQ2FudmFzLndpZHRoID0gcmVzdWx0RGltZW5zaW9ucy53aWR0aDtcclxuICByZXNpemVDYW52YXMuaGVpZ2h0ID0gcmVzdWx0RGltZW5zaW9ucy5oZWlnaHQ7XHJcbiAgcmVzaXplQ2FudmFzQ29udGV4dC5kcmF3SW1hZ2UoIGltZywgMCwgMCwgcmVzaXplQ2FudmFzLndpZHRoLCByZXNpemVDYW52YXMuaGVpZ2h0ICk7XHJcblxyXG4gIHJlc2l6ZUNhbnZhc0NvbnRleHQuZHJhd0ltYWdlKCBpbWcsIDAsIDAsIHJlc2l6ZUNhbnZhcy53aWR0aCwgcmVzaXplQ2FudmFzLmhlaWdodCApO1xyXG5cclxuICByZXN1bHRDb250ZXh0LmRyYXdJbWFnZShcclxuICAgIHJlc2l6ZUNhbnZhcyxcclxuICAgIDAsXHJcbiAgICAwLFxyXG4gICAgcmVzaXplQ2FudmFzLndpZHRoLFxyXG4gICAgcmVzaXplQ2FudmFzLmhlaWdodCxcclxuICAgIDAsXHJcbiAgICAwLFxyXG4gICAgcmVzdWx0Q2FudmFzLndpZHRoLFxyXG4gICAgcmVzdWx0Q2FudmFzLmhlaWdodCApO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2FudmFzOiByZXN1bHRDYW52YXMsXHJcbiAgICBjb250ZXh0OiByZXN1bHRDb250ZXh0XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEltYWdlUGFsZXR0ZUJ5VVJMKCBpbWFnZVNyYzogc3RyaW5nLCBkZXB0aDogbnVtYmVyID0gMiApIHtcclxuICBjb25zdCBpbWcgPSBhd2FpdCBnZXRJbWFnZUJ5VVJMKCBpbWFnZVNyYyApO1xyXG5cclxuICBjb25zdCBjb250ZXh0ID0gKCBhd2FpdCBkcmF3SW1hZ2VPbkNhbnZhcyggaW1nICkgKS5jb250ZXh0O1xyXG5cclxuICByZXR1cm4gZ2V0Q29sb3JQYWxldHRlQnlDb250ZXh0KCBjb250ZXh0LCBkZXB0aCApO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEltYWdlUGFsZXR0ZUJ5SW5wdXRJZCggaW5wdXRJZDogc3RyaW5nLCBkZXB0aDogbnVtYmVyID0gMiApIHtcclxuICBjb25zdCBpbWcgPSBhd2FpdCBnZXRJbWFnZUJ5SW5wdXRJZCggaW5wdXRJZCApO1xyXG5cclxuICBjb25zdCBjb250ZXh0ID0gKCBhd2FpdCBkcmF3SW1hZ2VPbkNhbnZhcyggaW1nICkgKS5jb250ZXh0O1xyXG5cclxuICByZXR1cm4gZ2V0Q29sb3JQYWxldHRlQnlDb250ZXh0KCBjb250ZXh0LCBkZXB0aCApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZHJhd0ltYWdlT25DYW52YXMoIGltZzogSFRNTEltYWdlRWxlbWVudCApIHtcclxuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnY2FudmFzJyApO1xyXG4gIGNhbnZhcy53aWR0aCA9IGltZy53aWR0aDtcclxuICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcclxuXHJcbiAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCBcIjJkXCIsIHtcclxuICAgIGFscGhhOiB0cnVlLFxyXG4gICAgd2lsbFJlYWRGcmVxdWVudGx5OiB0cnVlXHJcbiAgfSApITtcclxuXHJcbiAgY29udGV4dC5kcmF3SW1hZ2UoIGltZywgMCwgMCApO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2FudmFzOiBjYW52YXMsXHJcbiAgICBjb250ZXh0OiBjb250ZXh0XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEdyYWRpZW50QnlJbWFnZVVSTCggaW1hZ2VTcmM6IHN0cmluZyApOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gIGNvbnN0IHBhbGV0dGVCeVVSTCA9IGF3YWl0IGdldEltYWdlUGFsZXR0ZUJ5VVJMKCBpbWFnZVNyYyApO1xyXG4gIHJldHVybiBnZXRHcmFkaWVudEZyb21QYWxldHRlKCBwYWxldHRlQnlVUkwgKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRHcmFkaWVudEJ5SW1hZ2VJbnB1dElkKCBpbnB1dElkOiBzdHJpbmcgKSB7XHJcbiAgY29uc3QgcGFsZXR0ZUJ5SW5wdXRJZCA9IGF3YWl0IGdldEltYWdlUGFsZXR0ZUJ5SW5wdXRJZCggaW5wdXRJZCApO1xyXG4gIHJldHVybiBnZXRHcmFkaWVudEZyb21QYWxldHRlKCBwYWxldHRlQnlJbnB1dElkICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmFkaWVudEZyb21QYWxldHRlKCBpbWFnZVBhbGV0dGU6IENvbG9yUkdCQVtdICk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGltYWdlUGFsZXR0ZVxyXG4gICAgLm1hcCggYyA9PiBgcmdiYSgkeyBjLnRvU3RyaW5nKCkgfSlgIClcclxuICAgIC5qb2luKCAnLCAnIClcclxuICAgIC50cmltKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFbGVtZW50QmFja2dyb3VuZEdyYWRpZW50QnlDYW52YXNDb250ZXh0KCBlbGVtZW50OiBIVE1MRWxlbWVudCwgY2FudmFzQ29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEICk6IHZvaWQge1xyXG4gIGNvbnN0IGltYWdlUGFsZXR0ZSA9IGdldENvbG9yUGFsZXR0ZUJ5Q29udGV4dCggY2FudmFzQ29udGV4dCwgMiApO1xyXG4gIGNvbnN0IGJnR3JhZGllbnQgPSBnZXRHcmFkaWVudEZyb21QYWxldHRlKCBpbWFnZVBhbGV0dGUgKTtcclxuXHJcbiAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBgbGluZWFyLWdyYWRpZW50KCR7IGJnR3JhZGllbnQgfSlgO1xyXG59XHJcblxyXG4vLy8gYWRhcHRhw6fDo28gZGU6IGh0dHBzOi8vd3d3LmRlbGZ0c3RhY2suY29tL2hvd3RvL2phdmFzY3JpcHQvamF2YXNjcmlwdC1yZXNpemUtaW1hZ2VzL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzaXplSW1hZ2UoIGltZzogSFRNTEltYWdlRWxlbWVudCwgcmVzaXplRGltZW5zaW9uczogRGltZW5zaW9ucyApOiBQcm9taXNlPEJsb2IgfCBudWxsPiB7XHJcbiAgY29uc3QgcmVzdWx0SW1hZ2VDYW52YXMgPSAoIGF3YWl0IGdldENhbnZhc1Jlc2l6ZUltYWdlKCBpbWcsIHJlc2l6ZURpbWVuc2lvbnMgKSApLmNhbnZhcztcclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKCBhc3luYyAoIHJlc29sdmUgKSA9PiB7XHJcbiAgICByZXN1bHRJbWFnZUNhbnZhcy50b0Jsb2IoIGIgPT4gcmVzb2x2ZSggYiEgKSwgYGltYWdlLyR7IGltZy5nZXRBdHRyaWJ1dGUoICd0eXBlJyApIHx8ICdwbmcnIH1gICk7XHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJldmlld0ltYWdlKCB7IGRlZmF1bHRJbWFnZVNyYywgdXBsb2FkSW1hZ2VJbnB1dElkLCBwcmV2aWV3SW1hZ2VFbGVtZW50SWQgfTogeyBkZWZhdWx0SW1hZ2VTcmM6IHN0cmluZzsgdXBsb2FkSW1hZ2VJbnB1dElkPzogc3RyaW5nOyBwcmV2aWV3SW1hZ2VFbGVtZW50SWQ6IHN0cmluZzsgfSApIHtcclxuICBsZXQgZmlsZUxpc3Q7XHJcbiAgaWYgKCB1cGxvYWRJbWFnZUlucHV0SWQgKSB7XHJcbiAgICBmaWxlTGlzdCA9ICggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIHVwbG9hZEltYWdlSW5wdXRJZCApIGFzIEhUTUxJbnB1dEVsZW1lbnQgKS5maWxlcztcclxuICB9XHJcblxyXG4gIGNvbnN0IHByZXZpZXdJbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggcHJldmlld0ltYWdlRWxlbWVudElkICkhIGFzIEhUTUxJbWFnZUVsZW1lbnQ7XHJcblxyXG4gIGlmICggIWZpbGVMaXN0IHx8IGZpbGVMaXN0Lmxlbmd0aCA8IDEgKSB7XHJcbiAgICBwcmV2aWV3SW1hZ2VFbGVtZW50LnNyYyA9IGRlZmF1bHRJbWFnZVNyYztcclxuICAgIHByZXZpZXdJbWFnZUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ2RlZmF1bHQnO1xyXG4gICAgcmV0dXJuO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBibG9iVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggZmlsZUxpc3QuaXRlbSggMCApISApO1xyXG4gICAgcHJldmlld0ltYWdlRWxlbWVudC5zcmMgPSBibG9iVVJMO1xyXG4gICAgcHJldmlld0ltYWdlRWxlbWVudC5vbmNsaWNrID0gXyA9PiB3aW5kb3cub3BlbiggYmxvYlVSTCwgJ19ibGFuaycgKTtcclxuICAgIHByZXZpZXdJbWFnZUVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xyXG4gIH1cclxufVxyXG5cclxuIl0sIm5hbWVzIjpbIkNvbG9yUkdCQSIsInIiLCJnIiwiYiIsImEiLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJjbGFtcCIsInRvU3RyaW5nIiwidG9TdHJpbmdXaXRob3V0QWxwaGEiLCJhc0FycmF5Iiwibm9BbHBoYSIsImdldENvcHkiLCJpbmNyZWFzZVNhdHVyYXRpb24iLCJjb2xvciIsInBlcmNlbnRhZ2UiLCJtYXhWYWx1ZSIsIk1hdGgiLCJtYXgiLCJjb3B5Q29sb3IiLCJmbG9vciIsImdldFVuaXF1ZSIsImFyciIsInJlbW92ZVRyYW5zcGFyZW50UGl4ZWxzIiwiZmlsdGVyIiwidiIsImkiLCJmaW5kSW5kZXgiLCJ2MiIsIkpTT04iLCJzdHJpbmdpZnkiLCJjIiwiaXNWYWxpZCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZXF1YWxzIiwiY29sb3IyIiwiTnVtYmVyIiwiaXNOYU4iLCJCTEFDSyIsIk5VTEwiLCJnZXRQaXhlbENvbG9yRnJvbUNhbnZhcyIsInBpeGVsSW5kZXgiLCJwaXhlbEFycmF5IiwiZ2V0Q29sb3JQYWxldHRlQnlDb250ZXh0IiwiY29udGV4dCIsImRlcHRoIiwiZ2V0Q29sb3JQYWxldHRlIiwibnVtYmVyT2ZDb2xvckNoYW5uZWxzIiwiZ2V0SW1hZ2VEYXRhIiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJkYXRhIiwiY29sb3JBcnJheSIsImxlbmd0aCIsInB1c2giLCJnZXRDb2xvckFycmF5QnlDb250ZXh0IiwicmdiVmFsdWVzIiwicmVkdWNlIiwicHJldiIsImN1cnIiLCJyb3VuZCIsImNvbXBvbmVudFRvU29ydEJ5Iiwick1pbiIsIk1BWF9WQUxVRSIsImdNaW4iLCJiTWluIiwick1heCIsIk1JTl9WQUxVRSIsImdNYXgiLCJiTWF4IiwiZm9yRWFjaCIsInBpeGVsIiwibWluIiwiclJhbmdlIiwiZ1JhbmdlIiwiYlJhbmdlIiwiYmlnZ2VzdFJhbmdlIiwiQ09MT1JfQ0hBTk5FTCIsIlIiLCJHIiwiQiIsImZpbmRCaWdnZXN0Q29sb3JSYW5nZSIsInNvcnQiLCJwMSIsInAyIiwibWlkIiwic2xpY2UiLCJnZXRGaWxlRXh0ZW5zaW9uIiwiZmlsZU5hbWUiLCJpc051bGxPckVtcHR5IiwiZGVmYXVsdEZpbGVTcmMiLCJzcGxpdCIsInBvcCIsImZpbGVUeXBlU3RyIiwibnVtIiwic3RyIiwiQ09OVkVSU0lPTl9VTklUIiwiRElSRUNUSU9OX1JFRkVSRU5DRSIsIlZFUlRJQ0FMX1JFRkVSRU5DRSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJjYWxjdWxhdGVBc3BlY3RSYXRpb0ZpdCIsInNyY0RpbWVuc2lvbnMiLCJvdXRwdXREaW1lbnNpb25zIiwicmF0aW8iLCJnZXRJbWFnZVJlc2l6ZURpbWVuc2lvbnNLZWVwQXNwZWN0UmF0aW8iLCJhc3luYyIsImdldEltYWdlQnlVUkwiLCJpbWFnZVNyYyIsIlByb21pc2UiLCJyZXNvbHZlIiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImJsb2IiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzZXRBdHRyaWJ1dGUiLCJvbmxvYWQiLCJnZXRJbWFnZUJ5SW5wdXRJZCIsImlucHV0SWQiLCJmaWxlTGlzdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJmaWxlcyIsIml0ZW0iLCJ0eXBlIiwiZ2V0SW1hZ2VCeUJsb2IiLCJyZXNpemVJbWFnZUZyb21JbnB1dCIsInJlc2l6ZURpbWVuc2lvbnMiLCJyZXNpemVJbWFnZSIsInJlc2l6ZUltYWdlRnJvbVVSTCIsImdldENhbnZhc1Jlc2l6ZUltYWdlIiwiY2FudmFzQ29uZmlnIiwicmVzdWx0Q2FudmFzIiwicmVzdWx0Q2FudmFzSWQiLCJjcmVhdGVFbGVtZW50IiwicmVzdWx0Q29udGV4dCIsInJlc3VsdENhbnZhc0NvbnRleHQiLCJnZXRDb250ZXh0IiwicmVzdWx0RGltZW5zaW9ucyIsInJlc2l6ZUNhbnZhcyIsInJlc2l6ZUNhbnZhc0lkIiwicmVzaXplQ2FudmFzQ29udGV4dCIsImRyYXdJbWFnZSIsImdldEltYWdlUGFsZXR0ZUJ5VVJMIiwiZHJhd0ltYWdlT25DYW52YXMiLCJnZXRJbWFnZVBhbGV0dGVCeUlucHV0SWQiLCJhbHBoYSIsIndpbGxSZWFkRnJlcXVlbnRseSIsImdldEdyYWRpZW50QnlJbWFnZVVSTCIsImdldEdyYWRpZW50RnJvbVBhbGV0dGUiLCJnZXRHcmFkaWVudEJ5SW1hZ2VJbnB1dElkIiwiaW1hZ2VQYWxldHRlIiwibWFwIiwiam9pbiIsInRyaW0iLCJzZXRFbGVtZW50QmFja2dyb3VuZEdyYWRpZW50QnlDYW52YXNDb250ZXh0IiwiZWxlbWVudCIsImNhbnZhc0NvbnRleHQiLCJiZ0dyYWRpZW50Iiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJyZXN1bHRJbWFnZUNhbnZhcyIsInRvQmxvYiIsImdldEF0dHJpYnV0ZSIsInByZXZpZXdJbWFnZSIsImRlZmF1bHRJbWFnZVNyYyIsInVwbG9hZEltYWdlSW5wdXRJZCIsInByZXZpZXdJbWFnZUVsZW1lbnRJZCIsInByZXZpZXdJbWFnZUVsZW1lbnQiLCJjdXJzb3IiLCJibG9iVVJMIiwib25jbGljayIsIl8iLCJ3aW5kb3ciLCJvcGVuIl0sInNvdXJjZVJvb3QiOiIifQ==
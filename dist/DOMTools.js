var DOMTools;(()=>{"use strict";var t={739:(t,e,n)=>{n.d(e,{lerp:()=>i,regexNumberPattern:()=>o,rotateCoordinates:()=>r});const o=/-?\d+\.?\d*/g;function r(t,e,n){const o=Math.PI/180*n;return{x:t*Math.cos(o)-e*Math.sin(o),y:t*Math.sin(o)+e*Math.cos(o)}}function i(t,e,n){return(1-n)*t+n*e}},2843:(t,e,n)=>{function o(t){const e=t.replace(/\D/g,"");let n;if(e.length<=10){const t=/^(\d{2})(\d{4})(\d{0,4})$/;n=e.replace(t,"($1) $2-$3")}else{const t=/^(\d{2})(\d{5})(\d{0,4})$/;n=e.replace(t,"($1) $2-$3")}return n}n.d(e,{toPhoneNumber:()=>o})}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{addActionKey:()=>h,bindElementViewIfChecked:()=>J,bindElementsByCheck:()=>j,checkElementCollision:()=>E,clickEventToCoordinates:()=>K,createInvisibleDivAboveParent:()=>U,debounceFactory:()=>tt,delay:()=>R,dictKeysByActionKeydownOnce:()=>a,dictKeysByActionKeydownRepeat:()=>u,dictKeysByActionKeyup:()=>d,extractYouTubeId:()=>p,getBodyRotationAxis:()=>Y,getBodyRotationInDegrees:()=>L,getCollisionDirection:()=>D,getDefaultAttributeForTarget:()=>P,getDistanceFromBorder:()=>F,getElementDimensions:()=>v,getElementDimensionsById:()=>b,getElementFromHTML:()=>w,getElementRotationAxis:()=>q,getElementRotationInDegrees:()=>O,getIndexInParent:()=>S,getRegexRemoveRotationBasedOnAxis:()=>V,getRegexRemoveRotationFromBody:()=>$,getRotatedBoundingBoxBasedOnBodyRotation:()=>x,getTransformCoordsFromElement:()=>N,getUserDeviceType:()=>Z,getValueFromRadioGroup:()=>W,handlePromise:()=>f,hideElement:()=>z,insertElementAtIndex:()=>T,isMobileBrowser:()=>X,isOnScreen:()=>_,isValidYouTubeUrl:()=>g,isValidYoutubeUrlOrId:()=>m,mapDefaultAttributesByElement:()=>I,pollForVariable:()=>C,pollForVariableAsync:()=>B,regexGroupRotateValue:()=>i,regexGroupRotateXValue:()=>c,regexGroupRotateYValue:()=>s,regexGroupRotateZValue:()=>l,regexRemoveTranslateFromTransform:()=>r,replaceElement:()=>A,selectOptionByText:()=>rt,setAttributeListForElement:()=>y,setDefaultAttributeForTarget:()=>k,setInputForcePhoneNumberFormat:()=>H,sleepAsync:()=>G,smoothScroll:()=>Q,smoothScrollTo:()=>nt,smoothScrollToElement:()=>ot,throttleFactory:()=>et,waitUntilElementExists:()=>M});var t=n(739),e=n(2843);const r=/translate\([^)]*\)/g,i=/rotate\((-?\d+\.?\d*)deg\)/,c=/rotateX\((-?\d+\.?\d*)deg\)/,s=/rotateY\((-?\d+\.?\d*)deg\)/,l=/rotateZ\((-?\d+\.?\d*)deg\)/,a=new Map,u=new Map,d=new Map;function h({key:t,keydown:e,keyup:n,executeOnlyOnce:o=!0}){o?function(t,e,n){a.has(t)?a.set(t,[e,...a.get(t)]):a.set(t,[e]),n&&(d.has(t)?d.set(t,[n,...d.get(t)]):d.set(t,[n]))}(t,e,n):function(t,e,n){u.has(t)?u.set(t,[e,...u.get(t)]):u.set(t,[e]),n&&(d.has(t)?d.set(t,[n,...d.get(t)]):d.set(t,[n]))}(t,e,n)}async function f(t){try{const e=await t;return{data:()=>e,error:null}}catch(t){return console.error(t),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}function m(t){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(t)||/^[a-zA-Z0-9_-]{11}$/.test(t)}function g(t){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(t)}function p(t){const e=t.match(/[?&]v=([^?&]+)/);return e&&e[1]?e[1]:11===t.length?t:null}function y(t,e){e.forEach((([e,n])=>{t.setAttribute(e,n)}))}function w(t,e=!0){if(!(t=e?t.trim():t))return null;const n=document.createElement("template");n.innerHTML=t;const o=n.content.children;return 1===o.length?o[0]:Array.from(o)}function b(t){const e=document.getElementById(t);if(!e)throw new Error("Invalid element at getElementDimensionsById with id: "+t);return v(e)}function v(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function x(t){const e=t.getBoundingClientRect(),n=e.left+e.width/2,o=e.top+e.height/2,r=L(),i=Math.PI/180*r,c=Math.cos(i),s=Math.sin(i),l=n+(e.left-n)*c-(e.top-o)*s,a=o+(e.left-n)*s+(e.top-o)*c,u=n+(e.right-n)*c-(e.bottom-o)*s,d=o+(e.right-n)*s+(e.bottom-o)*c,h=Math.min(l,u),f=Math.min(a,d),m=Math.max(a,d),g=Math.max(l,u);return{x:h,y:f,width:e.width,height:e.height,toJSON:e.toJSON,left:h,top:f,bottom:m,right:g}}function E(t,e,n=!1){const o=n?x(t):t.getBoundingClientRect(),r=n?x(e):e.getBoundingClientRect();return!(o.top>r.bottom||o.right<r.left||o.bottom<r.top||o.left>r.right)}function C(t,e,n){const o=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(o),n(window[t]))}),100)}async function B(t,e,n){return new Promise((o=>{const r=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(r),n(window[t]),o())}),100)}))}function M(t){return new Promise((e=>{if(document.querySelector(t))return e(document.querySelector(t));const n=new MutationObserver((o=>{document.querySelector(t)&&(n.disconnect(),e(document.querySelector(t)))}));n.observe(document.body,{childList:!0,subtree:!0})}))}async function R(t){return new Promise((e=>setTimeout(e,t)))}function A(t,e,n){e&&t&&(e.removeChild(t),e.insertBefore(n,t.nextSibling))}function T(t,e,n){const o=t.childNodes;if(!(n>=0&&n<=o.length))throw console.error("Index out of bounds"),new Error("Index out of bounds");if(n===o.length)t.appendChild(e);else{const r=o[n];t.insertBefore(e,r)}}function S(t){const e=t.parentElement;return e?Array.from(e.children).indexOf(t):-1}const I=new Map;function P(t,e){I.has(t)||I.set(t,new Map);let n="";const o=I.get(t);return n=(o.has(e)?o.get(e):t.getAttribute(e))||"",k(t,e,n),n}function k(t,e,n){I.has(t)||I.set(t,new Map),I.get(t).set(e,n)}function D(t,e,n=!1){const o=n?x(t):t.getBoundingClientRect(),r=n?x(e):e.getBoundingClientRect();return{top:o.bottom>r.top&&o.top<r.top+r.height/3,right:o.left<r.right&&o.right>r.right-r.width/3,center:o.top<r.bottom&&o.bottom>r.top&&o.left<r.right&&o.right>r.left,bottom:o.top<r.bottom-r.height/3&&o.bottom>r.bottom-r.height/3,left:o.right>r.left&&o.left<r.left+r.width/3}}function F(t,e,n=!1){const o=n?x(t):t.getBoundingClientRect(),r=n?x(e):e.getBoundingClientRect(),i=o.left+o.width/2,c=o.top+o.height/2;return{top:c-r.top,right:r.right-i,bottom:r.bottom-c,left:i-r.left}}function O(t,e="x"){let n;switch(e){case"x":n=c;break;case"y":n=s;break;case"z":n=l;break;default:n=i}const o=n.exec(t.style.transform);return o?parseFloat(o[1]):0}function L(){const t=$().exec(document.body.style.transform);return t?parseFloat(t[1]):0}function $(){return V(Y())}function V(t){switch(t){case"x":return c;case"y":return s;case"z":return l;default:return i}}function Y(){return q(document.body)}function q(t){const e=t.style.transform.toLowerCase();return e.includes("x")?"x":e.includes("y")?"y":"z"}function N(e,n=!1){const o=(window.getComputedStyle(e).transform.match(t.regexNumberPattern)??[0,0]).map((t=>+t));let r={x:void 0!==o[4]?Math.round(o[4]):0,y:void 0!==o[5]?Math.round(o[5]):0};if(n){const n=O(document.body,q(e))||0;return(0,t.rotateCoordinates)(r.x,r.y,n)}return r}function K(t){if(t instanceof MouseEvent)return{x:t.clientX,y:t.clientY};if(t instanceof TouchEvent){const e=t.changedTouches[0];return{x:e.clientX,y:e.clientY}}throw"Event not Found"}function U({parentElement:t,id:e,position:n,dimensions:o}){var r=document.createElement("div");return t.style.position||(t.style.position="relative"),r.id=e,r.style.position="absolute",r.style.width=o&&o.width?o.width.toString()+"px":"100%",r.style.height=o&&o.height?o.height.toString()+"px":"100%",r.style.top=(n?.top.toString()??"0")+"px",r.style.left=(n?.left.toString()??"0")+"px",r.style.opacity="0",r.style.pointerEvents="auto",t.appendChild(r),r}function z(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}async function G(t){return await new Promise((e=>setTimeout((()=>e()),t)))}function j(t,e,n,o){t.checked&&n(e),(t.name?Array.from(document.querySelectorAll(`[name="${t.name}"]`)):[t]).forEach((r=>r.addEventListener("change",(r=>{t.checked?n(e,r):o(e,r)}))))}function H(t){t.addEventListener("input",(function(){let t=this.value;const n=t.replace(/\D/g,"");n.length>11&&(t=n.slice(0,11));let o=(0,e.toPhoneNumber)(t);10===o.length&&(o=o.replaceAll("-","")),this.value=o}))}function X(){return/Android|iPhone/i.test(navigator.userAgent)}function Z(){var t=navigator.userAgent||navigator.vendor||window.opera;return/android/i.test(t)?"android":/iPad|iPhone|iPod/.test(t)&&!window.MSStream?"apple":"desktop"}function _(t){const e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}function J(t,e,n={onCheck:(t,e)=>{},onUncheck:(t,e)=>{}}){j(t,e,(o=>{o.classList.add("show"),n.onCheck(t,e)}),(o=>{o.classList.remove("show"),n.onUncheck(t,e)}))}function W(t){const e=document.querySelector(`[name=${t}]:checked`);if(e)return e.value}function Q(e,n){const o=window.scrollY||window.pageYOffset;let r=null;requestAnimationFrame((function i(c){r||(r=c);const s=c-r,l=Math.min(s/n,1),a=(0,t.lerp)(0,1,l);window.scrollTo(0,(0,t.lerp)(o,e,a)),s<n&&requestAnimationFrame(i)}))}function tt(t,e){let n;return function(){const o=window,r=arguments;clearTimeout(n),n=window.setTimeout((()=>t.apply(o,r)),e)}}function et(t,e){let n,o;return function(){const r=window,i=arguments;o?(clearTimeout(n),n=window.setTimeout((function(){Date.now()-o>=e&&(t.apply(r,i),o=Date.now())}),e-(Date.now()-o))):(t.apply(r,i),o=Date.now())}}function nt(t){document.body.scrollTo({top:t,behavior:"smooth"})}function ot(t,e=!0){e?document.body.scrollTo({top:t.getBoundingClientRect().y,left:t.getBoundingClientRect().x,behavior:"smooth"}):Q(t.getBoundingClientRect().top+window.scrollY,1e3)}function rt(t,e,n=!1){const o=document.getElementById(t);if(!o)return;const r=[...o.querySelectorAll("option")];let i;i=n?r.filter((t=>t.textContent&&t.textContent.toLowerCase().includes(e.toLowerCase())))[0].value:r.filter((t=>t.textContent&&t.textContent.toLowerCase()===e.toLowerCase()))[0].value,o.value=i}window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of a)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of u)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of d)t.code===e[0]&&e[1].forEach((e=>e(t)))}))})(),DOMTools=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
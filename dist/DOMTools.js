var DOMTools;(()=>{"use strict";var t={739:(t,e,n)=>{n.d(e,{lerp:()=>i,regexNumberPattern:()=>o,rotateCoordinates:()=>r});const o=/-?\d+\.?\d*/g;function r(t,e,n){const o=Math.PI/180*n;return{x:t*Math.cos(o)-e*Math.sin(o),y:t*Math.sin(o)+e*Math.cos(o)}}function i(t,e,n){return(1-n)*t+n*e}},2843:(t,e,n)=>{function o(t){const e=t.replace(/\D/g,"");let n;if(e.length<=10){const t=/^(\d{2})(\d{4})(\d{0,4})$/;n=e.replace(t,"($1) $2-$3")}else{const t=/^(\d{2})(\d{5})(\d{0,4})$/;n=e.replace(t,"($1) $2-$3")}return n}n.d(e,{toPhoneNumber:()=>o})}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{addActionKey:()=>h,bindElementViewIfChecked:()=>Y,bindElementsByCheck:()=>$,checkElementCollision:()=>w,clickEventToCoordinates:()=>F,createInvisibleDivAboveParent:()=>O,debounceFactory:()=>z,dictKeysByActionKeydownOnce:()=>l,dictKeysByActionKeydownRepeat:()=>u,dictKeysByActionKeyup:()=>d,getBodyRotationAxis:()=>k,getBodyRotationInDegrees:()=>S,getCollisionDirection:()=>B,getDefaultAttributeForTarget:()=>E,getDistanceFromBorder:()=>M,getElementDimensions:()=>p,getElementDimensionsById:()=>f,getElementFromHTML:()=>m,getElementRotationAxis:()=>D,getElementRotationInDegrees:()=>R,getRegexRemoveRotationBasedOnAxis:()=>A,getRegexRemoveRotationFromBody:()=>T,getRotatedBoundingBoxBasedOnBodyRotation:()=>y,getTransformCoordsFromElement:()=>P,getUserDeviceType:()=>N,getValueFromRadioGroup:()=>G,handlePromise:()=>g,hideElement:()=>I,isMobileBrowser:()=>K,isOnScreen:()=>V,mapDefaultAttributesByElement:()=>x,pollForVariable:()=>b,regexGroupRotateValue:()=>i,regexGroupRotateXValue:()=>c,regexGroupRotateYValue:()=>a,regexGroupRotateZValue:()=>s,regexRemoveTranslateFromTransform:()=>r,selectOptionByText:()=>J,setDefaultAttributeForTarget:()=>C,setInputForcePhoneNumberFormat:()=>q,sleepAsync:()=>L,smoothScroll:()=>j,smoothScrollTo:()=>U,smoothScrollToElement:()=>X,throttleFactory:()=>H,waitUntilElementExists:()=>v});var t=n(739),e=n(2843);const r=/translate\([^)]*\)/g,i=/rotate\((-?\d+\.?\d*)deg\)/,c=/rotateX\((-?\d+\.?\d*)deg\)/,a=/rotateY\((-?\d+\.?\d*)deg\)/,s=/rotateZ\((-?\d+\.?\d*)deg\)/,l=new Map,u=new Map,d=new Map;function h({key:t,keydown:e,keyup:n,executeOnlyOnce:o=!0}){o?function(t,e,n){l.has(t)?l.set(t,[e,...l.get(t)]):l.set(t,[e]),n&&(d.has(t)?d.set(t,[n,...d.get(t)]):d.set(t,[n]))}(t,e,n):function(t,e,n){u.has(t)?u.set(t,[e,...u.get(t)]):u.set(t,[e]),n&&(d.has(t)?d.set(t,[n,...d.get(t)]):d.set(t,[n]))}(t,e,n)}async function g(t){try{const e=await t;return{data:()=>e,error:null}}catch(t){return console.error(t),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}function m(t,e=!0){if(!(t=e?t.trim():t))return null;const n=document.createElement("template");n.innerHTML=t;const o=n.content.children;return 1===o.length?o[0]:Array.from(o)}function f(t){const e=document.getElementById(t);if(!e)throw new Error("Invalid element at getElementDimensionsById with id: "+t);return p(e)}function p(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function y(t){const e=t.getBoundingClientRect(),n=e.left+e.width/2,o=e.top+e.height/2,r=S(),i=Math.PI/180*r,c=Math.cos(i),a=Math.sin(i),s=n+(e.left-n)*c-(e.top-o)*a,l=o+(e.left-n)*a+(e.top-o)*c,u=n+(e.right-n)*c-(e.bottom-o)*a,d=o+(e.right-n)*a+(e.bottom-o)*c,h=Math.min(s,u),g=Math.min(l,d),m=Math.max(l,d),f=Math.max(s,u);return{x:h,y:g,width:e.width,height:e.height,toJSON:e.toJSON,left:h,top:g,bottom:m,right:f}}function w(t,e,n=!1){const o=n?y(t):t.getBoundingClientRect(),r=n?y(e):e.getBoundingClientRect();return!(o.top>r.bottom||o.right<r.left||o.bottom<r.top||o.left>r.right)}function b(t,e,n){const o=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(o),n(window[t]))}),100)}function v(t){return new Promise((e=>{if(document.querySelector(t))return e(document.querySelector(t));const n=new MutationObserver((o=>{document.querySelector(t)&&(n.disconnect(),e(document.querySelector(t)))}));n.observe(document.body,{childList:!0,subtree:!0})}))}const x=new Map;function E(t,e){x.has(t)||x.set(t,new Map);let n="";const o=x.get(t);return n=(o.has(e)?o.get(e):t.getAttribute(e))||"",C(t,e,n),n}function C(t,e,n){x.has(t)||x.set(t,new Map),x.get(t).set(e,n)}function B(t,e,n=!1){const o=n?y(t):t.getBoundingClientRect(),r=n?y(e):e.getBoundingClientRect();return{top:o.bottom>r.top&&o.top<r.top+r.height/3,right:o.left<r.right&&o.right>r.right-r.width/3,center:o.top<r.bottom&&o.bottom>r.top&&o.left<r.right&&o.right>r.left,bottom:o.top<r.bottom-r.height/3&&o.bottom>r.bottom-r.height/3,left:o.right>r.left&&o.left<r.left+r.width/3}}function M(t,e,n=!1){const o=n?y(t):t.getBoundingClientRect(),r=n?y(e):e.getBoundingClientRect(),i=o.left+o.width/2,c=o.top+o.height/2;return{top:c-r.top,right:r.right-i,bottom:r.bottom-c,left:i-r.left}}function R(t,e="x"){let n;switch(e){case"x":n=c;break;case"y":n=a;break;case"z":n=s;break;default:n=i}const o=n.exec(t.style.transform);return o?parseFloat(o[1]):0}function S(){const t=T().exec(document.body.style.transform);return t?parseFloat(t[1]):0}function T(){return A(k())}function A(t){switch(t){case"x":return c;case"y":return a;case"z":return s;default:return i}}function k(){return D(document.body)}function D(t){const e=t.style.transform.toLowerCase();return e.includes("x")?"x":e.includes("y")?"y":"z"}function P(e,n=!1){const o=(window.getComputedStyle(e).transform.match(t.regexNumberPattern)??[0,0]).map((t=>+t));let r={x:void 0!==o[4]?Math.round(o[4]):0,y:void 0!==o[5]?Math.round(o[5]):0};if(n){const n=R(document.body,D(e))||0;return(0,t.rotateCoordinates)(r.x,r.y,n)}return r}function F(t){if(t instanceof MouseEvent)return{x:t.clientX,y:t.clientY};if(t instanceof TouchEvent){const e=t.changedTouches[0];return{x:e.clientX,y:e.clientY}}throw"Event not Found"}function O({parentElement:t,id:e,position:n,dimensions:o}){var r=document.createElement("div");return t.style.position||(t.style.position="relative"),r.id=e,r.style.position="absolute",r.style.width=o&&o.width?o.width.toString()+"px":"100%",r.style.height=o&&o.height?o.height.toString()+"px":"100%",r.style.top=(n?.top.toString()??"0")+"px",r.style.left=(n?.left.toString()??"0")+"px",r.style.opacity="0",r.style.pointerEvents="auto",t.appendChild(r),r}function I(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}async function L(t){return await new Promise((e=>setTimeout((()=>e()),t)))}function $(t,e,n,o){t.checked&&n(e),(t.name?Array.from(document.querySelectorAll(`[name="${t.name}"]`)):[t]).forEach((r=>r.addEventListener("change",(r=>{t.checked?n(e,r):o(e,r)}))))}function q(t){t.addEventListener("input",(function(){let t=this.value;const n=t.replace(/\D/g,"");n.length>11&&(t=n.slice(0,11));let o=(0,e.toPhoneNumber)(t);10===o.length&&(o=o.replaceAll("-","")),this.value=o}))}function K(){return/Android|iPhone/i.test(navigator.userAgent)}function N(){var t=navigator.userAgent||navigator.vendor||window.opera;return/android/i.test(t)?"android":/iPad|iPhone|iPod/.test(t)&&!window.MSStream?"apple":"desktop"}function V(t){const e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&e.right<=(window.innerWidth||document.documentElement.clientWidth)}function Y(t,e,n={onCheck:(t,e)=>{},onUncheck:(t,e)=>{}}){$(t,e,(o=>{o.classList.add("show"),n.onCheck(t,e)}),(o=>{o.classList.remove("show"),n.onUncheck(t,e)}))}function G(t){const e=document.querySelector(`[name=${t}]:checked`);if(e)return e.value}function j(e,n){const o=window.scrollY||window.pageYOffset;let r=null;requestAnimationFrame((function i(c){r||(r=c);const a=c-r,s=Math.min(a/n,1),l=(0,t.lerp)(0,1,s);window.scrollTo(0,(0,t.lerp)(o,e,l)),a<n&&requestAnimationFrame(i)}))}function z(t,e){let n;return function(){const o=window,r=arguments;clearTimeout(n),n=window.setTimeout((()=>t.apply(o,r)),e)}}function H(t,e){let n,o;return function(){const r=window,i=arguments;o?(clearTimeout(n),n=window.setTimeout((function(){Date.now()-o>=e&&(t.apply(r,i),o=Date.now())}),e-(Date.now()-o))):(t.apply(r,i),o=Date.now())}}function U(t){document.body.scrollTo({top:t,behavior:"smooth"})}function X(t,e=!0){e?document.body.scrollTo({top:t.getBoundingClientRect().y,left:t.getBoundingClientRect().x,behavior:"smooth"}):j(t.getBoundingClientRect().top+window.scrollY,1e3)}function J(t,e,n=!1){const o=document.getElementById(t);if(!o)return;const r=[...o.querySelectorAll("option")];let i;i=n?r.filter((t=>t.textContent&&t.textContent.toLowerCase().includes(e.toLowerCase())))[0].value:r.filter((t=>t.textContent&&t.textContent.toLowerCase()===e.toLowerCase()))[0].value,o.value=i}window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of l)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of u)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of d)t.code===e[0]&&e[1].forEach((e=>e(t)))}))})(),DOMTools=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
var MovableElement;(()=>{"use strict";var t={7930:(t,e,o)=>{o.d(e,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(t,e){this.eventsByName.has(t.toLowerCase())?this.eventsByName.get(t.toLowerCase()).push(e):this.eventsByName.set(t.toLowerCase(),[e])}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t(...e)))}}},1319:(t,e,o)=>{o.d(e,{getDistanceFromBorder:()=>v,getTransformCoordsFromElement:()=>u,regexRemoveTranslateFromTransform:()=>s});var n=o(739);const s=/translate\([^)]*\)/g,r=/rotate\((-?\d+\.?\d*)deg\)/,a=/rotateX\((-?\d+\.?\d*)deg\)/,i=/rotateY\((-?\d+\.?\d*)deg\)/,h=/rotateZ\((-?\d+\.?\d*)deg\)/,m=new Map,l=new Map,d=new Map;function c(t){const e=t.getBoundingClientRect(),o=e.left+e.width/2,n=e.top+e.height/2,s=function(){const t=function(t){switch(t){case"x":return a;case"y":return i;case"z":return h;default:return r}}(g(document.body)).exec(document.body.style.transform);return t?parseFloat(t[1]):0}(),m=Math.PI/180*s,l=Math.cos(m),d=Math.sin(m),c=o+(e.left-o)*l-(e.top-n)*d,v=n+(e.left-o)*d+(e.top-n)*l,u=o+(e.right-o)*l-(e.bottom-n)*d,f=n+(e.right-o)*d+(e.bottom-n)*l,y=Math.min(c,u),p=Math.min(v,f),x=Math.max(v,f),M=Math.max(c,u);return{x:y,y:p,width:e.width,height:e.height,toJSON:e.toJSON,left:y,top:p,bottom:x,right:M}}function v(t,e,o=!1){const n=o?c(t):t.getBoundingClientRect(),s=o?c(e):e.getBoundingClientRect(),r=n.left+n.width/2,a=n.top+n.height/2;return{top:a-s.top,right:s.right-r,bottom:s.bottom-a,left:r-s.left}}function g(t){const e=t.style.transform.toLowerCase();return e.includes("x")?"x":e.includes("y")?"y":"z"}function u(t,e=!1){const o=(window.getComputedStyle(t).transform.match(n.regexNumberPattern)??[0,0]).map((t=>+t));let s={x:void 0!==o[4]?Math.round(o[4]):0,y:void 0!==o[5]?Math.round(o[5]):0};if(e){const e=function(t,e="x"){let o;switch(e){case"x":o=a;break;case"y":o=i;break;case"z":o=h;break;default:o=r}const n=o.exec(t.style.transform);return n?parseFloat(n[1]):0}(document.body,g(t))||0;return(0,n.rotateCoordinates)(s.x,s.y,e)}return s}new Map,window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of m)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of l)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of d)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},739:(t,e,o)=>{o.d(e,{regexNumberPattern:()=>n,rotateCoordinates:()=>s});const n=/-?\d+\.?\d*/g;function s(t,e,o){const n=Math.PI/180*o;return{x:t*Math.cos(n)-e*Math.sin(n),y:t*Math.sin(n)+e*Math.cos(n)}}}},e={};function o(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,o),r.exports}o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{o.r(n),o.d(n,{MovableElement:()=>s});var t=o(7930),e=o(1319);class s extends t.ObjectEventListener{element;movingState;intervalUpdatePosition;onBeforeMove;onAfterMove;constructor(t){if(super(),!t.element)throw new Error("Null movable element. Please pass a valid element in constructor.");this.element=t.element,this.onBeforeMove=t.onBeforeMove,this.onAfterMove=t.onAfterMove,this.movingState={pos:{x:0,y:0},delta:{dx:0,dy:0}},this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),200)}get position(){return this.movingState.pos}set position(t){this.moveToPosition(t.x,t.y)}get x(){return this.movingState.pos.x}set x(t){this.moveToPosition(t,this.y)}get y(){return this.movingState.pos.y}set y(t){this.moveToPosition(this.x,t)}setTranslate(t,e){this.callEventsByName("onBeforeMove",this.element,this),this.onBeforeMove&&this.onBeforeMove(this.element,this),this.resetTranslate(),this.element.style.transform+=`translate(${t}px, ${e}px)`,this.callEventsByName("onAfterMove",this.element,this),this.onAfterMove&&this.onAfterMove(this.element,this)}setTranslateByPoint2D(t){this.setTranslate(t.x,t.y)}updatePosition(){this.movingState.pos=(0,e.getTransformCoordsFromElement)(this.element),this.movingState.delta.dx=0,this.movingState.delta.dy=0}resetTranslate(){this.element.style.transform=this.element.style.transform.replace(e.regexRemoveTranslateFromTransform,"")}moveToPosition(t,e){this.movingState.pos={x:t+this.movingState.delta.dx,y:e+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToPoint2D(t){this.movingState.pos={x:t.x+this.movingState.delta.dx,y:t.y+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToTargetElement(t){const o=t.getBoundingClientRect(),n=(0,e.getTransformCoordsFromElement)(this.element),s=(0,e.getDistanceFromBorder)(this.element,t),r=n.x+s.right,a=n.y+s.bottom;this.setTranslateByPoint2D({x:Math.round(r-o.width),y:Math.round(a-o.height)})}moveToCenterOfTargetElement(t){const o=t.getBoundingClientRect(),n=(0,e.getTransformCoordsFromElement)(this.element),s=(0,e.getDistanceFromBorder)(this.element,t),r=n.x+s.right,a=n.y+s.bottom;this.setTranslateByPoint2D({x:Math.round(r-o.width/2),y:Math.round(a-o.height/2)})}static makeElementMovable(t){return new s({element:t})}}})(),MovableElement=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
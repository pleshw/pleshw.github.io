var CollisionAction;(()=>{"use strict";var t={6033:(t,e,n)=>{n.d(e,{BorderDistanceExtras:()=>i});class i{collisionBorderDistances;constructor(t){this.collisionBorderDistances=t}anyGreaterThan(t){return this.collisionBorderDistances.top>t||this.collisionBorderDistances.right>t||this.collisionBorderDistances.bottom>t||this.collisionBorderDistances.left>t}anyLowerThan(t){return this.collisionBorderDistances.top<t||this.collisionBorderDistances.right<t||this.collisionBorderDistances.bottom<t||this.collisionBorderDistances.left<t}anyEquals(t){return this.collisionBorderDistances.top===t||this.collisionBorderDistances.right===t||this.collisionBorderDistances.bottom===t||this.collisionBorderDistances.left===t}}},3125:(t,e,n)=>{n.r(e),n.d(e,{PinCollisionEvent:()=>s.PinCollisionEvent,ShareAttributeCollisionEvent:()=>o.ShareAttributeCollisionEvent,cleanNotCollidingElementsAttributesAndClasses:()=>h,getElementsCollidingByTarget:()=>u,getElementsCollidingByTrigger:()=>p,getElementsInteractingSet:()=>v,initComplexCollisionCheck:()=>E,insertIntoEventCheckList:()=>d,mapElementsCollidingByTargets:()=>r,mapElementsTriggeringEventsByTarget:()=>l,mapTargetsCollidingByTriggerElement:()=>a,setCollisionClasses:()=>m});var i=n(1319),s=n(8488),o=n(6368);const r=new Map,a=new Map,l=new Map;let c;const g=new Map;function d(t,e,n){const i=g.get(e);i?i.push({triggerElement:t,events:n}):g.set(e,[{triggerElement:t,events:n}])}function h(t,e,n,i){t.delete(e)&&0===t.size&&i.triggerElement.classList.remove("colliding"),n.delete(i.triggerElement)&&0===n.size&&e.classList.remove("colliding")}function m(t,e){t.triggerElement.classList.add("colliding"),e.classList.add("colliding")}function u(t){return r.has(t)||r.set(t,new Set),r.get(t)}function p(t){return a.has(t)||a.set(t,new Set),a.get(t)}function f(){g.forEach((async(t,e)=>{!function(t,e){t.forEach((async t=>{const n=u(t);e.forEach((async e=>{if(e.triggerElement===t)return;const s=p(e.triggerElement);(0,i.checkElementCollision)(e.triggerElement,t,!0)?(s.add(t),n.add(e.triggerElement),m(e,t),await async function(t,e){const n=(0,i.getCollisionDirection)(t.triggerElement,e),s=(0,i.getDistanceFromBorder)(t.triggerElement,e);await Promise.all(t.events.map((i=>{i.enabled&&i.onColliding(t.triggerElement,e,n,s)})))}(e,t)):await async function(t,e,n,i){h(t,e,n,i),await Promise.all(i.events.map((t=>{t.enabled&&t.onNotColliding(i.triggerElement,e)})))}(s,t,n,e)}))}))}(Array.from(document.querySelectorAll(e)),t)})),requestAnimationFrame(f)}function E(t,e,n){d(t,e,n),c||requestAnimationFrame(f)}function v(t){return l.has(t)||l.set(t,new Set),l.get(t)}},4476:(t,e,n)=>{n.d(e,{CollisionEvent:()=>o});var i=n(7930),s=n(6033);class o extends i.ObjectEventListener{enabled=!0;isValidTargetToTriggerEvent(t,e,n){return!!this.enabled&&(!(this.checkTargetClass&&!t.classList.contains(e))&&(!n||!new s.BorderDistanceExtras(n.distanceFromBorder).anyLowerThan(n.distanceThreshold)))}}},8488:(t,e,n)=>{n.d(e,{PinCollisionEvent:()=>r});var i=n(1319),s=n(3125),o=n(4476);class r extends o.CollisionEvent{onPinEvents;onUnpinEvents;pinPositionFormula;checkTargetClass;targetClass="pin-target";constructor({pinPositionFormula:t,onPin:e,onUnpin:n,checkTargetClass:i}){super(),this.pinPositionFormula=t||void 0,this.onPinEvents=e?[e]:[],this.onUnpinEvents=n?[n]:[],this.checkTargetClass=void 0!==i&&i}async onColliding(t,e,n,o){if(!this.isValidTargetToTriggerEvent(e,this.targetClass,{distanceFromBorder:o,distanceThreshold:0}))return;const r=(0,s.getElementsInteractingSet)(e),l="total-pinned-elements";if(t.classList.contains("dragging"))return t.classList.remove("pinned"),t.classList.add("ready-to-pin"),void(r.delete(t)&&(this.onElementInteractionChange(e,r,l),!this.onUnpinEvents||this.onUnpinEvents.forEach((n=>n(t,e))),this.callEventsByName("onunpin",t,e)));this.pinPositionFormula?function(t,e,n,s){const o=e.getBoundingClientRect(),r=s(t.getBoundingClientRect(),o,(0,i.getTransformCoordsFromElement)(t),n);a(t),t.style.transform+=`translate(${r.x}px, ${r.y}px)`}(t,e,o,this.pinPositionFormula):function(t,e,n){const s=e.getBoundingClientRect(),o=(0,i.getTransformCoordsFromElement)(t),r=o.x+n.right,l=o.y+n.bottom,c=Math.round(r-s.width/2),g=Math.round(l-s.height/2);a(t),t.style.transform+=`translate(${c}px, ${g}px)`}(t,e,o),r.has(t)||(r.add(t),!this.onPinEvents||this.onPinEvents.forEach((n=>n(t,e))),this.callEventsByName("onpin",t,e)),t.classList.add("pinned"),t.classList.remove("ready-to-pin"),this.onElementInteractionChange(e,r,l)}async onNotColliding(t,e){const n=(0,s.getElementsInteractingSet)(e);n.delete(t),n.size>0?e.classList.add("has-pinned-elements"):e.classList.remove("has-pinned-elements"),s.mapTargetsCollidingByTriggerElement.has(t)||s.mapTargetsCollidingByTriggerElement.set(t,new Set);const i=s.mapTargetsCollidingByTriggerElement.get(t);i.delete(e)&&0===i.size&&t.classList.remove("pinned","ready-to-pin")}onElementInteractionChange(t,e,n){e.size>0?t.classList.add("has-pinned-elements"):t.classList.remove("has-pinned-elements"),t.setAttribute(n,e.size.toString())}}function a(t){t.style.transform=t.style.transform.replace(i.regexRemoveTranslateFromTransform,"")}},6368:(t,e,n)=>{n.d(e,{ShareAttributeCollisionEvent:()=>a});var i=n(1319),s=n(3125),o=n(4476);const r={keepAttribute:!1};class a extends o.CollisionEvent{checkTargetClass;keepAttribute;targetClass="attribute-target";constructor(t=r){super(),this.keepAttribute=t.keepAttribute||!1,this.checkTargetClass=t.checkTargetClass||!0}async onColliding(t,e,n,i){const o=t.getAttribute("shared-attribute-name"),r=t.getAttribute("shared-attribute-value");if(!r||!o||!this.isValidTargetToTriggerEvent(e,this.targetClass))return;const a=(0,s.getElementsInteractingSet)(e),l="total-sharing-attributes";t.classList.contains("dragging")?(t.classList.remove("sharing-attribute"),t.classList.add("ready-to-share-attribute"),this.handleElementInteractionShareAttribute(t,e,a,l)):(t.classList.add("sharing-attribute"),t.classList.remove("ready-to-share-attribute"),e.setAttribute(o,r),a.add(t),this.handleElementInteractionShareAttribute(t,e,a,l))}async onNotColliding(t,e){(0,s.getElementsInteractingSet)(e).size>0?e.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,e),s.mapTargetsCollidingByTriggerElement.has(t)||s.mapTargetsCollidingByTriggerElement.set(t,new Set);const n=s.mapTargetsCollidingByTriggerElement.get(t);(n.delete(e)||0===n.size)&&t.classList.remove("sharing-attribute","ready-to-share-attribute")}handleElementInteractionShareAttribute(t,e,n,i){n.size>0?e.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,e),e.setAttribute(i,n.size.toString())}onSharedAttributeEmpty(t,e){e.classList.remove("sharing-attribute");const n=t.getAttribute("shared-attribute-name");if(n){const t=(0,i.getDefaultAttributeForTarget)(e,n);t?e.setAttribute(n,t):this.keepAttribute||e.removeAttribute(n)}}}},7930:(t,e,n)=>{n.d(e,{ObjectEventListener:()=>i});class i{eventsByName=new Map;addEventListener(t,e){const n={id:crypto.randomUUID(),event:e};return this.eventsByName.has(t.toLowerCase())?(this.eventsByName.get(t.toLowerCase()).push(n),n.id):(this.eventsByName.set(t.toLowerCase(),[n]),n.id)}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}removeEventById(t){this.eventsByName.forEach(((e,n)=>{this.eventsByName.set(n,e.filter((e=>e.id!==t)))}))}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t.event(...e)))}}},1319:(t,e,n)=>{n.d(e,{checkElementCollision:()=>m,getCollisionDirection:()=>f,getDefaultAttributeForTarget:()=>p,getDistanceFromBorder:()=>E,getTransformCoordsFromElement:()=>y,regexRemoveTranslateFromTransform:()=>s});var i=n(739);const s=/translate\([^)]*\)/g,o=/rotate\((-?\d+\.?\d*)deg\)/,r=/rotateX\((-?\d+\.?\d*)deg\)/,a=/rotateY\((-?\d+\.?\d*)deg\)/,l=/rotateZ\((-?\d+\.?\d*)deg\)/,c=new Map,g=new Map,d=new Map;function h(t){const e=t.getBoundingClientRect(),n=e.left+e.width/2,i=e.top+e.height/2,s=function(){const t=function(t){switch(t){case"x":return r;case"y":return a;case"z":return l;default:return o}}(v(document.body)).exec(document.body.style.transform);return t?parseFloat(t[1]):0}(),c=Math.PI/180*s,g=Math.cos(c),d=Math.sin(c),h=n+(e.left-n)*g-(e.top-i)*d,m=i+(e.left-n)*d+(e.top-i)*g,u=n+(e.right-n)*g-(e.bottom-i)*d,p=i+(e.right-n)*d+(e.bottom-i)*g,f=Math.min(h,u),E=Math.min(m,p),y=Math.max(m,p),b=Math.max(h,u);return{x:f,y:E,width:e.width,height:e.height,toJSON:e.toJSON,left:f,top:E,bottom:y,right:b}}function m(t,e,n=!1){const i=n?h(t):t.getBoundingClientRect(),s=n?h(e):e.getBoundingClientRect();return!(i.top>s.bottom||i.right<s.left||i.bottom<s.top||i.left>s.right)}const u=new Map;function p(t,e){u.has(t)||u.set(t,new Map);let n="";const i=u.get(t);return n=(i.has(e)?i.get(e):t.getAttribute(e))||"",function(t,e,n){u.has(t)||u.set(t,new Map),u.get(t).set(e,n)}(t,e,n),n}function f(t,e,n=!1){const i=n?h(t):t.getBoundingClientRect(),s=n?h(e):e.getBoundingClientRect();return{top:i.bottom>s.top&&i.top<s.top+s.height/3,right:i.left<s.right&&i.right>s.right-s.width/3,center:i.top<s.bottom&&i.bottom>s.top&&i.left<s.right&&i.right>s.left,bottom:i.top<s.bottom-s.height/3&&i.bottom>s.bottom-s.height/3,left:i.right>s.left&&i.left<s.left+s.width/3}}function E(t,e,n=!1){const i=n?h(t):t.getBoundingClientRect(),s=n?h(e):e.getBoundingClientRect(),o=i.left+i.width/2,r=i.top+i.height/2;return{top:r-s.top,right:s.right-o,bottom:s.bottom-r,left:o-s.left}}function v(t){const e=t.style.transform.toLowerCase();return e.includes("x")?"x":e.includes("y")?"y":"z"}function y(t,e=!1){const n=(window.getComputedStyle(t).transform.match(i.regexNumberPattern)??[0,0]).map((t=>+t));let s={x:void 0!==n[4]?Math.round(n[4]):0,y:void 0!==n[5]?Math.round(n[5]):0};if(e){const e=function(t,e="x"){let n;switch(e){case"x":n=r;break;case"y":n=a;break;case"z":n=l;break;default:n=o}const i=n.exec(t.style.transform);return i?parseFloat(i[1]):0}(document.body,v(t))||0;return(0,i.rotateCoordinates)(s.x,s.y,e)}return s}window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of c)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of g)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of d)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},739:(t,e,n)=>{n.d(e,{regexNumberPattern:()=>i,rotateCoordinates:()=>s});const i=/-?\d+\.?\d*/g;function s(t,e,n){const i=Math.PI/180*n;return{x:t*Math.cos(i)-e*Math.sin(i),y:t*Math.sin(i)+e*Math.cos(i)}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i=n(3125);CollisionAction=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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V0MsRUFBV2tILEdBQ3ZELE1BQU0vQyxFQUFZN0QsS0FBSzhELEdBQUssSUFBUThDLEVBR3BDLE1BQU8sQ0FBRW5ILEVBRklBLEVBQUlPLEtBQUtnRSxJQUFLSCxHQUFZbkUsRUFBSU0sS0FBS2tFLElBQUtMLEdBRW5DbkUsRUFETEQsRUFBSU8sS0FBS2tFLElBQUtMLEdBQVluRSxFQUFJTSxLQUFLZ0UsSUFBS0gsR0FFdkQsQyxHQ3BDSWdELEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQnRJLElBQWpCdUksRUFDSCxPQUFPQSxFQUFhQyxRQUdyQixJQUFJQyxFQUFTTCxFQUF5QkUsR0FBWSxDQUdqREUsUUFBUyxDQUFDLEdBT1gsT0FIQUUsRUFBb0JKLEdBQVVHLEVBQVFBLEVBQU9ELFFBQVNILEdBRy9DSSxFQUFPRCxPQUNmLENDckJBSCxFQUFvQk0sRUFBSSxDQUFDSCxFQUFTSSxLQUNqQyxJQUFJLElBQUloRixLQUFPZ0YsRUFDWFAsRUFBb0JRLEVBQUVELEVBQVloRixLQUFTeUUsRUFBb0JRLEVBQUVMLEVBQVM1RSxJQUM1RWtGLE9BQU9DLGVBQWVQLEVBQVM1RSxFQUFLLENBQUVvRixZQUFZLEVBQU1yTixJQUFLaU4sRUFBV2hGLElBRTFFLEVDTkR5RSxFQUFvQlEsRUFBSSxDQUFDSSxFQUFLQyxJQUFVSixPQUFPSyxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxHQ0NsRmIsRUFBb0JpQixFQUFLZCxJQUNILG9CQUFYZSxRQUEwQkEsT0FBT0MsYUFDMUNWLE9BQU9DLGVBQWVQLEVBQVNlLE9BQU9DLFlBQWEsQ0FBRTdGLE1BQU8sV0FFN0RtRixPQUFPQyxlQUFlUCxFQUFTLGFBQWMsQ0FBRTdFLE9BQU8sR0FBTyxFQ0Y5RCxJQUFJOEYsRUFBc0JwQixFQUFvQixNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL0V4dHJhcy9Db2xsaXNpb25FdmVudHMvQm9yZGVyRGlzdGFuY2VFeHRyYXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V4dHJhcy9Db2xsaXNpb25FdmVudHMvQ29sbGlzaW9uQWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9FeHRyYXMvQ29sbGlzaW9uRXZlbnRzL0NvbGxpc2lvbkV2ZW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRXh0cmFzL0NvbGxpc2lvbkV2ZW50cy9QaW5Db2xsaXNpb25FdmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRXh0cmFzL0NvbGxpc2lvbkV2ZW50cy9TaGFyZUF0dHJpYnV0ZUNvbGxpc2lvbkV2ZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9FeHRyYXMvT2JqZWN0RXZlbnRMaXN0ZW5lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVG9vbHMvRE9NVG9vbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xzL01hdGhUb29scy50cyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvcmRlckRpc3RhbmNlIH0gZnJvbSAnLi9UeXBlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQm9yZGVyRGlzdGFuY2VFeHRyYXMge1xyXG4gIGNvbGxpc2lvbkJvcmRlckRpc3RhbmNlczogQm9yZGVyRGlzdGFuY2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCBjb2xsaXNpb25Cb3JkZXJEaXN0YW5jZTogQm9yZGVyRGlzdGFuY2UgKSB7XHJcbiAgICB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcyA9IGNvbGxpc2lvbkJvcmRlckRpc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFueUdyZWF0ZXJUaGFuKCBudW06IG51bWJlciApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy50b3AgPiBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMucmlnaHQgPiBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMuYm90dG9tID4gbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmxlZnQgPiBudW07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYW55TG93ZXJUaGFuKCBudW06IG51bWJlciApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy50b3AgPCBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMucmlnaHQgPCBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMuYm90dG9tIDwgbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmxlZnQgPCBudW07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYW55RXF1YWxzKCBudW06IG51bWJlciApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy50b3AgPT09IG51bVxyXG4gICAgICB8fCB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy5yaWdodCA9PT0gbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmJvdHRvbSA9PT0gbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmxlZnQgPT09IG51bTtcclxuICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IGNoZWNrRWxlbWVudENvbGxpc2lvbiwgZ2V0Q29sbGlzaW9uRGlyZWN0aW9uLCBnZXREaXN0YW5jZUZyb21Cb3JkZXIgfSBmcm9tICcuLi8uLi9Ub29scy9ET01Ub29scyc7XHJcbmltcG9ydCB7IENvbGxpc2lvbkV2ZW50IH0gZnJvbSAnLi9Db2xsaXNpb25FdmVudHMnO1xyXG5pbXBvcnQgeyBQaW5Db2xsaXNpb25FdmVudCwgUGluUG9zaXRpb25Gb3JtdWxhIH0gZnJvbSAnLi9QaW5Db2xsaXNpb25FdmVudCc7XHJcbmltcG9ydCB7IFNoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnQgfSBmcm9tICcuL1NoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnQnO1xyXG5pbXBvcnQgeyBDb2xsaXNpb25UcmlnZ2VyT3B0aW9ucyB9IGZyb20gJy4vVHlwZXMnO1xyXG5cclxuXHJcbmV4cG9ydCB7IFNoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnQsIFBpbkNvbGxpc2lvbkV2ZW50LCBQaW5Qb3NpdGlvbkZvcm11bGEgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBtYXBFbGVtZW50c0NvbGxpZGluZ0J5VGFyZ2V0cyA9IG5ldyBNYXA8SFRNTEVsZW1lbnQsIFNldDxIVE1MRWxlbWVudD4+KCk7XHJcbmV4cG9ydCBjb25zdCBtYXBUYXJnZXRzQ29sbGlkaW5nQnlUcmlnZ2VyRWxlbWVudCA9IG5ldyBNYXA8SFRNTEVsZW1lbnQsIFNldDxIVE1MRWxlbWVudD4+KCk7XHJcbmV4cG9ydCBjb25zdCBtYXBFbGVtZW50c1RyaWdnZXJpbmdFdmVudHNCeVRhcmdldCA9IG5ldyBNYXA8SFRNTEVsZW1lbnQsIFNldDxIVE1MRWxlbWVudD4+KCk7XHJcblxyXG5sZXQgY29sbGlzaW9uQ2hlY2tJbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQ7XHJcbmNvbnN0IGNvbGxpc2lvbkV2ZW50c0J5U2VsZWN0b3JzID0gbmV3IE1hcDxzdHJpbmcsIENvbGxpc2lvblRyaWdnZXJPcHRpb25zW10+KCk7XHJcblxyXG4vLy8gcHVzaCBldmVudHMgdG8gYSBkaWN0aW9uYXJ5IGFuZCBpZiB0aGV5IGV4aXN0IGp1c3QgYWRkIG5ldyB0YXJnZXRzIHRvIHRoZW1cclxuZXhwb3J0IGZ1bmN0aW9uIGluc2VydEludG9FdmVudENoZWNrTGlzdCggZWxlbWVudFRvQ2hlY2s6IEhUTUxFbGVtZW50LCB0YXJnZXRRdWVyeVNlbGVjdG9yOiBzdHJpbmcsIGNvbGxpc2lvbkV2ZW50czogQ29sbGlzaW9uRXZlbnRbXSApIHtcclxuICBjb25zdCByZWZFeGlzdGluZ0V2ZW50OiBDb2xsaXNpb25UcmlnZ2VyT3B0aW9uc1tdIHwgdW5kZWZpbmVkID0gY29sbGlzaW9uRXZlbnRzQnlTZWxlY3RvcnMuZ2V0KCB0YXJnZXRRdWVyeVNlbGVjdG9yICk7XHJcbiAgaWYgKCByZWZFeGlzdGluZ0V2ZW50ICkge1xyXG4gICAgcmVmRXhpc3RpbmdFdmVudC5wdXNoKCB7XHJcbiAgICAgIHRyaWdnZXJFbGVtZW50OiBlbGVtZW50VG9DaGVjayxcclxuICAgICAgZXZlbnRzOiBjb2xsaXNpb25FdmVudHNcclxuICAgIH0gKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29sbGlzaW9uRXZlbnRzQnlTZWxlY3RvcnMuc2V0KCB0YXJnZXRRdWVyeVNlbGVjdG9yLCBbe1xyXG4gICAgICB0cmlnZ2VyRWxlbWVudDogZWxlbWVudFRvQ2hlY2ssXHJcbiAgICAgIGV2ZW50czogY29sbGlzaW9uRXZlbnRzXHJcbiAgICB9XSApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuTm90Q29sbGlkaW5nRWxlbWVudHNBdHRyaWJ1dGVzQW5kQ2xhc3NlcyggdHJpZ2dlckVsZW1lbnRzQ29sbGlzaW9uOiBTZXQ8SFRNTEVsZW1lbnQ+LCB0YXJnZXQ6IEhUTUxFbGVtZW50LCB0YXJnZXRDb2xsaXNpb246IFNldDxIVE1MRWxlbWVudD4sIGFnZW50OiBDb2xsaXNpb25UcmlnZ2VyT3B0aW9ucyApIHtcclxuICBpZiAoIHRyaWdnZXJFbGVtZW50c0NvbGxpc2lvbi5kZWxldGUoIHRhcmdldCBhcyBIVE1MRWxlbWVudCApICYmIHRyaWdnZXJFbGVtZW50c0NvbGxpc2lvbi5zaXplID09PSAwICkge1xyXG4gICAgYWdlbnQudHJpZ2dlckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ2NvbGxpZGluZycgKTtcclxuICB9XHJcblxyXG4gIGlmICggdGFyZ2V0Q29sbGlzaW9uLmRlbGV0ZSggYWdlbnQudHJpZ2dlckVsZW1lbnQgKSAmJiB0YXJnZXRDb2xsaXNpb24uc2l6ZSA9PT0gMCApIHtcclxuICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCAnY29sbGlkaW5nJyApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldENvbGxpc2lvbkNsYXNzZXMoIGNvbGxpc2lvblRyaWdnZXI6IENvbGxpc2lvblRyaWdnZXJPcHRpb25zLCB0YXJnZXQ6IEhUTUxFbGVtZW50ICkge1xyXG4gIGNvbGxpc2lvblRyaWdnZXIudHJpZ2dlckVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ2NvbGxpZGluZycgKTtcclxuICB0YXJnZXQuY2xhc3NMaXN0LmFkZCggJ2NvbGxpZGluZycgKTtcclxufVxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHRyaWdnZXJDb2xsaXNpb25FdmVudHNBc3luYyggY29sbGlzaW9uVHJpZ2dlcjogQ29sbGlzaW9uVHJpZ2dlck9wdGlvbnMsIHRhcmdldDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgY29uc3QgY29sbGlkaW5nQXQgPSBnZXRDb2xsaXNpb25EaXJlY3Rpb24oIGNvbGxpc2lvblRyaWdnZXIudHJpZ2dlckVsZW1lbnQsIHRhcmdldCApO1xyXG4gIGNvbnN0IGRpc3RhbmNlRnJvbUJvcmRlciA9IGdldERpc3RhbmNlRnJvbUJvcmRlciggY29sbGlzaW9uVHJpZ2dlci50cmlnZ2VyRWxlbWVudCwgdGFyZ2V0ICk7XHJcbiAgYXdhaXQgUHJvbWlzZS5hbGwoIGNvbGxpc2lvblRyaWdnZXIuZXZlbnRzLm1hcCggZXZlbnQgPT4ge1xyXG4gICAgaWYgKCAhZXZlbnQuZW5hYmxlZCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50Lm9uQ29sbGlkaW5nKFxyXG4gICAgICBjb2xsaXNpb25UcmlnZ2VyLnRyaWdnZXJFbGVtZW50LFxyXG4gICAgICB0YXJnZXQsXHJcbiAgICAgIGNvbGxpZGluZ0F0LFxyXG4gICAgICBkaXN0YW5jZUZyb21Cb3JkZXJcclxuICAgICk7XHJcbiAgfSApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50c0NvbGxpZGluZ0J5VGFyZ2V0KCB0YXJnZXQ6IEhUTUxFbGVtZW50ICk6IFNldDxIVE1MRWxlbWVudD4ge1xyXG4gIGlmICggIW1hcEVsZW1lbnRzQ29sbGlkaW5nQnlUYXJnZXRzLmhhcyggdGFyZ2V0ICkgKSB7XHJcbiAgICBtYXBFbGVtZW50c0NvbGxpZGluZ0J5VGFyZ2V0cy5zZXQoIHRhcmdldCwgbmV3IFNldDxIVE1MRWxlbWVudD4oKSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1hcEVsZW1lbnRzQ29sbGlkaW5nQnlUYXJnZXRzLmdldCggdGFyZ2V0ICkhO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudHNDb2xsaWRpbmdCeVRyaWdnZXIoIHRyaWdnZXJFbGVtZW50OiBIVE1MRWxlbWVudCApOiBTZXQ8SFRNTEVsZW1lbnQ+IHtcclxuICBpZiAoICFtYXBUYXJnZXRzQ29sbGlkaW5nQnlUcmlnZ2VyRWxlbWVudC5oYXMoIHRyaWdnZXJFbGVtZW50ICkgKSB7XHJcbiAgICBtYXBUYXJnZXRzQ29sbGlkaW5nQnlUcmlnZ2VyRWxlbWVudC5zZXQoIHRyaWdnZXJFbGVtZW50LCBuZXcgU2V0PEhUTUxFbGVtZW50PigpICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbWFwVGFyZ2V0c0NvbGxpZGluZ0J5VHJpZ2dlckVsZW1lbnQuZ2V0KCB0cmlnZ2VyRWxlbWVudCApITtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q29sbGlzaW9uQ2hlY2soKSB7XHJcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBjaGVja0VhY2hFbGVtZW50Q29sbGlzaW9uIClcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tFYWNoRWxlbWVudENvbGxpc2lvbigpIHtcclxuICBjb2xsaXNpb25FdmVudHNCeVNlbGVjdG9ycy5mb3JFYWNoKCBhc3luYyAoIGNvbGxpc2lvblRyaWdnZXJzLCBjb2xsaXNpb25UYXJnZXRTZWxlY3RvcnMgKSA9PiB7XHJcbiAgICBjb25zdCBhcnJUYXJnZXRzID0gQXJyYXkuZnJvbSggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggY29sbGlzaW9uVGFyZ2V0U2VsZWN0b3JzICkgKSBhcyBIVE1MRWxlbWVudFtdO1xyXG5cclxuICAgIHNldENvbGxpc2lvbkV2ZW50c0ZvclRhcmdldHMoIGFyclRhcmdldHMsIGNvbGxpc2lvblRyaWdnZXJzICk7XHJcbiAgfSApO1xyXG5cclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIGNoZWNrRWFjaEVsZW1lbnRDb2xsaXNpb24gKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q29sbGlzaW9uRXZlbnRzRm9yVGFyZ2V0cyggYXJyVGFyZ2V0czogSFRNTEVsZW1lbnRbXSwgY29sbGlzaW9uVHJpZ2dlcnM6IENvbGxpc2lvblRyaWdnZXJPcHRpb25zW10gKSB7XHJcbiAgYXJyVGFyZ2V0cy5mb3JFYWNoKCBhc3luYyB0YXJnZXQgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0Q29sbGlzaW9uU2V0OiBTZXQ8SFRNTEVsZW1lbnQ+ID0gZ2V0RWxlbWVudHNDb2xsaWRpbmdCeVRhcmdldCggdGFyZ2V0ICk7XHJcblxyXG4gICAgY29sbGlzaW9uVHJpZ2dlcnMuZm9yRWFjaCggYXN5bmMgdHJpZ2dlciA9PiB7XHJcbiAgICAgIGlmICggdHJpZ2dlci50cmlnZ2VyRWxlbWVudCA9PT0gdGFyZ2V0ICkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdHJpZ2dlckNvbGxpc2lvblNldDogU2V0PEhUTUxFbGVtZW50PiA9IGdldEVsZW1lbnRzQ29sbGlkaW5nQnlUcmlnZ2VyKCB0cmlnZ2VyLnRyaWdnZXJFbGVtZW50ICk7XHJcblxyXG4gICAgICBjb25zdCBpc0NvbGxpc2lvbjogYm9vbGVhbiA9IGNoZWNrRWxlbWVudENvbGxpc2lvbiggdHJpZ2dlci50cmlnZ2VyRWxlbWVudCwgdGFyZ2V0LCB0cnVlICk7XHJcblxyXG4gICAgICBpZiAoICFpc0NvbGxpc2lvbiApIHtcclxuICAgICAgICBhd2FpdCBvbkVsZW1lbnRzTm90Q29sbGlkaW5nKCB0cmlnZ2VyQ29sbGlzaW9uU2V0LCB0YXJnZXQsIHRhcmdldENvbGxpc2lvblNldCwgdHJpZ2dlciApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdHJpZ2dlckNvbGxpc2lvblNldC5hZGQoIHRhcmdldCApO1xyXG4gICAgICB0YXJnZXRDb2xsaXNpb25TZXQuYWRkKCB0cmlnZ2VyLnRyaWdnZXJFbGVtZW50ICk7XHJcblxyXG4gICAgICBzZXRDb2xsaXNpb25DbGFzc2VzKCB0cmlnZ2VyLCB0YXJnZXQgKTtcclxuXHJcbiAgICAgIGF3YWl0IHRyaWdnZXJDb2xsaXNpb25FdmVudHNBc3luYyggdHJpZ2dlciwgdGFyZ2V0ICk7XHJcbiAgICB9ICk7XHJcbiAgfSApO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBvbkVsZW1lbnRzTm90Q29sbGlkaW5nKCB0cmlnZ2VyQ29sbGlzaW9uU2V0OiBTZXQ8SFRNTEVsZW1lbnQ+LCB0YXJnZXQ6IEhUTUxFbGVtZW50LCB0YXJnZXRDb2xsaXNpb25TZXQ6IFNldDxIVE1MRWxlbWVudD4sIHRyaWdnZXI6IENvbGxpc2lvblRyaWdnZXJPcHRpb25zICkge1xyXG4gIGNsZWFuTm90Q29sbGlkaW5nRWxlbWVudHNBdHRyaWJ1dGVzQW5kQ2xhc3NlcyhcclxuICAgIHRyaWdnZXJDb2xsaXNpb25TZXQsXHJcbiAgICB0YXJnZXQsXHJcbiAgICB0YXJnZXRDb2xsaXNpb25TZXQsXHJcbiAgICB0cmlnZ2VyXHJcbiAgKTtcclxuXHJcbiAgYXdhaXQgUHJvbWlzZS5hbGwoIHRyaWdnZXIuZXZlbnRzLm1hcCggZXZlbnQgPT4ge1xyXG4gICAgaWYgKCAhZXZlbnQuZW5hYmxlZCApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50Lm9uTm90Q29sbGlkaW5nKFxyXG4gICAgICB0cmlnZ2VyLnRyaWdnZXJFbGVtZW50LFxyXG4gICAgICB0YXJnZXRcclxuICAgICk7XHJcbiAgfSApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0Q29tcGxleENvbGxpc2lvbkNoZWNrKCBlbGVtZW50VG9DaGVjazogSFRNTEVsZW1lbnQsIHRhcmdldFF1ZXJ5U2VsZWN0b3I6IHN0cmluZywgY29sbGlzaW9uRXZlbnRzOiBDb2xsaXNpb25FdmVudFtdICk6IHZvaWQge1xyXG4gIGluc2VydEludG9FdmVudENoZWNrTGlzdCggZWxlbWVudFRvQ2hlY2ssIHRhcmdldFF1ZXJ5U2VsZWN0b3IsIGNvbGxpc2lvbkV2ZW50cyApO1xyXG5cclxuICBpZiAoIGNvbGxpc2lvbkNoZWNrSW50ZXJ2YWwgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBzZXRDb2xsaXNpb25DaGVjaygpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudHNJbnRlcmFjdGluZ1NldCggdGFyZ2V0OiBIVE1MRWxlbWVudCApOiBTZXQ8SFRNTEVsZW1lbnQ+IHtcclxuICBpZiAoICFtYXBFbGVtZW50c1RyaWdnZXJpbmdFdmVudHNCeVRhcmdldC5oYXMoIHRhcmdldCApICkge1xyXG4gICAgbWFwRWxlbWVudHNUcmlnZ2VyaW5nRXZlbnRzQnlUYXJnZXQuc2V0KCB0YXJnZXQsIG5ldyBTZXQ8SFRNTEVsZW1lbnQ+KCkgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBtYXBFbGVtZW50c1RyaWdnZXJpbmdFdmVudHNCeVRhcmdldC5nZXQoIHRhcmdldCApITtcclxufVxyXG4iLCJpbXBvcnQgeyBPYmplY3RFdmVudExpc3RlbmVyIH0gZnJvbSAnLi4vT2JqZWN0RXZlbnRMaXN0ZW5lcic7XHJcbmltcG9ydCB7IEJvcmRlckRpc3RhbmNlRXh0cmFzIH0gZnJvbSAnLi9Cb3JkZXJEaXN0YW5jZUV4dHJhcyc7XHJcbmltcG9ydCB7IFBpbkNvbGxpc2lvbkV2ZW50LCBQaW5Qb3NpdGlvbkZvcm11bGEgfSBmcm9tICcuL1BpbkNvbGxpc2lvbkV2ZW50JztcclxuaW1wb3J0IHsgU2hhcmVBdHRyaWJ1dGVDb2xsaXNpb25FdmVudCB9IGZyb20gJy4vU2hhcmVBdHRyaWJ1dGVDb2xsaXNpb25FdmVudCc7XHJcbmltcG9ydCB7IEJvcmRlckRpc3RhbmNlLCBDb2xsaXNpb25EaXJlY3Rpb25DaGVjaywgSUNvbGxpc2lvbkV2ZW50IH0gZnJvbSAnLi9UeXBlcyc7XHJcblxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbGxpc2lvbkV2ZW50IGV4dGVuZHMgT2JqZWN0RXZlbnRMaXN0ZW5lciBpbXBsZW1lbnRzIElDb2xsaXNpb25FdmVudCB7XHJcbiAgYWJzdHJhY3QgdGFyZ2V0Q2xhc3M6IHN0cmluZztcclxuICBhYnN0cmFjdCBjaGVja1RhcmdldENsYXNzOiBib29sZWFuO1xyXG5cclxuICBwdWJsaWMgZW5hYmxlZDogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gIGlzVmFsaWRUYXJnZXRUb1RyaWdnZXJFdmVudCggY3VycmVudFRhcmdldDogSFRNTEVsZW1lbnQsIHRhcmdldENsYXNzTmFtZTogc3RyaW5nLCB2YWxpZGF0ZURpc3RhbmNlPzogeyBkaXN0YW5jZVRocmVzaG9sZDogbnVtYmVyLCBkaXN0YW5jZUZyb21Cb3JkZXI6IEJvcmRlckRpc3RhbmNlIH0gKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoICF0aGlzLmVuYWJsZWQgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIHRoaXMuY2hlY2tUYXJnZXRDbGFzcyAmJiAhY3VycmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoIHRhcmdldENsYXNzTmFtZSApICkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCB2YWxpZGF0ZURpc3RhbmNlICkge1xyXG4gICAgICAvLy8gQ2hlY2tzIGhvdyBtYW55IHBpeGVscyB0aGUgZHJhZ2dhYmxlIGlzIGluc2lkZSBmcm9tIGVhY2ggYm9yZGVyOyBpZiB0aGUgZWxlbWVudCBpcyBvdmVyIHRoZSB0aHJlc2hvbGQgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIHRydWU7XHJcbiAgICAgIGNvbnN0IGNvbGxpc2lvbkJvcmRlckRpc3RhbmNlRXh0cmFzID0gbmV3IEJvcmRlckRpc3RhbmNlRXh0cmFzKCB2YWxpZGF0ZURpc3RhbmNlLmRpc3RhbmNlRnJvbUJvcmRlciApO1xyXG4gICAgICBpZiAoIGNvbGxpc2lvbkJvcmRlckRpc3RhbmNlRXh0cmFzLmFueUxvd2VyVGhhbiggdmFsaWRhdGVEaXN0YW5jZS5kaXN0YW5jZVRocmVzaG9sZCApICkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgYWJzdHJhY3Qgb25Db2xsaWRpbmcoIGRyYWdnYWJsZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQsIGNvbGxpZGluZ0F0OiBDb2xsaXNpb25EaXJlY3Rpb25DaGVjaywgZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSApOiBQcm9taXNlPHZvaWQ+O1xyXG4gIGFic3RyYWN0IG9uTm90Q29sbGlkaW5nKCBkcmFnZ2FibGU6IEhUTUxFbGVtZW50LCB0YXJnZXQ6IEhUTUxFbGVtZW50ICk6IFByb21pc2U8dm9pZD47XHJcbn1cclxuIiwiaW1wb3J0IHsgZ2V0VHJhbnNmb3JtQ29vcmRzRnJvbUVsZW1lbnQsIHJlZ2V4UmVtb3ZlVHJhbnNsYXRlRnJvbVRyYW5zZm9ybSB9IGZyb20gJy4uLy4uL1Rvb2xzL0RPTVRvb2xzJztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudHNJbnRlcmFjdGluZ1NldCwgbWFwVGFyZ2V0c0NvbGxpZGluZ0J5VHJpZ2dlckVsZW1lbnQgfSBmcm9tICcuL0NvbGxpc2lvbkFjdGlvbic7XHJcbmltcG9ydCB7IFBvaW50MkQgfSBmcm9tICcuLi8uLi9Ub29scy9NYXRoVG9vbHMnO1xyXG5pbXBvcnQgeyBDb2xsaXNpb25EaXJlY3Rpb25DaGVjaywgQm9yZGVyRGlzdGFuY2UgfSBmcm9tICcuL1R5cGVzJztcclxuaW1wb3J0IHsgQ29sbGlzaW9uRXZlbnQgfSBmcm9tICcuL0NvbGxpc2lvbkV2ZW50cyc7XHJcblxyXG5leHBvcnQgdHlwZSBQaW5Qb3NpdGlvbkZvcm11bGEgPSAoICggZHJhZ2dhYmxlUmVjdDogRE9NUmVjdCwgdGFyZ2V0UmVjdDogRE9NUmVjdCwgZHJhZ2dhYmxlVHJhbnNmb3JtUG9zaXRpb246IFBvaW50MkQsIGRpc3RhbmNlRnJvbUJvcmRlcjogQm9yZGVyRGlzdGFuY2UgKSA9PiBQb2ludDJEIClcclxuXHJcbmV4cG9ydCB0eXBlIE9uUGluRXZlbnQgPSAoICggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCApID0+IHZvaWQgKVxyXG5cclxuZXhwb3J0IGNsYXNzIFBpbkNvbGxpc2lvbkV2ZW50IGV4dGVuZHMgQ29sbGlzaW9uRXZlbnQge1xyXG4gIHByaXZhdGUgb25QaW5FdmVudHM/OiBPblBpbkV2ZW50W107XHJcbiAgcHJpdmF0ZSBvblVucGluRXZlbnRzPzogT25QaW5FdmVudFtdO1xyXG4gIHByaXZhdGUgcGluUG9zaXRpb25Gb3JtdWxhPzogUGluUG9zaXRpb25Gb3JtdWxhO1xyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgY2hlY2tUYXJnZXRDbGFzczogYm9vbGVhbjtcclxuICBwdWJsaWMgb3ZlcnJpZGUgdGFyZ2V0Q2xhc3M6IHN0cmluZyA9ICdwaW4tdGFyZ2V0JztcclxuXHJcbiAgY29uc3RydWN0b3IoIHsgcGluUG9zaXRpb25Gb3JtdWxhLCBvblBpbiwgb25VbnBpbiwgY2hlY2tUYXJnZXRDbGFzcyB9OiBQaW5Db2xsaXNpb25FdmVudE9wdGlvbnMgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5waW5Qb3NpdGlvbkZvcm11bGEgPSBwaW5Qb3NpdGlvbkZvcm11bGEgfHwgdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5vblBpbkV2ZW50cyA9IG9uUGluID8gW29uUGluXSA6IFtdO1xyXG4gICAgdGhpcy5vblVucGluRXZlbnRzID0gb25VbnBpbiA/IFtvblVucGluXSA6IFtdO1xyXG4gICAgdGhpcy5jaGVja1RhcmdldENsYXNzID0gY2hlY2tUYXJnZXRDbGFzcyAhPT0gdW5kZWZpbmVkICYmIGNoZWNrVGFyZ2V0Q2xhc3M7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgb25Db2xsaWRpbmcoIG1haW5FbGVtZW50OiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgX2NvbGxpZGluZ0F0OiBDb2xsaXNpb25EaXJlY3Rpb25DaGVjaywgZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSApIHtcclxuICAgIGlmICggIXRoaXMuaXNWYWxpZFRhcmdldFRvVHJpZ2dlckV2ZW50KCB0YXJnZXQsIHRoaXMudGFyZ2V0Q2xhc3MsIHtcclxuICAgICAgZGlzdGFuY2VGcm9tQm9yZGVyOiBkaXN0YW5jZUZyb21Cb3JkZXIsXHJcbiAgICAgIGRpc3RhbmNlVGhyZXNob2xkOiAwXHJcbiAgICB9ICkgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlbGVtZW50c0ludGVyYWN0aW5nU2V0OiBTZXQ8SFRNTEVsZW1lbnQ+ID0gZ2V0RWxlbWVudHNJbnRlcmFjdGluZ1NldCggdGFyZ2V0ICk7XHJcbiAgICBjb25zdCBuYW1lQ291bnRFbGVtZW50c0ludGVyYWN0aW5nQXR0cmlidXRlID0gJ3RvdGFsLXBpbm5lZC1lbGVtZW50cyc7XHJcbiAgICBpZiAoIG1haW5FbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyggJ2RyYWdnaW5nJyApICkge1xyXG4gICAgICBtYWluRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAncGlubmVkJyApO1xyXG4gICAgICBtYWluRWxlbWVudC5jbGFzc0xpc3QuYWRkKCAncmVhZHktdG8tcGluJyApO1xyXG5cclxuICAgICAgaWYgKCBlbGVtZW50c0ludGVyYWN0aW5nU2V0LmRlbGV0ZSggbWFpbkVsZW1lbnQgKSApIHtcclxuICAgICAgICB0aGlzLm9uRWxlbWVudEludGVyYWN0aW9uQ2hhbmdlKCB0YXJnZXQsIGVsZW1lbnRzSW50ZXJhY3RpbmdTZXQsIG5hbWVDb3VudEVsZW1lbnRzSW50ZXJhY3RpbmdBdHRyaWJ1dGUgKTtcclxuICAgICAgICB0aGlzLm9uVW5waW5FdmVudHMgPyB0aGlzLm9uVW5waW5FdmVudHMuZm9yRWFjaCggZXYgPT4gZXYoIG1haW5FbGVtZW50LCB0YXJnZXQgKSApIDoge307XHJcbiAgICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb251bnBpbicsIG1haW5FbGVtZW50LCB0YXJnZXQgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggdGhpcy5waW5Qb3NpdGlvbkZvcm11bGEgKSB7XHJcbiAgICAgIHBpbkVsZW1lbnRCeUZvcm11bGEoIG1haW5FbGVtZW50LCB0YXJnZXQsIGRpc3RhbmNlRnJvbUJvcmRlciwgdGhpcy5waW5Qb3NpdGlvbkZvcm11bGEgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBpbkVsZW1lbnRPbkNlbnRlciggbWFpbkVsZW1lbnQsIHRhcmdldCwgZGlzdGFuY2VGcm9tQm9yZGVyICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhZWxlbWVudHNJbnRlcmFjdGluZ1NldC5oYXMoIG1haW5FbGVtZW50ICkgKSB7XHJcbiAgICAgIGVsZW1lbnRzSW50ZXJhY3RpbmdTZXQuYWRkKCBtYWluRWxlbWVudCApO1xyXG4gICAgICB0aGlzLm9uUGluRXZlbnRzID8gdGhpcy5vblBpbkV2ZW50cy5mb3JFYWNoKCBldiA9PiBldiggbWFpbkVsZW1lbnQsIHRhcmdldCApICkgOiB7fTtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25waW4nLCBtYWluRWxlbWVudCwgdGFyZ2V0ICk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG1haW5FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdwaW5uZWQnICk7XHJcbiAgICBtYWluRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAncmVhZHktdG8tcGluJyApO1xyXG4gICAgdGhpcy5vbkVsZW1lbnRJbnRlcmFjdGlvbkNoYW5nZSggdGFyZ2V0LCBlbGVtZW50c0ludGVyYWN0aW5nU2V0LCBuYW1lQ291bnRFbGVtZW50c0ludGVyYWN0aW5nQXR0cmlidXRlICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgb25Ob3RDb2xsaWRpbmcoIGRyYWdnYWJsZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgICBjb25zdCBlbGVtZW50c0ludGVyYWN0aW5nU2V0OiBTZXQ8SFRNTEVsZW1lbnQ+ID0gZ2V0RWxlbWVudHNJbnRlcmFjdGluZ1NldCggdGFyZ2V0ICk7XHJcbiAgICBlbGVtZW50c0ludGVyYWN0aW5nU2V0LmRlbGV0ZSggZHJhZ2dhYmxlICk7XHJcblxyXG4gICAgaWYgKCBlbGVtZW50c0ludGVyYWN0aW5nU2V0LnNpemUgPiAwICkge1xyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCggJ2hhcy1waW5uZWQtZWxlbWVudHMnICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSggJ2hhcy1waW5uZWQtZWxlbWVudHMnICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhbWFwVGFyZ2V0c0NvbGxpZGluZ0J5VHJpZ2dlckVsZW1lbnQuaGFzKCBkcmFnZ2FibGUgKSApIHtcclxuICAgICAgbWFwVGFyZ2V0c0NvbGxpZGluZ0J5VHJpZ2dlckVsZW1lbnQuc2V0KCBkcmFnZ2FibGUsIG5ldyBTZXQ8SFRNTEVsZW1lbnQ+KCkgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhZ2VudENvbGxpc2lvblNldCA9IG1hcFRhcmdldHNDb2xsaWRpbmdCeVRyaWdnZXJFbGVtZW50LmdldCggZHJhZ2dhYmxlICkhO1xyXG4gICAgaWYgKCBhZ2VudENvbGxpc2lvblNldC5kZWxldGUoIHRhcmdldCBhcyBIVE1MRWxlbWVudCApICYmIGFnZW50Q29sbGlzaW9uU2V0LnNpemUgPT09IDAgKSB7XHJcbiAgICAgIGRyYWdnYWJsZS5jbGFzc0xpc3QucmVtb3ZlKCAncGlubmVkJywgJ3JlYWR5LXRvLXBpbicgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgb25FbGVtZW50SW50ZXJhY3Rpb25DaGFuZ2UoIHRhcmdldDogSFRNTEVsZW1lbnQsIGVsZW1lbnRzSW50ZXJhY3RpbmdTZXQ6IFNldDxIVE1MRWxlbWVudD4sIG5hbWVDb3VudEVsZW1lbnRzSW50ZXJhY3RpbmdBdHRyaWJ1dGU6IHN0cmluZyApIHtcclxuICAgIGlmICggZWxlbWVudHNJbnRlcmFjdGluZ1NldC5zaXplID4gMCApIHtcclxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoICdoYXMtcGlubmVkLWVsZW1lbnRzJyApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoICdoYXMtcGlubmVkLWVsZW1lbnRzJyApO1xyXG4gICAgfVxyXG5cclxuICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoIG5hbWVDb3VudEVsZW1lbnRzSW50ZXJhY3RpbmdBdHRyaWJ1dGUsIGVsZW1lbnRzSW50ZXJhY3RpbmdTZXQuc2l6ZS50b1N0cmluZygpICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBQaW5Db2xsaXNpb25FdmVudE9wdGlvbnMgPSB7XHJcbiAgY2hlY2tUYXJnZXRDbGFzcz86IGJvb2xlYW47XHJcbiAgcGluUG9zaXRpb25Gb3JtdWxhPzogUGluUG9zaXRpb25Gb3JtdWxhO1xyXG4gIG9uUGluPzogT25QaW5FdmVudDtcclxuICBvblVucGluPzogT25QaW5FdmVudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBpbkNvbGxpc2lvbkZvcm11bGFUb3BMZWZ0KCBkcmFnZ2FibGVSZWN0OiBET01SZWN0LCB0YXJnZXRSZWN0OiBET01SZWN0LCBkcmFnZ2FibGVUcmFuc2Zvcm1Qb3NpdGlvbjogUG9pbnQyRCwgZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSwgbWFyZ2luTGVmdDogbnVtYmVyID0gMTAsIG1hcmdpblRvcDogbnVtYmVyID0gMTAgKSB7XHJcbiAgY29uc3QgdGFyZ2V0TGVmdFBvc2l0aW9uID0gZHJhZ2dhYmxlVHJhbnNmb3JtUG9zaXRpb24ueCAtIGRpc3RhbmNlRnJvbUJvcmRlci5sZWZ0ICsgKCBkcmFnZ2FibGVSZWN0LndpZHRoIC8gMiApOyAvLy8gYWRpY2lvbmEgYSBsYXJndXJhLzIgcG9ycXVlIGEgZGlzdGFuY2lhIGRhIGJvcmRhIMOpIGJhc2VhZGEgbm8gY2VudHJvIGRvIGRyYWdnYWJsZVxyXG4gIGNvbnN0IHRhcmdldFRvcFBvc2l0aW9uID0gZHJhZ2dhYmxlVHJhbnNmb3JtUG9zaXRpb24ueSAtIGRpc3RhbmNlRnJvbUJvcmRlci50b3AgKyAoIGRyYWdnYWJsZVJlY3QuaGVpZ2h0IC8gMiApO1xyXG4gIHJldHVybiB7XHJcbiAgICB4OiB0YXJnZXRMZWZ0UG9zaXRpb24gKyBtYXJnaW5MZWZ0LFxyXG4gICAgeTogdGFyZ2V0VG9wUG9zaXRpb24gKyBtYXJnaW5Ub3BcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwaW5Db2xsaXNpb25Gb3JtdWxhVG9wUmlnaHQoIGRyYWdnYWJsZVJlY3Q6IERPTVJlY3QsIHRhcmdldFJlY3Q6IERPTVJlY3QsIGRyYWdnYWJsZVRyYW5zZm9ybVBvc2l0aW9uOiBQb2ludDJELCBkaXN0YW5jZUZyb21Cb3JkZXI6IEJvcmRlckRpc3RhbmNlLCBtYXJnaW5SaWdodDogbnVtYmVyID0gMTAsIG1hcmdpblRvcDogbnVtYmVyID0gMTAgKSB7XHJcbiAgY29uc3QgdGFyZ2V0TGVmdFBvc2l0aW9uID0gZHJhZ2dhYmxlVHJhbnNmb3JtUG9zaXRpb24ueCArIGRpc3RhbmNlRnJvbUJvcmRlci5yaWdodCAtICggZHJhZ2dhYmxlUmVjdC53aWR0aCAvIDIgKTsgLy8vIGFkaWNpb25hIGEgbGFyZ3VyYS8yIHBvcnF1ZSBhIGRpc3RhbmNpYSBkYSBib3JkYSDDqSBiYXNlYWRhIG5vIGNlbnRybyBkbyBkcmFnZ2FibGVcclxuICBjb25zdCB0YXJnZXRUb3BQb3NpdGlvbiA9IGRyYWdnYWJsZVRyYW5zZm9ybVBvc2l0aW9uLnkgLSBkaXN0YW5jZUZyb21Cb3JkZXIudG9wICsgKCBkcmFnZ2FibGVSZWN0LmhlaWdodCAvIDIgKTtcclxuICByZXR1cm4ge1xyXG4gICAgeDogdGFyZ2V0TGVmdFBvc2l0aW9uIC0gbWFyZ2luUmlnaHQsXHJcbiAgICB5OiB0YXJnZXRUb3BQb3NpdGlvbiArIG1hcmdpblRvcFxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRUcmFuc2Zvcm0oIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICkge1xyXG4gIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0ucmVwbGFjZSggcmVnZXhSZW1vdmVUcmFuc2xhdGVGcm9tVHJhbnNmb3JtLCAnJyApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGluRWxlbWVudEJ5Rm9ybXVsYSggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSwgcGluUG9zaXRpb25Gb3JtdWxhOiBQaW5Qb3NpdGlvbkZvcm11bGEgKSB7XHJcbiAgY29uc3QgdGFyZ2V0UmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsvLyBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ICk7XHJcbiAgY29uc3QgZHJhZ2dhYmxlUmVjdCA9IGRyYWdnYWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsvLyAgZ2V0Um90YXRlZEJvdW5kaW5nQm94QmFzZWRPbkJvZHlSb3RhdGlvbiggZHJhZ2dhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyApO1xyXG4gIGNvbnN0IGRyYWdnYWJsZVRyYW5zZm9ybVBvc2l0aW9uID0gZ2V0VHJhbnNmb3JtQ29vcmRzRnJvbUVsZW1lbnQoIGRyYWdnYWJsZSApO1xyXG4gIGNvbnN0IHBpblBvc2l0aW9uOiBQb2ludDJEID0gcGluUG9zaXRpb25Gb3JtdWxhKCBkcmFnZ2FibGVSZWN0LCB0YXJnZXRSZWN0LCBkcmFnZ2FibGVUcmFuc2Zvcm1Qb3NpdGlvbiwgZGlzdGFuY2VGcm9tQm9yZGVyICk7XHJcbiAgcmVzZXRUcmFuc2Zvcm0oIGRyYWdnYWJsZSApO1xyXG4gIGRyYWdnYWJsZS5zdHlsZS50cmFuc2Zvcm0gKz0gYHRyYW5zbGF0ZSgkeyBwaW5Qb3NpdGlvbi54IH1weCwgJHsgcGluUG9zaXRpb24ueSB9cHgpYDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBpbkVsZW1lbnRPbkNlbnRlciggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSApIHtcclxuICBjb25zdCB0YXJnZXRSZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOy8vIGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIHRhcmdldCApO1xyXG4gIGNvbnN0IGRyYWdnYWJsZVRyYW5zZm9ybVBvc2l0aW9uID0gZ2V0VHJhbnNmb3JtQ29vcmRzRnJvbUVsZW1lbnQoIGRyYWdnYWJsZSApO1xyXG5cclxuICBjb25zdCB0YXJnZXRSaWdodFBvc2l0aW9uID0gZHJhZ2dhYmxlVHJhbnNmb3JtUG9zaXRpb24ueCArIGRpc3RhbmNlRnJvbUJvcmRlci5yaWdodDtcclxuICBjb25zdCB0YXJnZXRCb3R0b21Qb3NpdGlvbiA9IGRyYWdnYWJsZVRyYW5zZm9ybVBvc2l0aW9uLnkgKyBkaXN0YW5jZUZyb21Cb3JkZXIuYm90dG9tO1xyXG5cclxuICBjb25zdCBuZXdYID0gTWF0aC5yb3VuZCggdGFyZ2V0UmlnaHRQb3NpdGlvbiAtICggdGFyZ2V0UmVjdC53aWR0aCAvIDIgKSApO1xyXG4gIGNvbnN0IG5ld1kgPSBNYXRoLnJvdW5kKCB0YXJnZXRCb3R0b21Qb3NpdGlvbiAtICggdGFyZ2V0UmVjdC5oZWlnaHQgLyAyICkgKTtcclxuXHJcbiAgcmVzZXRUcmFuc2Zvcm0oIGRyYWdnYWJsZSApO1xyXG4gIGRyYWdnYWJsZS5zdHlsZS50cmFuc2Zvcm0gKz0gYHRyYW5zbGF0ZSgkeyBuZXdYIH1weCwgJHsgbmV3WSB9cHgpYDtcclxufVxyXG5cclxuIiwiaW1wb3J0IHsgZ2V0RGVmYXVsdEF0dHJpYnV0ZUZvclRhcmdldCB9IGZyb20gJy4uLy4uL1Rvb2xzL0RPTVRvb2xzJztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudHNJbnRlcmFjdGluZ1NldCwgbWFwVGFyZ2V0c0NvbGxpZGluZ0J5VHJpZ2dlckVsZW1lbnQgfSBmcm9tICcuL0NvbGxpc2lvbkFjdGlvbic7XHJcbmltcG9ydCB7IENvbGxpc2lvbkV2ZW50IH0gZnJvbSAnLi9Db2xsaXNpb25FdmVudHMnO1xyXG5pbXBvcnQgeyBDb2xsaXNpb25EaXJlY3Rpb25DaGVjaywgQm9yZGVyRGlzdGFuY2UgfSBmcm9tICcuL1R5cGVzJztcclxuXHJcbmV4cG9ydCB0eXBlIFNoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnRPcHRpb25zID0ge1xyXG4gIGtlZXBBdHRyaWJ1dGU/OiBib29sZWFuO1xyXG4gIGNoZWNrVGFyZ2V0Q2xhc3M/OiBib29sZWFuO1xyXG59XHJcblxyXG5jb25zdCBkZWZhdWx0U2hhcmVBdHRyaWJ1dGVDb2xsaXNpb25FdmVudE9wdGlvbnMgPSB7XHJcbiAga2VlcEF0dHJpYnV0ZTogZmFsc2VcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnQgZXh0ZW5kcyBDb2xsaXNpb25FdmVudCB7XHJcbiAgY2hlY2tUYXJnZXRDbGFzczogYm9vbGVhbjtcclxuICBrZWVwQXR0cmlidXRlOiBib29sZWFuO1xyXG5cclxuICBwdWJsaWMgdGFyZ2V0Q2xhc3M6IHN0cmluZyA9ICdhdHRyaWJ1dGUtdGFyZ2V0JztcclxuXHJcbiAgY29uc3RydWN0b3IoIG9wdGlvbnM6IFNoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnRPcHRpb25zID0gZGVmYXVsdFNoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnRPcHRpb25zICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMua2VlcEF0dHJpYnV0ZSA9IG9wdGlvbnMua2VlcEF0dHJpYnV0ZSB8fCBmYWxzZTtcclxuICAgIHRoaXMuY2hlY2tUYXJnZXRDbGFzcyA9IG9wdGlvbnMuY2hlY2tUYXJnZXRDbGFzcyB8fCB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIG9uQ29sbGlkaW5nKCBkcmFnZ2FibGU6IEhUTUxFbGVtZW50LCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBfY29sbGlkaW5nQXQ6IENvbGxpc2lvbkRpcmVjdGlvbkNoZWNrLCBfZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSApIHtcclxuICAgIC8vLyBDaGVja3MgaWYgdGhlIGRyYWdnYWJsZSBoYXMgdGhlIGtleSBhdHRyaWJ1dGVzIHRoYXQgcmVwcmVzZW50cyB3aGF0IGF0dHJpYnV0ZSB3aWxsIGJlIGluc2VydGVkIG9uIHRhcmdldFxyXG4gICAgY29uc3Qgc2hhcmVkQXR0cmlidXRlTmFtZSA9IGRyYWdnYWJsZS5nZXRBdHRyaWJ1dGUoICdzaGFyZWQtYXR0cmlidXRlLW5hbWUnICk7XHJcbiAgICBjb25zdCBzaGFyZWRBdHRyaWJ1dGVWYWx1ZSA9IGRyYWdnYWJsZS5nZXRBdHRyaWJ1dGUoICdzaGFyZWQtYXR0cmlidXRlLXZhbHVlJyApO1xyXG4gICAgaWYgKCAhc2hhcmVkQXR0cmlidXRlVmFsdWUgfHwgIXNoYXJlZEF0dHJpYnV0ZU5hbWUgfHwgIXRoaXMuaXNWYWxpZFRhcmdldFRvVHJpZ2dlckV2ZW50KCB0YXJnZXQsIHRoaXMudGFyZ2V0Q2xhc3MgKSApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVsZW1lbnRzSW50ZXJhY3RpbmdTZXQ6IFNldDxIVE1MRWxlbWVudD4gPSBnZXRFbGVtZW50c0ludGVyYWN0aW5nU2V0KCB0YXJnZXQgKTtcclxuICAgIGNvbnN0IG5hbWVDb3VudEVsZW1lbnRzSW50ZXJhY3RpbmdBdHRyaWJ1dGUgPSAndG90YWwtc2hhcmluZy1hdHRyaWJ1dGVzJztcclxuXHJcbiAgICBpZiAoIGRyYWdnYWJsZS5jbGFzc0xpc3QuY29udGFpbnMoICdkcmFnZ2luZycgKSApIHtcclxuICAgICAgZHJhZ2dhYmxlLmNsYXNzTGlzdC5yZW1vdmUoICdzaGFyaW5nLWF0dHJpYnV0ZScgKTtcclxuICAgICAgZHJhZ2dhYmxlLmNsYXNzTGlzdC5hZGQoICdyZWFkeS10by1zaGFyZS1hdHRyaWJ1dGUnICk7XHJcblxyXG4gICAgICB0aGlzLmhhbmRsZUVsZW1lbnRJbnRlcmFjdGlvblNoYXJlQXR0cmlidXRlKCBkcmFnZ2FibGUsIHRhcmdldCwgZWxlbWVudHNJbnRlcmFjdGluZ1NldCwgbmFtZUNvdW50RWxlbWVudHNJbnRlcmFjdGluZ0F0dHJpYnV0ZSApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZHJhZ2dhYmxlLmNsYXNzTGlzdC5hZGQoICdzaGFyaW5nLWF0dHJpYnV0ZScgKTtcclxuICAgICAgZHJhZ2dhYmxlLmNsYXNzTGlzdC5yZW1vdmUoICdyZWFkeS10by1zaGFyZS1hdHRyaWJ1dGUnICk7XHJcblxyXG4gICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCBzaGFyZWRBdHRyaWJ1dGVOYW1lLCBzaGFyZWRBdHRyaWJ1dGVWYWx1ZSApO1xyXG5cclxuICAgICAgZWxlbWVudHNJbnRlcmFjdGluZ1NldC5hZGQoIGRyYWdnYWJsZSApO1xyXG4gICAgICB0aGlzLmhhbmRsZUVsZW1lbnRJbnRlcmFjdGlvblNoYXJlQXR0cmlidXRlKCBkcmFnZ2FibGUsIHRhcmdldCwgZWxlbWVudHNJbnRlcmFjdGluZ1NldCwgbmFtZUNvdW50RWxlbWVudHNJbnRlcmFjdGluZ0F0dHJpYnV0ZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIG9uTm90Q29sbGlkaW5nKCBkcmFnZ2FibGU6IEhUTUxFbGVtZW50LCB0YXJnZXQ6IEhUTUxFbGVtZW50ICkge1xyXG4gICAgY29uc3QgZWxlbWVudHNJbnRlcmFjdGluZ1NldDogU2V0PEhUTUxFbGVtZW50PiA9IGdldEVsZW1lbnRzSW50ZXJhY3RpbmdTZXQoIHRhcmdldCApO1xyXG5cclxuICAgIGlmICggZWxlbWVudHNJbnRlcmFjdGluZ1NldC5zaXplID4gMCApIHtcclxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoICdzaGFyaW5nLWF0dHJpYnV0ZScgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub25TaGFyZWRBdHRyaWJ1dGVFbXB0eSggZHJhZ2dhYmxlLCB0YXJnZXQgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoICFtYXBUYXJnZXRzQ29sbGlkaW5nQnlUcmlnZ2VyRWxlbWVudC5oYXMoIGRyYWdnYWJsZSApICkge1xyXG4gICAgICBtYXBUYXJnZXRzQ29sbGlkaW5nQnlUcmlnZ2VyRWxlbWVudC5zZXQoIGRyYWdnYWJsZSwgbmV3IFNldDxIVE1MRWxlbWVudD4oKSApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGFnZW50Q29sbGlzaW9uU2V0ID0gbWFwVGFyZ2V0c0NvbGxpZGluZ0J5VHJpZ2dlckVsZW1lbnQuZ2V0KCBkcmFnZ2FibGUgKSE7XHJcbiAgICBpZiAoIGFnZW50Q29sbGlzaW9uU2V0LmRlbGV0ZSggdGFyZ2V0IGFzIEhUTUxFbGVtZW50ICkgfHwgYWdlbnRDb2xsaXNpb25TZXQuc2l6ZSA9PT0gMCApIHtcclxuICAgICAgZHJhZ2dhYmxlLmNsYXNzTGlzdC5yZW1vdmUoICdzaGFyaW5nLWF0dHJpYnV0ZScsICdyZWFkeS10by1zaGFyZS1hdHRyaWJ1dGUnICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFuZGxlRWxlbWVudEludGVyYWN0aW9uU2hhcmVBdHRyaWJ1dGUoIGRyYWdnYWJsZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQsIGVsZW1lbnRzSW50ZXJhY3RpbmdTZXQ6IFNldDxIVE1MRWxlbWVudD4sIG5hbWVDb3VudEVsZW1lbnRzSW50ZXJhY3RpbmdBdHRyaWJ1dGU6IHN0cmluZyApIHtcclxuICAgIGlmICggZWxlbWVudHNJbnRlcmFjdGluZ1NldC5zaXplID4gMCApIHtcclxuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoICdzaGFyaW5nLWF0dHJpYnV0ZScgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub25TaGFyZWRBdHRyaWJ1dGVFbXB0eSggZHJhZ2dhYmxlLCB0YXJnZXQgKTtcclxuICAgIH1cclxuXHJcbiAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCBuYW1lQ291bnRFbGVtZW50c0ludGVyYWN0aW5nQXR0cmlidXRlLCBlbGVtZW50c0ludGVyYWN0aW5nU2V0LnNpemUudG9TdHJpbmcoKSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG9uU2hhcmVkQXR0cmlidXRlRW1wdHkoIGRyYWdnYWJsZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSggJ3NoYXJpbmctYXR0cmlidXRlJyApO1xyXG5cclxuICAgIC8vLyBSZXR1cm5zIHRoZSBhdHRyaWJ1dGUgdG8gdGhlIGZpcnN0IGF0dHJpYnV0ZSB0aGF0IHdhcyBzZXQgdG8gdGFyZ2V0XHJcbiAgICBjb25zdCBzaGFyZWRBdHRyaWJ1dGVOYW1lID0gZHJhZ2dhYmxlLmdldEF0dHJpYnV0ZSggJ3NoYXJlZC1hdHRyaWJ1dGUtbmFtZScgKTtcclxuICAgIGlmICggc2hhcmVkQXR0cmlidXRlTmFtZSApIHtcclxuICAgICAgY29uc3QgZGVmYXVsdFNoYXJlZEF0dHJpYnV0ZUZyb21UYXJnZXQgPSBnZXREZWZhdWx0QXR0cmlidXRlRm9yVGFyZ2V0KCB0YXJnZXQsIHNoYXJlZEF0dHJpYnV0ZU5hbWUgKTtcclxuICAgICAgaWYgKCBkZWZhdWx0U2hhcmVkQXR0cmlidXRlRnJvbVRhcmdldCApIHtcclxuICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCBzaGFyZWRBdHRyaWJ1dGVOYW1lLCBkZWZhdWx0U2hhcmVkQXR0cmlidXRlRnJvbVRhcmdldCApO1xyXG4gICAgICB9IGVsc2UgaWYgKCAhdGhpcy5rZWVwQXR0cmlidXRlICkge1xyXG4gICAgICAgIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoIHNoYXJlZEF0dHJpYnV0ZU5hbWUgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuIiwiZXhwb3J0IHR5cGUgRXZlbnRMaXN0ZW5lciA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGV2ZW50OiBGdW5jdGlvbjtcclxufTtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RXZlbnRMaXN0ZW5lciB7XHJcbiAgcHVibGljIGV2ZW50c0J5TmFtZTogTWFwPHN0cmluZywgRXZlbnRMaXN0ZW5lcltdPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudDogRnVuY3Rpb24gKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG5ld0V2ZW50OiBFdmVudExpc3RlbmVyID0ge1xyXG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoICF0aGlzLmV2ZW50c0J5TmFtZS5oYXMoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkgKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRzQnlOYW1lLnNldCggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCksIFtuZXdFdmVudF0gKTtcclxuICAgICAgcmV0dXJuIG5ld0V2ZW50LmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZXZlbnRzQnlOYW1lLmdldCggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCkgKSEucHVzaCggbmV3RXZlbnQgKTtcclxuXHJcbiAgICByZXR1cm4gbmV3RXZlbnQuaWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RXZlbnRzQnlOYW1lKCBldmVudE5hbWU6IHN0cmluZyApOiBFdmVudExpc3RlbmVyW10ge1xyXG4gICAgaWYgKCAhdGhpcy5ldmVudHNCeU5hbWUuaGFzKCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSApICkge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpLCBbXSApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmV2ZW50c0J5TmFtZS5nZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkhO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZUV2ZW50QnlJZCggZXZlbnRJZDogc3RyaW5nICkge1xyXG4gICAgdGhpcy5ldmVudHNCeU5hbWUuZm9yRWFjaCggKCB2YWx1ZSwga2V5ICkgPT4ge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGtleSwgdmFsdWUuZmlsdGVyKCBlID0+IGUuaWQgIT09IGV2ZW50SWQgKSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNhbGxFdmVudHNCeU5hbWUoIGV2ZW50TmFtZTogc3RyaW5nLCAuLi5ldmVudEFyZ3M6IGFueVtdICk6IHZvaWQge1xyXG4gICAgdGhpcy5nZXRFdmVudHNCeU5hbWUoIGV2ZW50TmFtZSApLmZvckVhY2goIGUgPT4gZS5ldmVudCggLi4uZXZlbnRBcmdzICkgKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBEaW1lbnNpb25zLCBQb2ludDJELCBsZXJwLCByZWdleE51bWJlclBhdHRlcm4sIHJvdGF0ZUNvb3JkaW5hdGVzLCByb3RhdGVDb29yZGluYXRlc0Zyb21Qb2ludDJEIH0gZnJvbSAnLi9NYXRoVG9vbHMnO1xyXG5pbXBvcnQgeyB0b1Bob25lTnVtYmVyIH0gZnJvbSAnLi9TdHJpbmdUb29scyc7XHJcbmltcG9ydCB7IENvbGxpc2lvbkRpcmVjdGlvbkNoZWNrLCBCb3JkZXJEaXN0YW5jZSB9IGZyb20gJy4uL0V4dHJhcy9Db2xsaXNpb25FdmVudHMvVHlwZXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgS2V5Ym9hcmRFdmVudENhbGxiYWNrID0gKCBldnQ6IEtleWJvYXJkRXZlbnQgKSA9PiB2b2lkO1xyXG5leHBvcnQgY29uc3QgcmVnZXhSZW1vdmVUcmFuc2xhdGVGcm9tVHJhbnNmb3JtID0gL3RyYW5zbGF0ZVxcKFteKV0qXFwpL2c7XHJcbmV4cG9ydCBjb25zdCByZWdleEdyb3VwUm90YXRlVmFsdWUgPSAvcm90YXRlXFwoKC0/XFxkK1xcLj9cXGQqKWRlZ1xcKS87XHJcbmV4cG9ydCBjb25zdCByZWdleEdyb3VwUm90YXRlWFZhbHVlID0gL3JvdGF0ZVhcXCgoLT9cXGQrXFwuP1xcZCopZGVnXFwpLztcclxuZXhwb3J0IGNvbnN0IHJlZ2V4R3JvdXBSb3RhdGVZVmFsdWUgPSAvcm90YXRlWVxcKCgtP1xcZCtcXC4/XFxkKilkZWdcXCkvO1xyXG5leHBvcnQgY29uc3QgcmVnZXhHcm91cFJvdGF0ZVpWYWx1ZSA9IC9yb3RhdGVaXFwoKC0/XFxkK1xcLj9cXGQqKWRlZ1xcKS87XHJcblxyXG5leHBvcnQgY29uc3QgZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlID0gbmV3IE1hcDxzdHJpbmcsIEtleWJvYXJkRXZlbnRDYWxsYmFja1tdPigpO1xyXG5leHBvcnQgY29uc3QgZGljdEtleXNCeUFjdGlvbktleWRvd25SZXBlYXQgPSBuZXcgTWFwPHN0cmluZywgS2V5Ym9hcmRFdmVudENhbGxiYWNrW10+KCk7XHJcbmV4cG9ydCBjb25zdCBkaWN0S2V5c0J5QWN0aW9uS2V5dXAgPSBuZXcgTWFwPHN0cmluZywgS2V5Ym9hcmRFdmVudENhbGxiYWNrW10+KCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRBY3Rpb25LZXkoIHsga2V5LCBrZXlkb3duOiBldmVudEtleWRvd24sIGtleXVwOiBldmVudEtleXVwLCBleGVjdXRlT25seU9uY2UgPSB0cnVlIH06IHsga2V5OiBzdHJpbmc7IGtleWRvd246IEtleWJvYXJkRXZlbnRDYWxsYmFjazsga2V5dXA/OiBLZXlib2FyZEV2ZW50Q2FsbGJhY2s7IGV4ZWN1dGVPbmx5T25jZT86IGJvb2xlYW47IH0gKSB7XHJcbiAgaWYgKCBleGVjdXRlT25seU9uY2UgKSB7XHJcbiAgICBhZGRBY3Rpb25LZXlSdW5PbmNlKCBrZXksIGV2ZW50S2V5ZG93biwgZXZlbnRLZXl1cCApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgYWRkQWN0aW9uS2V5UnVuT25SZXBlYXQoIGtleSwgZXZlbnRLZXlkb3duLCBldmVudEtleXVwICk7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFNhZmVQcm9taXNlPFQ+ID0ge1xyXG4gIGRhdGE6ICgpID0+IFQ7XHJcbiAgZXJyb3I6IEVycm9yIHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVByb21pc2U8VD4oIHByb21pc2U6IFByb21pc2U8VD4gKTogUHJvbWlzZTxTYWZlUHJvbWlzZTxUPj4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcHJvbWlzZTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkYXRhOiAoKSA9PiBkYXRhLFxyXG4gICAgICBlcnJvcjogbnVsbFxyXG4gICAgfTtcclxuICB9IGNhdGNoICggZXJyb3IgKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCBlcnJvciApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRhdGE6ICgpID0+IHsgdGhyb3cgbmV3IEVycm9yKCBcIkNvdWxkbid0IGZldGNoLCBjaGVjayBTYWZlUHJvbWlzZS5lcnJvciBmb3IgZGV0YWlscy5cIiApOyB9LFxyXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKCBTdHJpbmcoIGVycm9yICkgKVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkWW91dHViZVVybE9ySWQoIGlucHV0OiBzdHJpbmcgKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgdXJsUGF0dGVybiA9IC9eKGh0dHAocyk/OlxcL1xcLyk/KCh3KXszfS4pP3lvdXR1KGJlfC5iZSk/KFxcLmNvbSk/XFwvLisvO1xyXG4gIGNvbnN0IGlkUGF0dGVybiA9IC9eW2EtekEtWjAtOV8tXXsxMX0kLztcclxuXHJcbiAgcmV0dXJuIHVybFBhdHRlcm4udGVzdCggaW5wdXQgKSB8fCBpZFBhdHRlcm4udGVzdCggaW5wdXQgKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkWW91VHViZVVybCggdXJsOiBzdHJpbmcgKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgcGF0dGVybiA9IC9eKGh0dHAocyk/OlxcL1xcLyk/KCh3KXszfS4pP3lvdXR1KGJlfC5iZSk/KFxcLmNvbSk/XFwvLisvO1xyXG4gIHJldHVybiBwYXR0ZXJuLnRlc3QoIHVybCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFlvdVR1YmVJZCggaW5wdXQ6IHN0cmluZyApOiBzdHJpbmcgfCBudWxsIHtcclxuICBjb25zdCByZWdleCA9IC9bPyZddj0oW14/Jl0rKS87XHJcbiAgY29uc3QgbWF0Y2ggPSBpbnB1dC5tYXRjaCggcmVnZXggKTtcclxuICBpZiAoIG1hdGNoICYmIG1hdGNoWzFdICkge1xyXG4gICAgcmV0dXJuIG1hdGNoWzFdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBJZiBkaXJlY3QgdmlkZW8gSUQgaXMgcHJvdmlkZWRcclxuICAgIHJldHVybiBpbnB1dC5sZW5ndGggPT09IDExID8gaW5wdXQgOiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCggZWxlbWVudDogSFRNTEVsZW1lbnQsIGF0dHJMaXN0OiBbc3RyaW5nLCBzdHJpbmddW10gKSB7XHJcbiAgYXR0ckxpc3QuZm9yRWFjaCggKCBba2V5LCB2YWxdICkgPT4ge1xyXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoIGtleSwgdmFsICk7XHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudEZyb21IVE1MKCBodG1sOiBzdHJpbmcsIHRyaW06IGJvb2xlYW4gPSB0cnVlICkge1xyXG4gIGh0bWwgPSB0cmltID8gaHRtbC50cmltKCkgOiBodG1sO1xyXG5cclxuICBpZiAoICFodG1sICkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICd0ZW1wbGF0ZScgKTtcclxuICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHRlbXBsYXRlLmNvbnRlbnQuY2hpbGRyZW47XHJcblxyXG4gIGlmICggcmVzdWx0Lmxlbmd0aCA9PT0gMSApIHtcclxuICAgIHJldHVybiByZXN1bHRbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gQXJyYXkuZnJvbSggcmVzdWx0ICkgYXMgSFRNTEVsZW1lbnRbXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnREaW1lbnNpb25zQnlJZCggZWxlbWVudElkOiBzdHJpbmcgKTogRGltZW5zaW9ucyB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBlbGVtZW50SWQgKTtcclxuXHJcbiAgaWYgKCAhZWxlbWVudCApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggXCJJbnZhbGlkIGVsZW1lbnQgYXQgZ2V0RWxlbWVudERpbWVuc2lvbnNCeUlkIHdpdGggaWQ6IFwiICsgZWxlbWVudElkICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZ2V0RWxlbWVudERpbWVuc2lvbnMoIGVsZW1lbnQgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnREaW1lbnNpb25zKCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiBEaW1lbnNpb25zIHtcclxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcclxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiBET01SZWN0IHtcclxuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICBjb25zdCBjZW50ZXJYID0gcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAvIDI7XHJcbiAgY29uc3QgY2VudGVyWSA9IHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyO1xyXG5cclxuICAvLyBSb3RhdGlvbiBhbmdsZSBpbiBkZWdyZWVzIChleHRyYWN0ZWQgZnJvbSBzdHlsZS50cmFuc2Zvcm0gb3IgYW55IG90aGVyIHNvdXJjZSlcclxuICBjb25zdCByb3RhdGlvbkFuZ2xlID0gZ2V0Qm9keVJvdGF0aW9uSW5EZWdyZWVzKCk7XHJcblxyXG4gIGNvbnN0IHJhZGlhbnMgPSAoIE1hdGguUEkgLyAxODAgKSAqIHJvdGF0aW9uQW5nbGU7XHJcbiAgY29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyggcmFkaWFucyApO1xyXG4gIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4oIHJhZGlhbnMgKTtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRoZSByb3RhdGVkIGNvb3JkaW5hdGVzXHJcbiAgY29uc3Qgcm90YXRlZFgxID0gY2VudGVyWCArICggcmVjdC5sZWZ0IC0gY2VudGVyWCApICogY29zVGhldGEgLSAoIHJlY3QudG9wIC0gY2VudGVyWSApICogc2luVGhldGE7XHJcbiAgY29uc3Qgcm90YXRlZFkxID0gY2VudGVyWSArICggcmVjdC5sZWZ0IC0gY2VudGVyWCApICogc2luVGhldGEgKyAoIHJlY3QudG9wIC0gY2VudGVyWSApICogY29zVGhldGE7XHJcblxyXG4gIGNvbnN0IHJvdGF0ZWRYMiA9IGNlbnRlclggKyAoIHJlY3QucmlnaHQgLSBjZW50ZXJYICkgKiBjb3NUaGV0YSAtICggcmVjdC5ib3R0b20gLSBjZW50ZXJZICkgKiBzaW5UaGV0YTtcclxuICBjb25zdCByb3RhdGVkWTIgPSBjZW50ZXJZICsgKCByZWN0LnJpZ2h0IC0gY2VudGVyWCApICogc2luVGhldGEgKyAoIHJlY3QuYm90dG9tIC0gY2VudGVyWSApICogY29zVGhldGE7XHJcblxyXG4gIC8vIENhbGN1bGF0ZSBsZWZ0LCB0b3AsIGJvdHRvbSwgYW5kIHJpZ2h0IGNvb3JkaW5hdGVzXHJcbiAgY29uc3Qgcm90YXRlZExlZnQgPSBNYXRoLm1pbiggcm90YXRlZFgxLCByb3RhdGVkWDIgKTtcclxuICBjb25zdCByb3RhdGVkVG9wID0gTWF0aC5taW4oIHJvdGF0ZWRZMSwgcm90YXRlZFkyICk7XHJcbiAgY29uc3Qgcm90YXRlZEJvdHRvbSA9IE1hdGgubWF4KCByb3RhdGVkWTEsIHJvdGF0ZWRZMiApO1xyXG4gIGNvbnN0IHJvdGF0ZWRSaWdodCA9IE1hdGgubWF4KCByb3RhdGVkWDEsIHJvdGF0ZWRYMiApO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgeDogcm90YXRlZExlZnQsXHJcbiAgICB5OiByb3RhdGVkVG9wLFxyXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXHJcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxyXG4gICAgdG9KU09OOiByZWN0LnRvSlNPTixcclxuICAgIGxlZnQ6IHJvdGF0ZWRMZWZ0LFxyXG4gICAgdG9wOiByb3RhdGVkVG9wLFxyXG4gICAgYm90dG9tOiByb3RhdGVkQm90dG9tLFxyXG4gICAgcmlnaHQ6IHJvdGF0ZWRSaWdodCxcclxuICB9IGFzIERPTVJlY3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEFjdGlvbktleVJ1bk9uY2UoIGtleTogc3RyaW5nLCBldmVudEtleWRvd246IEtleWJvYXJkRXZlbnRDYWxsYmFjaywgZXZlbnRLZXl1cD86IEtleWJvYXJkRXZlbnRDYWxsYmFjayApIHtcclxuICBpZiAoIGRpY3RLZXlzQnlBY3Rpb25LZXlkb3duT25jZS5oYXMoIGtleSApICkge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlLnNldCgga2V5LCBbZXZlbnRLZXlkb3duLCAuLi5kaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2UuZ2V0KCBrZXkgKSFdIClcclxuICB9IGVsc2Uge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlLnNldCgga2V5LCBbZXZlbnRLZXlkb3duXSApXHJcbiAgfVxyXG5cclxuICBpZiAoIGV2ZW50S2V5dXAgKSB7XHJcbiAgICBpZiAoIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5oYXMoIGtleSApICkge1xyXG4gICAgICBkaWN0S2V5c0J5QWN0aW9uS2V5dXAuc2V0KCBrZXksIFtldmVudEtleXVwLCAuLi5kaWN0S2V5c0J5QWN0aW9uS2V5dXAuZ2V0KCBrZXkgKSFdIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5zZXQoIGtleSwgW2V2ZW50S2V5dXBdIClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEFjdGlvbktleVJ1bk9uUmVwZWF0KCBrZXk6IHN0cmluZywgZXZlbnRLZXlkb3duOiBLZXlib2FyZEV2ZW50Q2FsbGJhY2ssIGV2ZW50S2V5dXA/OiBLZXlib2FyZEV2ZW50Q2FsbGJhY2sgKSB7XHJcbiAgaWYgKCBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdC5oYXMoIGtleSApICkge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbktleWRvd25SZXBlYXQuc2V0KCBrZXksIFtldmVudEtleWRvd24sIC4uLmRpY3RLZXlzQnlBY3Rpb25LZXlkb3duUmVwZWF0LmdldCgga2V5ICkhXSApXHJcbiAgfSBlbHNlIHtcclxuICAgIGRpY3RLZXlzQnlBY3Rpb25LZXlkb3duUmVwZWF0LnNldCgga2V5LCBbZXZlbnRLZXlkb3duXSApXHJcbiAgfVxyXG5cclxuICBpZiAoIGV2ZW50S2V5dXAgKSB7XHJcbiAgICBpZiAoIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5oYXMoIGtleSApICkge1xyXG4gICAgICBkaWN0S2V5c0J5QWN0aW9uS2V5dXAuc2V0KCBrZXksIFtldmVudEtleXVwLCAuLi5kaWN0S2V5c0J5QWN0aW9uS2V5dXAuZ2V0KCBrZXkgKSFdIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5zZXQoIGtleSwgW2V2ZW50S2V5dXBdIClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0VsZW1lbnRDb2xsaXNpb24oIGVsZW1lbnQxOiBIVE1MRWxlbWVudCwgZWxlbWVudDI6IEhUTUxFbGVtZW50LCBjaGVja0JvZHlSb3RhdGlvbjogYm9vbGVhbiA9IGZhbHNlICk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IHJlY3QxID0gIWNoZWNrQm9keVJvdGF0aW9uID8gZWxlbWVudDEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBlbGVtZW50MSApO1xyXG4gIGNvbnN0IHJlY3QyID0gIWNoZWNrQm9keVJvdGF0aW9uID8gZWxlbWVudDIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBlbGVtZW50MiApO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSAhKFxyXG4gICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tIHx8XHJcbiAgICByZWN0MS5yaWdodCA8IHJlY3QyLmxlZnQgfHxcclxuICAgIHJlY3QxLmJvdHRvbSA8IHJlY3QyLnRvcCB8fFxyXG4gICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0XHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBvbGxGb3JWYXJpYWJsZTxUPiggdmFyaWFibGVOYW1lOiBzdHJpbmcsIHJlYWR5Q29uZGl0aW9uOiAoIHZhbHVlOiBUICkgPT4gYm9vbGVhbiwgY2FsbGJhY2s6ICggdmFsdWU6IFQgKSA9PiB2b2lkICkge1xyXG4gIGNvbnN0IHBvbGxJbnRlcnZhbCA9IDEwMDtcclxuICBjb25zdCBwb2xsID0gc2V0SW50ZXJ2YWwoICgpID0+IHtcclxuICAgIGlmICggKCB3aW5kb3cgYXMgYW55IClbdmFyaWFibGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmIHJlYWR5Q29uZGl0aW9uKCAoIHdpbmRvdyBhcyBhbnkgKVt2YXJpYWJsZU5hbWVdICkgKSB7XHJcbiAgICAgIC8vIElmIGJvdGggY29uZGl0aW9ucyBhcmUgbWV0LCBleGVjdXRlIHRoZSBjYWxsYmFjayBhbmQgc3RvcCBwb2xsaW5nXHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoIHBvbGwgKTtcclxuICAgICAgY2FsbGJhY2soICggd2luZG93IGFzIGFueSApW3ZhcmlhYmxlTmFtZV0gKTtcclxuICAgIH1cclxuICB9LCBwb2xsSW50ZXJ2YWwgKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBvbGxGb3JWYXJpYWJsZUFzeW5jPFQ+KCB2YXJpYWJsZU5hbWU6IHN0cmluZywgcmVhZHlDb25kaXRpb246ICggdmFsdWU6IFQgKSA9PiBib29sZWFuLCBjYWxsYmFjazogKCB2YWx1ZTogVCApID0+IHZvaWQgKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgcG9sbEludGVydmFsID0gMTAwO1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPiggKCByZXNvbHZlICkgPT4ge1xyXG4gICAgY29uc3QgcG9sbCA9IHNldEludGVydmFsKCAoKSA9PiB7XHJcbiAgICAgIGlmICggKCB3aW5kb3cgYXMgYW55IClbdmFyaWFibGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmIHJlYWR5Q29uZGl0aW9uKCAoIHdpbmRvdyBhcyBhbnkgKVt2YXJpYWJsZU5hbWVdICkgKSB7XHJcbiAgICAgICAgLy8gSWYgYm90aCBjb25kaXRpb25zIGFyZSBtZXQsIGV4ZWN1dGUgdGhlIGNhbGxiYWNrLCBzdG9wIHBvbGxpbmcsIGFuZCByZXNvbHZlIHRoZSBwcm9taXNlXHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCggcG9sbCApO1xyXG4gICAgICAgIGNhbGxiYWNrKCAoIHdpbmRvdyBhcyBhbnkgKVt2YXJpYWJsZU5hbWVdICk7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LCBwb2xsSW50ZXJ2YWwgKTtcclxuICB9ICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWxFbGVtZW50RXhpc3RzKCBzZWxlY3Rvcjogc3RyaW5nICkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiB7XHJcbiAgICBpZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIHNlbGVjdG9yICkgKSB7XHJcbiAgICAgIHJldHVybiByZXNvbHZlKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlciggbXV0YXRpb25zID0+IHtcclxuICAgICAgaWYgKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApICkge1xyXG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICByZXNvbHZlKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBvYnNlcnZlci5vYnNlcnZlKCBkb2N1bWVudC5ib2R5LCB7XHJcbiAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgc3VidHJlZTogdHJ1ZVxyXG4gICAgfSApO1xyXG4gIH0gKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGF5KCBtczogbnVtYmVyICk6IFByb21pc2U8dm9pZD4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSggcmVzb2x2ZSA9PiBzZXRUaW1lb3V0KCByZXNvbHZlLCBtcyApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlRWxlbWVudCggZWxlbWVudFRvUmVtb3ZlOiBIVE1MRWxlbWVudCwgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIG5ld0VsZW1lbnQ6IEhUTUxFbGVtZW50ICk6IHZvaWQge1xyXG4gIGlmICggcGFyZW50RWxlbWVudCAmJiBlbGVtZW50VG9SZW1vdmUgKSB7XHJcbiAgICBwYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBlbGVtZW50VG9SZW1vdmUgKTtcclxuXHJcbiAgICBwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZSggbmV3RWxlbWVudCwgZWxlbWVudFRvUmVtb3ZlLm5leHRTaWJsaW5nICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5zZXJ0RWxlbWVudEF0SW5kZXgoIHBhcmVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBuZXdFbGVtZW50OiBIVE1MRWxlbWVudCwgaW5kZXg6IG51bWJlciApOiB2b2lkIHtcclxuICBjb25zdCBjaGlsZE5vZGVzID0gcGFyZW50RWxlbWVudC5jaGlsZE5vZGVzO1xyXG5cclxuICBpZiAoIGluZGV4ID49IDAgJiYgaW5kZXggPD0gY2hpbGROb2Rlcy5sZW5ndGggKSB7XHJcbiAgICBpZiAoIGluZGV4ID09PSBjaGlsZE5vZGVzLmxlbmd0aCApIHtcclxuICAgICAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZCggbmV3RWxlbWVudCApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgcmVmTm9kZSA9IGNoaWxkTm9kZXNbaW5kZXhdO1xyXG4gICAgICBwYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZSggbmV3RWxlbWVudCwgcmVmTm9kZSApO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCAnSW5kZXggb3V0IG9mIGJvdW5kcycgKTtcclxuICAgIHRocm93IG5ldyBFcnJvciggXCJJbmRleCBvdXQgb2YgYm91bmRzXCIgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbmRleEluUGFyZW50KCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiBudW1iZXIge1xyXG4gIGNvbnN0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuXHJcbiAgaWYgKCBwYXJlbnQgKSB7XHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IEFycmF5LmZyb20oIHBhcmVudC5jaGlsZHJlbiApO1xyXG4gICAgcmV0dXJuIGNoaWxkcmVuLmluZGV4T2YoIGVsZW1lbnQgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiAtMTtcclxufVxyXG5cclxuLy8vIEdldCB0aGUgZGVmYXVsdCBhdHRyaWJ1dGVzIGZyb20gdGhlIHRhcmdldCBlbGVtZW50XHJcbi8vLyBJZiBoYXZlIG5vdCBkZWZhdWx0IGF0dHJpYnV0ZSB3aXRoIHRoaXMgQGF0dHJpYnV0ZU5hbWUgb24gbWFwIHdpbGwgc2V0IHRoZSBjdXJyZW50IGF0dHJpYnV0ZSBhcyBkZWZhdWx0XHJcbi8vLyBJZiBoYXZlIG5vdCBkZWZhdWx0IGF0dHJpYnV0ZSB3aXRoIHRoaXMgQGF0dHJpYnV0ZU5hbWUgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nXHJcbmV4cG9ydCBjb25zdCBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudCA9IG5ldyBNYXA8SFRNTEVsZW1lbnQsIE1hcDxzdHJpbmcsIHN0cmluZz4+KCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0QXR0cmlidXRlRm9yVGFyZ2V0KCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcgKTogc3RyaW5nIHtcclxuICBpZiAoICFtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5oYXMoIHRhcmdldCApICkge1xyXG4gICAgbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuc2V0KCB0YXJnZXQsIG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCkgKTtcclxuICB9XHJcblxyXG4gIGxldCByZXN1bHQ6IHN0cmluZyA9ICcnO1xyXG4gIGNvbnN0IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNCeU5hbWUgPSBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5nZXQoIHRhcmdldCApITtcclxuICBjb25zdCB0YXJnZXREZWZhdWx0QXR0cmlidXRlID0gIWRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNCeU5hbWUuaGFzKCBhdHRyaWJ1dGVOYW1lICkgPyB0YXJnZXQuZ2V0QXR0cmlidXRlKCBhdHRyaWJ1dGVOYW1lICkgOiBkZWZhdWx0QXR0cmlidXRlVmFsdWVzQnlOYW1lLmdldCggYXR0cmlidXRlTmFtZSApITtcclxuXHJcbiAgcmVzdWx0ID0gdGFyZ2V0RGVmYXVsdEF0dHJpYnV0ZSA/IHRhcmdldERlZmF1bHRBdHRyaWJ1dGUgOiAnJztcclxuICBzZXREZWZhdWx0QXR0cmlidXRlRm9yVGFyZ2V0KCB0YXJnZXQsIGF0dHJpYnV0ZU5hbWUsIHJlc3VsdCApO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdEF0dHJpYnV0ZUZvclRhcmdldCggdGFyZ2V0OiBIVE1MRWxlbWVudCwgYXR0cmlidXRlTmFtZTogc3RyaW5nLCBuZXdEZWZhdWx0QXR0cmlidXRlOiBzdHJpbmcgKTogdm9pZCB7XHJcbiAgaWYgKCAhbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuaGFzKCB0YXJnZXQgKSApIHtcclxuICAgIG1hcERlZmF1bHRBdHRyaWJ1dGVzQnlFbGVtZW50LnNldCggdGFyZ2V0LCBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpICk7XHJcbiAgfVxyXG5cclxuICBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5nZXQoIHRhcmdldCApIS5zZXQoIGF0dHJpYnV0ZU5hbWUsIG5ld0RlZmF1bHRBdHRyaWJ1dGUgKTtcclxufVxyXG5cclxuLy8vIERpdmlkZSBvIGVsZW1lbnRvIEB0YXJnZXQgZW0gOSBcInF1YWRyYWRvc1wiIGlndWFpcyBlIHJldG9ybmEgZW0gcXVhaXMgcXVhZHJhZG9zIG8gZHJhZ2dhYmxlIGVzdMOhIGNvbGlkaW5kbyBjb20gbyB0YXJnZXRcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbGxpc2lvbkRpcmVjdGlvbiggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgY2hlY2tCb2R5Um90YXRpb246IGJvb2xlYW4gPSBmYWxzZSApOiBDb2xsaXNpb25EaXJlY3Rpb25DaGVjayB7XHJcbiAgY29uc3QgcmVjdDEgPSAhY2hlY2tCb2R5Um90YXRpb24gPyBkcmFnZ2FibGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBkcmFnZ2FibGUgKTtcclxuICBjb25zdCByZWN0MiA9ICFjaGVja0JvZHlSb3RhdGlvbiA/IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIHRhcmdldCApO1xyXG5cclxuICBjb25zdCBpc1RvcCA9IHJlY3QxLmJvdHRvbSA+IHJlY3QyLnRvcCAmJiByZWN0MS50b3AgPCByZWN0Mi50b3AgKyByZWN0Mi5oZWlnaHQgLyAzO1xyXG4gIGNvbnN0IGlzUmlnaHQgPSByZWN0MS5sZWZ0IDwgcmVjdDIucmlnaHQgJiYgcmVjdDEucmlnaHQgPiByZWN0Mi5yaWdodCAtIHJlY3QyLndpZHRoIC8gMztcclxuICBjb25zdCBpc0NlbnRlciA9IHJlY3QxLnRvcCA8IHJlY3QyLmJvdHRvbSAmJiByZWN0MS5ib3R0b20gPiByZWN0Mi50b3AgJiYgcmVjdDEubGVmdCA8IHJlY3QyLnJpZ2h0ICYmIHJlY3QxLnJpZ2h0ID4gcmVjdDIubGVmdDtcclxuICBjb25zdCBpc0JvdHRvbSA9IHJlY3QxLnRvcCA8IHJlY3QyLmJvdHRvbSAtIHJlY3QyLmhlaWdodCAvIDMgJiYgcmVjdDEuYm90dG9tID4gcmVjdDIuYm90dG9tIC0gcmVjdDIuaGVpZ2h0IC8gMztcclxuICBjb25zdCBpc0xlZnQgPSByZWN0MS5yaWdodCA+IHJlY3QyLmxlZnQgJiYgcmVjdDEubGVmdCA8IHJlY3QyLmxlZnQgKyByZWN0Mi53aWR0aCAvIDM7XHJcblxyXG4gIHJldHVybiB7IHRvcDogaXNUb3AsIHJpZ2h0OiBpc1JpZ2h0LCBjZW50ZXI6IGlzQ2VudGVyLCBib3R0b206IGlzQm90dG9tLCBsZWZ0OiBpc0xlZnQgfTtcclxufVxyXG5cclxuLy8vIHJldHVybiB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBkcmFnZ2FibGUgdG8gdGhlIGNlbnRlciBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZnJvbSBlYWNoIGJvcmRlciBcclxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3RhbmNlRnJvbUJvcmRlciggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgY2hlY2tCb2R5Um90YXRpb246IGJvb2xlYW4gPSBmYWxzZSApOiBCb3JkZXJEaXN0YW5jZSB7XHJcbiAgY29uc3QgcmVjdDEgPSAhY2hlY2tCb2R5Um90YXRpb24gPyBkcmFnZ2FibGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCBkcmFnZ2FibGUgKTtcclxuICBjb25zdCByZWN0MiA9ICFjaGVja0JvZHlSb3RhdGlvbiA/IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIHRhcmdldCApO1xyXG5cclxuICBjb25zdCBjZW50ZXIgPSB7XHJcbiAgICB4OiByZWN0MS5sZWZ0ICsgcmVjdDEud2lkdGggLyAyLFxyXG4gICAgeTogcmVjdDEudG9wICsgcmVjdDEuaGVpZ2h0IC8gMixcclxuICB9O1xyXG5cclxuICBjb25zdCBkaXN0YW5jZUZyb21Cb3JkZXI6IEJvcmRlckRpc3RhbmNlID0ge1xyXG4gICAgdG9wOiBjZW50ZXIueSAtIHJlY3QyLnRvcCxcclxuICAgIHJpZ2h0OiByZWN0Mi5yaWdodCAtIGNlbnRlci54LFxyXG4gICAgYm90dG9tOiByZWN0Mi5ib3R0b20gLSBjZW50ZXIueSxcclxuICAgIGxlZnQ6IGNlbnRlci54IC0gcmVjdDIubGVmdCxcclxuICB9O1xyXG5cclxuICByZXR1cm4gZGlzdGFuY2VGcm9tQm9yZGVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiBydW5Pbmx5T25jZUtleWRvd25BY3Rpb25zKCBldnQ6IEtleWJvYXJkRXZlbnQgKSB7XHJcbiAgZm9yICggY29uc3QgcGFpciBvZiBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2UgKSB7XHJcbiAgICBpZiAoIGV2dC5jb2RlID09PSBwYWlyWzBdICkge1xyXG4gICAgICBwYWlyWzFdLmZvckVhY2goIGtiRXZlbnQgPT4ga2JFdmVudCggZXZ0ICkgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJ1bktleWRvd25BY3Rpb25zUmVwZWF0KCBldnQ6IEtleWJvYXJkRXZlbnQgKSB7XHJcbiAgZm9yICggY29uc3QgcGFpciBvZiBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdCApIHtcclxuICAgIGlmICggZXZ0LmNvZGUgPT09IHBhaXJbMF0gKSB7XHJcbiAgICAgIHBhaXJbMV0uZm9yRWFjaCgga2JFdmVudCA9PiBrYkV2ZW50KCBldnQgKSApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgZXZ0ID0+IHtcclxuICBpZiAoICFldnQucmVwZWF0ICkge1xyXG4gICAgcnVuT25seU9uY2VLZXlkb3duQWN0aW9ucyggZXZ0ICk7XHJcbiAgfVxyXG5cclxuICBydW5LZXlkb3duQWN0aW9uc1JlcGVhdCggZXZ0ICk7XHJcbn0gKTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAna2V5dXAnLCBldnQgPT4ge1xyXG4gIGZvciAoIGNvbnN0IHBhaXIgb2YgZGljdEtleXNCeUFjdGlvbktleXVwICkge1xyXG4gICAgaWYgKCBldnQuY29kZSA9PT0gcGFpclswXSApIHtcclxuICAgICAgcGFpclsxXS5mb3JFYWNoKCBrYkV2ZW50ID0+IGtiRXZlbnQoIGV2dCApICk7XHJcbiAgICB9XHJcbiAgfVxyXG59ICk7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRSb3RhdGlvbkluRGVncmVlcyggZWxlbWVudDogSFRNTEVsZW1lbnQsIGF4aXM6ICd4JyB8ICd5JyB8ICd6JyA9ICd4JyApOiBudW1iZXIge1xyXG4gIGxldCByZWdleE1hdGNoUm90YXRlVmFsdWU6IFJlZ0V4cDtcclxuICBzd2l0Y2ggKCBheGlzICkge1xyXG4gICAgY2FzZSAneCc6XHJcbiAgICAgIHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZSA9IHJlZ2V4R3JvdXBSb3RhdGVYVmFsdWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAneSc6XHJcbiAgICAgIHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZSA9IHJlZ2V4R3JvdXBSb3RhdGVZVmFsdWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAneic6XHJcbiAgICAgIHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZSA9IHJlZ2V4R3JvdXBSb3RhdGVaVmFsdWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVnZXhNYXRjaFJvdGF0ZVZhbHVlID0gcmVnZXhHcm91cFJvdGF0ZVZhbHVlO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcblxyXG4gIGNvbnN0IG1hdGNoID0gcmVnZXhNYXRjaFJvdGF0ZVZhbHVlLmV4ZWMoIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtICk7XHJcbiAgaWYgKCBtYXRjaCApIHtcclxuICAgIGNvbnN0IHJvdGF0aW9uVmFsdWUgPSBwYXJzZUZsb2F0KCBtYXRjaFsxXSApO1xyXG4gICAgcmV0dXJuIHJvdGF0aW9uVmFsdWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJvZHlSb3RhdGlvbkluRGVncmVlcygpOiBudW1iZXIge1xyXG4gIGNvbnN0IG1hdGNoID0gZ2V0UmVnZXhSZW1vdmVSb3RhdGlvbkZyb21Cb2R5KCkuZXhlYyggZG9jdW1lbnQuYm9keS5zdHlsZS50cmFuc2Zvcm0gKTtcclxuICBpZiAoIG1hdGNoICkge1xyXG4gICAgY29uc3Qgcm90YXRpb25WYWx1ZSA9IHBhcnNlRmxvYXQoIG1hdGNoWzFdICk7XHJcbiAgICByZXR1cm4gcm90YXRpb25WYWx1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVnZXhSZW1vdmVSb3RhdGlvbkZyb21Cb2R5KCkge1xyXG4gIHJldHVybiBnZXRSZWdleFJlbW92ZVJvdGF0aW9uQmFzZWRPbkF4aXMoIGdldEJvZHlSb3RhdGlvbkF4aXMoKSApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWdleFJlbW92ZVJvdGF0aW9uQmFzZWRPbkF4aXMoIGF4aXM6ICd4JyB8ICd5JyB8ICd6JyApIHtcclxuICBzd2l0Y2ggKCBheGlzICkge1xyXG4gICAgY2FzZSAneCc6XHJcbiAgICAgIHJldHVybiByZWdleEdyb3VwUm90YXRlWFZhbHVlO1xyXG4gICAgY2FzZSAneSc6XHJcbiAgICAgIHJldHVybiByZWdleEdyb3VwUm90YXRlWVZhbHVlO1xyXG4gICAgY2FzZSAneic6XHJcbiAgICAgIHJldHVybiByZWdleEdyb3VwUm90YXRlWlZhbHVlO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHJlZ2V4R3JvdXBSb3RhdGVWYWx1ZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCb2R5Um90YXRpb25BeGlzKCk6ICd4JyB8ICd5JyB8ICd6JyB7XHJcbiAgcmV0dXJuIGdldEVsZW1lbnRSb3RhdGlvbkF4aXMoIGRvY3VtZW50LmJvZHkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRSb3RhdGlvbkF4aXMoIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICk6ICd4JyB8ICd5JyB8ICd6JyB7XHJcbiAgY29uc3QgZWxlbWVudFRyYW5zZm9ybSA9IGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtLnRvTG93ZXJDYXNlKCk7XHJcbiAgaWYgKCBlbGVtZW50VHJhbnNmb3JtLmluY2x1ZGVzKCAneCcgKSApIHtcclxuICAgIHJldHVybiAneCc7XHJcbiAgfSBlbHNlIGlmICggZWxlbWVudFRyYW5zZm9ybS5pbmNsdWRlcyggJ3knICkgKSB7XHJcbiAgICByZXR1cm4gJ3knO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJ3onO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zZm9ybUNvb3Jkc0Zyb21FbGVtZW50KCBlbGVtZW50OiBIVE1MRWxlbWVudCwgY2hlY2tCb2R5Um90YXRpb246IGJvb2xlYW4gPSBmYWxzZSApOiBQb2ludDJEIHtcclxuICBjb25zdCBhcnJDb21wdXRlZERyYWdnYWJsZVRyYW5zbGF0ZSA9ICggd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW1lbnQgKS50cmFuc2Zvcm0ubWF0Y2goIHJlZ2V4TnVtYmVyUGF0dGVybiApID8/IFswLCAwXSApLm1hcCggbiA9PiArbiApO1xyXG5cclxuICBsZXQgcmVzdWx0ID0ge1xyXG4gICAgeDogYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGVbNF0gIT09IHVuZGVmaW5lZCA/IE1hdGgucm91bmQoIGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzRdICkgOiAwLFxyXG4gICAgeTogYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGVbNV0gIT09IHVuZGVmaW5lZCA/IE1hdGgucm91bmQoIGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzVdICkgOiAwXHJcbiAgfVxyXG5cclxuICBpZiAoIGNoZWNrQm9keVJvdGF0aW9uICkge1xyXG4gICAgY29uc3QgYm9keUFuZ2xlID0gZ2V0RWxlbWVudFJvdGF0aW9uSW5EZWdyZWVzKCBkb2N1bWVudC5ib2R5LCBnZXRFbGVtZW50Um90YXRpb25BeGlzKCBlbGVtZW50ICkgKSB8fCAwO1xyXG4gICAgcmV0dXJuIHJvdGF0ZUNvb3JkaW5hdGVzKCByZXN1bHQueCwgcmVzdWx0LnksIGJvZHlBbmdsZSApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsaWNrRXZlbnRUb0Nvb3JkaW5hdGVzKCBldmVudDogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQgKSB7XHJcbiAgaWYgKCBldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQgKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiBldmVudC5jbGllbnRYLFxyXG4gICAgICB5OiBldmVudC5jbGllbnRZXHJcbiAgICB9O1xyXG4gIH0gZWxzZSBpZiAoIGV2ZW50IGluc3RhbmNlb2YgVG91Y2hFdmVudCApIHtcclxuICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiB0b3VjaC5jbGllbnRYLFxyXG4gICAgICB5OiB0b3VjaC5jbGllbnRZXHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBcIkV2ZW50IG5vdCBGb3VuZFwiO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZpc2libGVEaXZBYm92ZVBhcmVudCggeyBwYXJlbnRFbGVtZW50LCBpZCwgcG9zaXRpb24sIGRpbWVuc2lvbnMgfTogeyBwYXJlbnRFbGVtZW50OiBIVE1MRWxlbWVudDsgaWQ6IHN0cmluZzsgcG9zaXRpb24/OiB7IHRvcDogbnVtYmVyOyBsZWZ0OiBudW1iZXI7IH07IGRpbWVuc2lvbnM/OiBEaW1lbnNpb25zOyB9ICkge1xyXG4gIHZhciBpbnZpc2libGVEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG5cclxuICBpZiAoICFwYXJlbnRFbGVtZW50LnN0eWxlLnBvc2l0aW9uICkge1xyXG4gICAgcGFyZW50RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XHJcbiAgfVxyXG5cclxuICBpbnZpc2libGVEaXYuaWQgPSBpZDtcclxuICBpbnZpc2libGVEaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gIGludmlzaWJsZURpdi5zdHlsZS53aWR0aCA9IGRpbWVuc2lvbnMgJiYgZGltZW5zaW9ucy53aWR0aCA/IGRpbWVuc2lvbnMud2lkdGgudG9TdHJpbmcoKSArICdweCcgOiAnMTAwJSc7XHJcbiAgaW52aXNpYmxlRGl2LnN0eWxlLmhlaWdodCA9IGRpbWVuc2lvbnMgJiYgZGltZW5zaW9ucy5oZWlnaHQgPyBkaW1lbnNpb25zLmhlaWdodC50b1N0cmluZygpICsgJ3B4JyA6ICcxMDAlJztcclxuICBpbnZpc2libGVEaXYuc3R5bGUudG9wID0gKCBwb3NpdGlvbj8udG9wLnRvU3RyaW5nKCkgPz8gJzAnICkgKyAncHgnO1xyXG4gIGludmlzaWJsZURpdi5zdHlsZS5sZWZ0ID0gKCBwb3NpdGlvbj8ubGVmdC50b1N0cmluZygpID8/ICcwJyApICsgJ3B4JztcclxuICBpbnZpc2libGVEaXYuc3R5bGUub3BhY2l0eSA9ICcwJzsgLy8gTWFrZSB0aGUgZGl2IGludmlzaWJsZVxyXG4gIGludmlzaWJsZURpdi5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2F1dG8nOyAvLyBBbGxvdyB0aGUgZGl2IHRvIGludGVyY2VwdCBtb3VzZSBldmVudHNcclxuXHJcbiAgcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZCggaW52aXNpYmxlRGl2ICk7XHJcblxyXG4gIHJldHVybiBpbnZpc2libGVEaXY7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoaWRlRWxlbWVudCggZWxlbWVudDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICBlbGVtZW50LnN0eWxlLnpJbmRleCA9ICctMSc7XHJcbiAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gIGVsZW1lbnQuc3R5bGUud2lkdGggPSAnMHB4ICFpbXBvcnRhbnQnO1xyXG4gIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzBweCAhaW1wb3J0YW50JztcclxuICBlbGVtZW50LnNldEF0dHJpYnV0ZSggJ2hpZGRlbicsICcnICk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzbGVlcEFzeW5jKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPiggKCByZXNvbHZlICkgPT4gc2V0VGltZW91dCggKCkgPT4gcmVzb2x2ZSgpLCBtcyApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaW5kRWxlbWVudHNCeUNoZWNrKCB0cmlnZ2VyRWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQsIG9uQ2hlY2s6IEZ1bmN0aW9uLCBvblVuY2hlY2s6IEZ1bmN0aW9uICkge1xyXG4gIGlmICggdHJpZ2dlckVsZW1lbnQuY2hlY2tlZCApIHtcclxuICAgIG9uQ2hlY2soIHRhcmdldEVsZW1lbnQgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHRyaWdnZXJHcm91cCA9IHRyaWdnZXJFbGVtZW50Lm5hbWVcclxuICAgID8gQXJyYXkuZnJvbSggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCggYFtuYW1lPVwiJHsgdHJpZ2dlckVsZW1lbnQubmFtZSB9XCJdYCApIClcclxuICAgIDogW3RyaWdnZXJFbGVtZW50XTtcclxuXHJcbiAgdHJpZ2dlckdyb3VwLmZvckVhY2goIHQgPT4gdC5hZGRFdmVudExpc3RlbmVyKCAnY2hhbmdlJywgZXZ0ID0+IHtcclxuICAgIGlmICggdHJpZ2dlckVsZW1lbnQuY2hlY2tlZCApIHtcclxuICAgICAgb25DaGVjayggdGFyZ2V0RWxlbWVudCwgZXZ0ICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvblVuY2hlY2soIHRhcmdldEVsZW1lbnQsIGV2dCApO1xyXG4gICAgfVxyXG4gIH0gKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0SW5wdXRGb3JjZVBob25lTnVtYmVyRm9ybWF0KCBpbnB1dEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgKSB7XHJcbiAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdpbnB1dCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBwaG9uZUlucHV0ID0gdGhpcy52YWx1ZTtcclxuXHJcbiAgICBjb25zdCBjbGVhblBob25lSW5wdXQgPSBwaG9uZUlucHV0LnJlcGxhY2UoIC9cXEQvZywgJycgKTtcclxuICAgIGlmICggY2xlYW5QaG9uZUlucHV0Lmxlbmd0aCA+IDExICkge1xyXG4gICAgICBwaG9uZUlucHV0ID0gY2xlYW5QaG9uZUlucHV0LnNsaWNlKCAwLCAxMSApO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBwaG9uZU51bWJlckZvcm1hdHRlZCA9IHRvUGhvbmVOdW1iZXIoIHBob25lSW5wdXQgKTtcclxuXHJcbiAgICBpZiAoIHBob25lTnVtYmVyRm9ybWF0dGVkLmxlbmd0aCA9PT0gMTAgKSB7XHJcbiAgICAgIHBob25lTnVtYmVyRm9ybWF0dGVkID0gcGhvbmVOdW1iZXJGb3JtYXR0ZWQucmVwbGFjZUFsbCggJy0nLCAnJyApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudmFsdWUgPSBwaG9uZU51bWJlckZvcm1hdHRlZDtcclxuICB9ICk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGVCcm93c2VyKCkge1xyXG4gIHJldHVybiAvQW5kcm9pZHxpUGhvbmUvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyRGV2aWNlVHlwZSgpOiAnYW5kcm9pZCcgfCAnYXBwbGUnIHwgJ2Rlc2t0b3AnIHtcclxuICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8ICggd2luZG93IGFzIGFueSApLm9wZXJhO1xyXG5cclxuICBpZiAoIC9hbmRyb2lkL2kudGVzdCggdXNlckFnZW50ICkgKSB7XHJcbiAgICByZXR1cm4gJ2FuZHJvaWQnO1xyXG4gIH0gZWxzZSBpZiAoIC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KCB1c2VyQWdlbnQgKSAmJiAhKCB3aW5kb3cgYXMgYW55ICkuTVNTdHJlYW0gKSB7XHJcbiAgICByZXR1cm4gJ2FwcGxlJztcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuICdkZXNrdG9wJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc09uU2NyZWVuKCBlbGVtZW50OiBIVE1MRWxlbWVudCApIHtcclxuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICByZXR1cm4gKFxyXG4gICAgcmVjdC50b3AgPj0gMCAmJlxyXG4gICAgcmVjdC5sZWZ0ID49IDAgJiZcclxuICAgIHJlY3QuYm90dG9tIDw9ICggd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgKSAmJlxyXG4gICAgcmVjdC5yaWdodCA8PSAoIHdpbmRvdy5pbm5lcldpZHRoIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCApXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRFbGVtZW50Vmlld0lmQ2hlY2tlZCggdHJpZ2dlckVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIHRhcmdldEVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIG9wdGlvbnMgPSB7XHJcbiAgb25DaGVjazogKCB0cmlnZ2VyRWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgKSA9PiB7IH0sXHJcbiAgb25VbmNoZWNrOiAoIHRyaWdnZXJFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCB0YXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCApID0+IHsgfVxyXG59ICkge1xyXG4gIGJpbmRFbGVtZW50c0J5Q2hlY2soXHJcbiAgICB0cmlnZ2VyRWxlbWVudCxcclxuICAgIHRhcmdldEVsZW1lbnQsXHJcbiAgICAoIGVsOiBIVE1MRWxlbWVudCApID0+IHtcclxuICAgICAgZWwuY2xhc3NMaXN0LmFkZCggJ3Nob3cnICk7XHJcbiAgICAgIG9wdGlvbnMub25DaGVjayggdHJpZ2dlckVsZW1lbnQsIHRhcmdldEVsZW1lbnQgKTtcclxuICAgIH0sXHJcbiAgICAoIGVsOiBIVE1MRWxlbWVudCApID0+IHtcclxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSggJ3Nob3cnICk7XHJcbiAgICAgIG9wdGlvbnMub25VbmNoZWNrKCB0cmlnZ2VyRWxlbWVudCwgdGFyZ2V0RWxlbWVudCApO1xyXG4gICAgfSxcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVGcm9tUmFkaW9Hcm91cCggZ3JvdXBOYW1lOiBzdHJpbmcgKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIGBbbmFtZT0keyBncm91cE5hbWUgfV06Y2hlY2tlZGAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIGlmICggZWwgKSB7XHJcbiAgICByZXR1cm4gZWwudmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNtb290aFNjcm9sbCggdGFyZ2V0WTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyICk6IHZvaWQge1xyXG4gIGNvbnN0IHN0YXJ0WSA9IHdpbmRvdy5zY3JvbGxZIHx8IHdpbmRvdy5wYWdlWU9mZnNldDtcclxuICBsZXQgc3RhcnRUaW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgZnVuY3Rpb24gc3RlcCggY3VycmVudFRpbWU6IG51bWJlciApIHtcclxuICAgIGlmICggIXN0YXJ0VGltZSApIHN0YXJ0VGltZSA9IGN1cnJlbnRUaW1lO1xyXG4gICAgY29uc3QgZWxhcHNlZFRpbWUgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcclxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5taW4oIGVsYXBzZWRUaW1lIC8gZHVyYXRpb24sIDEgKTtcclxuICAgIGNvbnN0IGVhc2VkUHJvZ3Jlc3MgPSBsZXJwKCAwLCAxLCBwcm9ncmVzcyApO1xyXG4gICAgd2luZG93LnNjcm9sbFRvKCAwLCBsZXJwKCBzdGFydFksIHRhcmdldFksIGVhc2VkUHJvZ3Jlc3MgKSApO1xyXG4gICAgaWYgKCBlbGFwc2VkVGltZSA8IGR1cmF0aW9uICkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHN0ZXAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSggc3RlcCApO1xyXG59XHJcblxyXG4vLyBSZXRvcm5hIHVtYSBmdW7Dp8OjbyBxdWUgbsOjbyB2YWkgc2VyIGNvbXBsZXRhZGEgY2FzbyBzZWphIGNoYW1hZGEgbm92YW1lbnRlIGVtIHsgZGVsYXkgfSBtaWxpc3NlZ3VuZG9zXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZUZhY3RvcnkoIGZ1bmM6IEZ1bmN0aW9uLCBkZWxheTogbnVtYmVyICk6IEZ1bmN0aW9uIHtcclxuICBsZXQgaW5EZWJvdW5jZTogbnVtYmVyO1xyXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gd2luZG93O1xyXG4gICAgY29uc3QgYXJncyA9IGFyZ3VtZW50cztcclxuICAgIGNsZWFyVGltZW91dCggaW5EZWJvdW5jZSApO1xyXG4gICAgaW5EZWJvdW5jZSA9IHdpbmRvdy5zZXRUaW1lb3V0KCAoKSA9PiBmdW5jLmFwcGx5KCBjb250ZXh0LCBhcmdzICksIGRlbGF5ICk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gUmV0b3JuYSB1bWEgZnVuw6fDo28gcXVlIHPDsyBwb2RlIHNlciBjb21wbGV0YWRhIHVtYSB2ZXogYSBjYWRhIHsgbGltaXQgfSBtaWxpc3NlZ3VuZG9zIFxyXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGVGYWN0b3J5KCBmdW5jOiBGdW5jdGlvbiwgbGltaXQ6IG51bWJlciApOiBGdW5jdGlvbiB7XHJcbiAgbGV0IGxhc3RGdW5jOiBudW1iZXI7XHJcbiAgbGV0IGxhc3RSYW46IG51bWJlcjtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHdpbmRvdztcclxuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICBpZiAoICFsYXN0UmFuICkge1xyXG4gICAgICBmdW5jLmFwcGx5KCBjb250ZXh0LCBhcmdzICk7XHJcbiAgICAgIGxhc3RSYW4gPSBEYXRlLm5vdygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KCBsYXN0RnVuYyApO1xyXG4gICAgICBsYXN0RnVuYyA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCBEYXRlLm5vdygpIC0gbGFzdFJhbiA+PSBsaW1pdCApIHtcclxuICAgICAgICAgIGZ1bmMuYXBwbHkoIGNvbnRleHQsIGFyZ3MgKTtcclxuICAgICAgICAgIGxhc3RSYW4gPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgbGltaXQgLSAoIERhdGUubm93KCkgLSBsYXN0UmFuICkgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhTY3JvbGxUbyggcG9zOiBudW1iZXIgKTogdm9pZCB7XHJcbiAgZG9jdW1lbnQuYm9keS5zY3JvbGxUbygge1xyXG4gICAgdG9wOiBwb3MsXHJcbiAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoU2Nyb2xsVG9FbGVtZW50KCBlbGVtZW50OiBIVE1MRWxlbWVudCwgdXNlQnJvd3NlckRlZmF1bHRzOiBib29sZWFuID0gdHJ1ZSApOiB2b2lkIHtcclxuICBpZiAoICF1c2VCcm93c2VyRGVmYXVsdHMgKSB7XHJcbiAgICBjb25zdCB0YXJnZXRZID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cuc2Nyb2xsWTtcclxuICAgIGNvbnN0IGR1cmF0aW9uID0gMTAwMDsgLy8gRHVyYcOnw6NvIGZpeGEgZW0gbWlsaXNzZWd1bmRvcyAoMSBzZWd1bmRvKVxyXG4gICAgc21vb3RoU2Nyb2xsKCB0YXJnZXRZLCBkdXJhdGlvbiApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgZG9jdW1lbnQuYm9keS5zY3JvbGxUbygge1xyXG4gICAgdG9wOiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnksXHJcbiAgICBsZWZ0OiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLngsXHJcbiAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbiAgfSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0T3B0aW9uQnlUZXh0KCBpZFNlbGVjdEVsZW1lbnQ6IHN0cmluZywgc2VhcmNoVGV4dDogc3RyaW5nLCBjb250YWluczogYm9vbGVhbiA9IGZhbHNlICk6IHZvaWQge1xyXG4gIGNvbnN0IHNlbGVjdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggaWRTZWxlY3RFbGVtZW50ICkgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcblxyXG4gIGlmICggIXNlbGVjdEVsZW1lbnQgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCBvcHRpb25zRWxlbWVudG9TZWxlY3QgPSBbLi4uc2VsZWN0RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnb3B0aW9uJyApXTtcclxuXHJcbiAgbGV0IHNlbGVjdGVkT3B0aW9uO1xyXG4gIGlmICggY29udGFpbnMgKSB7XHJcbiAgICBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnNFbGVtZW50b1NlbGVjdFxyXG4gICAgICAuZmlsdGVyKCBlbCA9PiBlbC50ZXh0Q29udGVudCAmJiBlbC50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCBzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkgKSApWzBdLnZhbHVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnNFbGVtZW50b1NlbGVjdFxyXG4gICAgICAuZmlsdGVyKCBlbCA9PiBlbC50ZXh0Q29udGVudCAmJiBlbC50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpID09PSBzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkgKVswXS52YWx1ZTtcclxuICB9XHJcblxyXG4gIHNlbGVjdEVsZW1lbnQudmFsdWUgPSBzZWxlY3RlZE9wdGlvbjtcclxufVxyXG5cclxuIiwiZXhwb3J0IGNvbnN0IHJlZ2V4TnVtYmVyUGF0dGVybiA9IC8tP1xcZCtcXC4/XFxkKi9nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQb2ludDJEIHtcclxuICB4OiBudW1iZXI7XHJcbiAgeTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIERpbWVuc2lvbnMge1xyXG4gIHdpZHRoOiBudW1iZXI7XHJcbiAgaGVpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmRleFRvUm93KCBpbmRleDogbnVtYmVyLCBncmlkV2lkdGg6IG51bWJlciApIHtcclxuICByZXR1cm4gTWF0aC5mbG9vciggaW5kZXggLyBncmlkV2lkdGggKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4VG9Db2woIGluZGV4OiBudW1iZXIsIGdyaWRXaWR0aDogbnVtYmVyICkge1xyXG4gIHJldHVybiBpbmRleCAlIGdyaWRXaWR0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJvd0NvbFRvSW5kZXgoIHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgd2lkdGg6IG51bWJlciApIHtcclxuICByZXR1cm4gKCByb3cgKiB3aWR0aCApICsgY29sO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQ29vcmRpbmF0ZXNGcm9tUG9pbnQyRCggY29vcmRzOiBQb2ludDJELCBhbmdsZTogbnVtYmVyICk6IFBvaW50MkQge1xyXG4gIGNvbnN0IHJhZGlhbnMgPSAoIE1hdGguUEkgLyAxODAgKSAqIGFuZ2xlO1xyXG4gIGNvbnN0IG5ld1ggPSBjb29yZHMueCAqIE1hdGguY29zKCByYWRpYW5zICkgLSBjb29yZHMueSAqIE1hdGguc2luKCByYWRpYW5zICk7XHJcbiAgY29uc3QgbmV3WSA9IGNvb3Jkcy54ICogTWF0aC5zaW4oIHJhZGlhbnMgKSArIGNvb3Jkcy55ICogTWF0aC5jb3MoIHJhZGlhbnMgKTtcclxuICByZXR1cm4geyB4OiBuZXdYLCB5OiBuZXdZIH07XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQ29vcmRpbmF0ZXMoIHg6IG51bWJlciwgeTogbnVtYmVyLCBhbmdsZTogbnVtYmVyICk6IFBvaW50MkQge1xyXG4gIGNvbnN0IHJhZGlhbnMgPSAoIE1hdGguUEkgLyAxODAgKSAqIGFuZ2xlO1xyXG4gIGNvbnN0IG5ld1ggPSB4ICogTWF0aC5jb3MoIHJhZGlhbnMgKSAtIHkgKiBNYXRoLnNpbiggcmFkaWFucyApO1xyXG4gIGNvbnN0IG5ld1kgPSB4ICogTWF0aC5zaW4oIHJhZGlhbnMgKSArIHkgKiBNYXRoLmNvcyggcmFkaWFucyApO1xyXG4gIHJldHVybiB7IHg6IG5ld1gsIHk6IG5ld1kgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFyZURpYWdvbmFscyggaW5kZXgxOiBudW1iZXIsIGluZGV4MjogbnVtYmVyLCBncmlkU2l6ZTogbnVtYmVyICk6IGJvb2xlYW4ge1xyXG4gIGlmICggaW5kZXgxIDwgMCB8fCBpbmRleDIgPCAwICkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCAnSW52YWxpZCBjZWxsIGluZGljZXMnICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCByb3cxID0gaW5kZXhUb1JvdyggaW5kZXgxLCBncmlkU2l6ZSApO1xyXG4gIGNvbnN0IGNvbDEgPSBpbmRleFRvQ29sKCBpbmRleDEsIGdyaWRTaXplICk7XHJcblxyXG4gIGNvbnN0IHJvdzIgPSBpbmRleFRvUm93KCBpbmRleDIsIGdyaWRTaXplICk7XHJcbiAgY29uc3QgY29sMiA9IGluZGV4VG9Db2woIGluZGV4MiwgZ3JpZFNpemUgKTtcclxuXHJcbiAgcmV0dXJuIE1hdGguYWJzKCByb3cxIC0gcm93MiApID09PSBNYXRoLmFicyggY29sMSAtIGNvbDIgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4VG9Qb2ludDJEKCBpbmRleDogbnVtYmVyLCBncmlkV2lkdGg6IG51bWJlciApOiBQb2ludDJEIHtcclxuICByZXR1cm4ge1xyXG4gICAgeDogaW5kZXhUb0NvbCggaW5kZXgsIGdyaWRXaWR0aCApLFxyXG4gICAgeTogaW5kZXhUb1JvdyggaW5kZXgsIGdyaWRXaWR0aCApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGVycCggbWluOiBudW1iZXIsIG1heDogbnVtYmVyLCBhbW91bnQ6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiAoIDEgLSBhbW91bnQgKSAqIG1pbiArIGFtb3VudCAqIG1heDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2VMZXJwKCBhOiBudW1iZXIsIGI6IG51bWJlciwgdmFsOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICByZXR1cm4gKCB2YWwgLSBhICkgLyAoIGIgLSBhICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1hcCggaW5NaW46IG51bWJlciwgaW5NYXg6IG51bWJlciwgb3V0TWluOiBudW1iZXIsIG91dE1heDogbnVtYmVyLCB2YWw6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiBsZXJwKCBvdXRNaW4sIG91dE1heCwgaW52ZXJzZUxlcnAoIGluTWluLCBpbk1heCwgdmFsICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUludEV4Y2x1c2l2ZSggbWluOiBudW1iZXIsIG1heDogbnVtYmVyICkge1xyXG4gIHJldHVybiBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBtYXggLSBtaW4gKSArIG1pbiApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNFcXVhbFNldHM8VD4oIHNldDE6IFNldDxUPiwgc2V0MjogU2V0PFQ+ICkge1xyXG4gIHJldHVybiBzZXQxLnNpemUgPT09IHNldDIuc2l6ZSAmJlxyXG4gICAgWy4uLnNldDFdLmV2ZXJ5KCAoIHggKSA9PiBzZXQyLmhhcyggeCApICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnRJbmNsdXNpdmUoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciApIHtcclxuICBtaW4gPSBNYXRoLmNlaWwoIG1pbiApO1xyXG4gIG1heCA9IE1hdGguZmxvb3IoIG1heCApO1xyXG4gIHJldHVybiBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBtYXggLSBtaW4gKyAxICkgKSArIG1pbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUZyb21BcnJheTxUPiggYXJyOiBBcnJheTxUPiApIHtcclxuICByZXR1cm4gYXJyW2dldFJhbmRvbUludEV4Y2x1c2l2ZSggMCwgYXJyLmxlbmd0aCApXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKCBudW06IG51bWJlciA9IDAsIG1pbjogbnVtYmVyID0gMCwgbWF4OiBudW1iZXIgPSAxMDAgKTogbnVtYmVyIHtcclxuICByZXR1cm4gTWF0aC5tYXgoIG1pbiwgTWF0aC5taW4oIG51bSwgbWF4ICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbnV0ZXNUb01pbGxpc2Vjb25kcyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gbXMgKiA2MDAwMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbGxpc2Vjb25kc1RvTWludXRlcyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gbXMgLyA2MDAwMDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbGxpc2Vjb25kc1RvSG91cnMoIG1zOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1zIC8gMy42ZSs2O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWlsbGlzZWNvbmRzVG9EYXlzKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBtcyAvIDguNjRlKzc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZWdhYnl0ZVRvQnl0ZSggbWI6IG51bWJlciApIHtcclxuICByZXR1cm4gbWIgKiAxMDI0ICogMTAyNDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ5dGVUb01lZ2FieXRlKCBiOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIGIgLyAxMDI0IC8gMTAyNDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFycmF5RnJvbVJhbmdlKCBzaXplOiBudW1iZXIsIHN0YXJ0aW5nRnJvbTogbnVtYmVyID0gMCApOiBudW1iZXJbXSB7XHJcbiAgbGV0IHJlc3VsdCA9IFsuLi5BcnJheSggc2l6ZSApLmtleXMoKV1cclxuXHJcbiAgaWYgKCBzdGFydGluZ0Zyb20gIT0gMCApIHtcclxuICAgIHJlc3VsdCA9IHJlc3VsdC5tYXAoIGkgPT4gaSArIHN0YXJ0aW5nRnJvbSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMjUpO1xuIl0sIm5hbWVzIjpbIkJvcmRlckRpc3RhbmNlRXh0cmFzIiwiY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzIiwiY29uc3RydWN0b3IiLCJjb2xsaXNpb25Cb3JkZXJEaXN0YW5jZSIsInRoaXMiLCJhbnlHcmVhdGVyVGhhbiIsIm51bSIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsImFueUxvd2VyVGhhbiIsImFueUVxdWFscyIsIm1hcEVsZW1lbnRzQ29sbGlkaW5nQnlUYXJnZXRzIiwiTWFwIiwibWFwVGFyZ2V0c0NvbGxpZGluZ0J5VHJpZ2dlckVsZW1lbnQiLCJtYXBFbGVtZW50c1RyaWdnZXJpbmdFdmVudHNCeVRhcmdldCIsImNvbGxpc2lvbkNoZWNrSW50ZXJ2YWwiLCJjb2xsaXNpb25FdmVudHNCeVNlbGVjdG9ycyIsImluc2VydEludG9FdmVudENoZWNrTGlzdCIsImVsZW1lbnRUb0NoZWNrIiwidGFyZ2V0UXVlcnlTZWxlY3RvciIsImNvbGxpc2lvbkV2ZW50cyIsInJlZkV4aXN0aW5nRXZlbnQiLCJnZXQiLCJwdXNoIiwidHJpZ2dlckVsZW1lbnQiLCJldmVudHMiLCJzZXQiLCJjbGVhbk5vdENvbGxpZGluZ0VsZW1lbnRzQXR0cmlidXRlc0FuZENsYXNzZXMiLCJ0cmlnZ2VyRWxlbWVudHNDb2xsaXNpb24iLCJ0YXJnZXQiLCJ0YXJnZXRDb2xsaXNpb24iLCJhZ2VudCIsImRlbGV0ZSIsInNpemUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJzZXRDb2xsaXNpb25DbGFzc2VzIiwiY29sbGlzaW9uVHJpZ2dlciIsImFkZCIsImdldEVsZW1lbnRzQ29sbGlkaW5nQnlUYXJnZXQiLCJoYXMiLCJTZXQiLCJnZXRFbGVtZW50c0NvbGxpZGluZ0J5VHJpZ2dlciIsImNoZWNrRWFjaEVsZW1lbnRDb2xsaXNpb24iLCJmb3JFYWNoIiwiYXN5bmMiLCJjb2xsaXNpb25UcmlnZ2VycyIsImNvbGxpc2lvblRhcmdldFNlbGVjdG9ycyIsImFyclRhcmdldHMiLCJ0YXJnZXRDb2xsaXNpb25TZXQiLCJ0cmlnZ2VyIiwidHJpZ2dlckNvbGxpc2lvblNldCIsImNoZWNrRWxlbWVudENvbGxpc2lvbiIsImNvbGxpZGluZ0F0IiwiZ2V0Q29sbGlzaW9uRGlyZWN0aW9uIiwiZGlzdGFuY2VGcm9tQm9yZGVyIiwiZ2V0RGlzdGFuY2VGcm9tQm9yZGVyIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImV2ZW50IiwiZW5hYmxlZCIsIm9uQ29sbGlkaW5nIiwidHJpZ2dlckNvbGxpc2lvbkV2ZW50c0FzeW5jIiwib25Ob3RDb2xsaWRpbmciLCJvbkVsZW1lbnRzTm90Q29sbGlkaW5nIiwic2V0Q29sbGlzaW9uRXZlbnRzRm9yVGFyZ2V0cyIsIkFycmF5IiwiZnJvbSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImluaXRDb21wbGV4Q29sbGlzaW9uQ2hlY2siLCJnZXRFbGVtZW50c0ludGVyYWN0aW5nU2V0IiwiQ29sbGlzaW9uRXZlbnQiLCJPYmplY3RFdmVudExpc3RlbmVyIiwiaXNWYWxpZFRhcmdldFRvVHJpZ2dlckV2ZW50IiwiY3VycmVudFRhcmdldCIsInRhcmdldENsYXNzTmFtZSIsInZhbGlkYXRlRGlzdGFuY2UiLCJjaGVja1RhcmdldENsYXNzIiwiY29udGFpbnMiLCJkaXN0YW5jZVRocmVzaG9sZCIsIlBpbkNvbGxpc2lvbkV2ZW50Iiwib25QaW5FdmVudHMiLCJvblVucGluRXZlbnRzIiwicGluUG9zaXRpb25Gb3JtdWxhIiwidGFyZ2V0Q2xhc3MiLCJvblBpbiIsIm9uVW5waW4iLCJzdXBlciIsInVuZGVmaW5lZCIsIm1haW5FbGVtZW50IiwiX2NvbGxpZGluZ0F0IiwiZWxlbWVudHNJbnRlcmFjdGluZ1NldCIsIm5hbWVDb3VudEVsZW1lbnRzSW50ZXJhY3RpbmdBdHRyaWJ1dGUiLCJvbkVsZW1lbnRJbnRlcmFjdGlvbkNoYW5nZSIsImV2IiwiY2FsbEV2ZW50c0J5TmFtZSIsImRyYWdnYWJsZSIsInRhcmdldFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwaW5Qb3NpdGlvbiIsImdldFRyYW5zZm9ybUNvb3Jkc0Zyb21FbGVtZW50IiwicmVzZXRUcmFuc2Zvcm0iLCJzdHlsZSIsInRyYW5zZm9ybSIsIngiLCJ5IiwicGluRWxlbWVudEJ5Rm9ybXVsYSIsImRyYWdnYWJsZVRyYW5zZm9ybVBvc2l0aW9uIiwidGFyZ2V0UmlnaHRQb3NpdGlvbiIsInRhcmdldEJvdHRvbVBvc2l0aW9uIiwibmV3WCIsIk1hdGgiLCJyb3VuZCIsIndpZHRoIiwibmV3WSIsImhlaWdodCIsInBpbkVsZW1lbnRPbkNlbnRlciIsImFnZW50Q29sbGlzaW9uU2V0Iiwic2V0QXR0cmlidXRlIiwidG9TdHJpbmciLCJlbGVtZW50IiwicmVwbGFjZSIsInJlZ2V4UmVtb3ZlVHJhbnNsYXRlRnJvbVRyYW5zZm9ybSIsImRlZmF1bHRTaGFyZUF0dHJpYnV0ZUNvbGxpc2lvbkV2ZW50T3B0aW9ucyIsImtlZXBBdHRyaWJ1dGUiLCJTaGFyZUF0dHJpYnV0ZUNvbGxpc2lvbkV2ZW50Iiwib3B0aW9ucyIsIl9kaXN0YW5jZUZyb21Cb3JkZXIiLCJzaGFyZWRBdHRyaWJ1dGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2hhcmVkQXR0cmlidXRlVmFsdWUiLCJoYW5kbGVFbGVtZW50SW50ZXJhY3Rpb25TaGFyZUF0dHJpYnV0ZSIsIm9uU2hhcmVkQXR0cmlidXRlRW1wdHkiLCJkZWZhdWx0U2hhcmVkQXR0cmlidXRlRnJvbVRhcmdldCIsImdldERlZmF1bHRBdHRyaWJ1dGVGb3JUYXJnZXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJldmVudHNCeU5hbWUiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnROYW1lIiwibmV3RXZlbnQiLCJpZCIsImNyeXB0byIsInJhbmRvbVVVSUQiLCJ0b0xvd2VyQ2FzZSIsImdldEV2ZW50c0J5TmFtZSIsInJlbW92ZUV2ZW50QnlJZCIsImV2ZW50SWQiLCJ2YWx1ZSIsImtleSIsImZpbHRlciIsImUiLCJldmVudEFyZ3MiLCJyZWdleEdyb3VwUm90YXRlVmFsdWUiLCJyZWdleEdyb3VwUm90YXRlWFZhbHVlIiwicmVnZXhHcm91cFJvdGF0ZVlWYWx1ZSIsInJlZ2V4R3JvdXBSb3RhdGVaVmFsdWUiLCJkaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2UiLCJkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdCIsImRpY3RLZXlzQnlBY3Rpb25LZXl1cCIsImdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24iLCJyZWN0IiwiY2VudGVyWCIsImNlbnRlclkiLCJyb3RhdGlvbkFuZ2xlIiwibWF0Y2giLCJheGlzIiwiZ2V0UmVnZXhSZW1vdmVSb3RhdGlvbkJhc2VkT25BeGlzIiwiZ2V0RWxlbWVudFJvdGF0aW9uQXhpcyIsImJvZHkiLCJleGVjIiwicGFyc2VGbG9hdCIsImdldEJvZHlSb3RhdGlvbkluRGVncmVlcyIsInJhZGlhbnMiLCJQSSIsImNvc1RoZXRhIiwiY29zIiwic2luVGhldGEiLCJzaW4iLCJyb3RhdGVkWDEiLCJyb3RhdGVkWTEiLCJyb3RhdGVkWDIiLCJyb3RhdGVkWTIiLCJyb3RhdGVkTGVmdCIsIm1pbiIsInJvdGF0ZWRUb3AiLCJyb3RhdGVkQm90dG9tIiwibWF4Iiwicm90YXRlZFJpZ2h0IiwidG9KU09OIiwiZWxlbWVudDEiLCJlbGVtZW50MiIsImNoZWNrQm9keVJvdGF0aW9uIiwicmVjdDEiLCJyZWN0MiIsIm1hcERlZmF1bHRBdHRyaWJ1dGVzQnlFbGVtZW50IiwiYXR0cmlidXRlTmFtZSIsInJlc3VsdCIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNCeU5hbWUiLCJuZXdEZWZhdWx0QXR0cmlidXRlIiwic2V0RGVmYXVsdEF0dHJpYnV0ZUZvclRhcmdldCIsImNlbnRlciIsImVsZW1lbnRUcmFuc2Zvcm0iLCJpbmNsdWRlcyIsImFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlIiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJlZ2V4TnVtYmVyUGF0dGVybiIsIm4iLCJib2R5QW5nbGUiLCJyZWdleE1hdGNoUm90YXRlVmFsdWUiLCJnZXRFbGVtZW50Um90YXRpb25JbkRlZ3JlZXMiLCJyb3RhdGVDb29yZGluYXRlcyIsImV2dCIsInJlcGVhdCIsInBhaXIiLCJjb2RlIiwia2JFdmVudCIsInJ1bk9ubHlPbmNlS2V5ZG93bkFjdGlvbnMiLCJydW5LZXlkb3duQWN0aW9uc1JlcGVhdCIsImFuZ2xlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=
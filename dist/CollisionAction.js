var CollisionAction;(()=>{"use strict";var t={33:(t,e,n)=>{n.d(e,{BorderDistanceExtras:()=>i});class i{collisionBorderDistances;constructor(t){this.collisionBorderDistances=t}anyGreaterThan(t){return this.collisionBorderDistances.top>t||this.collisionBorderDistances.right>t||this.collisionBorderDistances.bottom>t||this.collisionBorderDistances.left>t}anyLowerThan(t){return this.collisionBorderDistances.top<t||this.collisionBorderDistances.right<t||this.collisionBorderDistances.bottom<t||this.collisionBorderDistances.left<t}anyEquals(t){return this.collisionBorderDistances.top===t||this.collisionBorderDistances.right===t||this.collisionBorderDistances.bottom===t||this.collisionBorderDistances.left===t}}},125:(t,e,n)=>{n.r(e),n.d(e,{PinCollisionEvent:()=>s.PinCollisionEvent,ShareAttributeCollisionEvent:()=>o.ShareAttributeCollisionEvent,cleanNotCollidingElementsAttributesAndClasses:()=>h,getElementsCollidingByTarget:()=>u,getElementsCollidingByTrigger:()=>p,getElementsInteractingSet:()=>b,initComplexCollisionCheck:()=>E,insertIntoEventCheckList:()=>d,mapElementsCollidingByTargets:()=>r,mapElementsTriggeringEventsByTarget:()=>l,mapTargetsCollidingByTriggerElement:()=>a,setCollisionClasses:()=>m});var i=n(319),s=n(488),o=n(368);const r=new Map,a=new Map,l=new Map;let c;const g=new Map;function d(t,e,n){const i=g.get(e);i?i.push({triggerElement:t,events:n}):g.set(e,[{triggerElement:t,events:n}])}function h(t,e,n,i){t.delete(e)&&0===t.size&&i.triggerElement.classList.remove("colliding"),n.delete(i.triggerElement)&&0===n.size&&e.classList.remove("colliding")}function m(t,e){t.triggerElement.classList.add("colliding"),e.classList.add("colliding")}function u(t){return r.has(t)||r.set(t,new Set),r.get(t)}function p(t){return a.has(t)||a.set(t,new Set),a.get(t)}function f(){g.forEach((async(t,e)=>{!function(t,e){t.forEach((async t=>{const n=u(t);e.forEach((async e=>{if(e.triggerElement===t)return;const s=p(e.triggerElement);(0,i.checkElementCollision)(e.triggerElement,t,!0)?(s.add(t),n.add(e.triggerElement),m(e,t),await async function(t,e){const n=(0,i.getCollisionDirection)(t.triggerElement,e),s=(0,i.getDistanceFromBorder)(t.triggerElement,e);await Promise.all(t.events.map((i=>{i.enabled&&i.onColliding(t.triggerElement,e,n,s)})))}(e,t)):await async function(t,e,n,i){h(t,e,n,i),await Promise.all(i.events.map((t=>{t.enabled&&t.onNotColliding(i.triggerElement,e)})))}(s,t,n,e)}))}))}(Array.from(document.querySelectorAll(e)),t)})),requestAnimationFrame(f)}function E(t,e,n){d(t,e,n),c||requestAnimationFrame(f)}function b(t){return l.has(t)||l.set(t,new Set),l.get(t)}},476:(t,e,n)=>{n.d(e,{CollisionEvent:()=>o});var i=n(930),s=n(33);class o extends i.ObjectEventListener{enabled=!0;isValidTargetToTriggerEvent(t,e,n){return!!this.enabled&&(!(this.checkTargetClass&&!t.classList.contains(e))&&(!n||!new s.BorderDistanceExtras(n.distanceFromBorder).anyLowerThan(n.distanceThreshold)))}}},488:(t,e,n)=>{n.d(e,{PinCollisionEvent:()=>r});var i=n(319),s=n(125),o=n(476);class r extends o.CollisionEvent{onPinEvents;onUnpinEvents;pinPositionFormula;checkTargetClass;targetClass="pin-target";constructor({pinPositionFormula:t,onPin:e,onUnpin:n,checkTargetClass:i}){super(),this.pinPositionFormula=t||void 0,this.onPinEvents=e?[e]:[],this.onUnpinEvents=n?[n]:[],this.checkTargetClass=void 0!==i&&i}async onColliding(t,e,n,o){if(!this.isValidTargetToTriggerEvent(e,this.targetClass,{distanceFromBorder:o,distanceThreshold:0}))return;const r=(0,s.getElementsInteractingSet)(e),l="total-pinned-elements";if(t.classList.contains("dragging"))return t.classList.remove("pinned"),t.classList.add("ready-to-pin"),void(r.delete(t)&&(this.onElementInteractionChange(e,r,l),!this.onUnpinEvents||this.onUnpinEvents.forEach((n=>n(t,e))),this.getEventsByName("onunpin").forEach((n=>n(t,e)))));this.pinPositionFormula?function(t,e,n,s){const o=e.getBoundingClientRect(),r=s(t.getBoundingClientRect(),o,(0,i.getTransformCoordsFromElement)(t),n);a(t),t.style.transform+=`translate(${r.x}px, ${r.y}px)`}(t,e,o,this.pinPositionFormula):function(t,e,n){const s=e.getBoundingClientRect(),o=(0,i.getTransformCoordsFromElement)(t),r=o.x+n.right,l=o.y+n.bottom,c=Math.round(r-s.width/2),g=Math.round(l-s.height/2);a(t),t.style.transform+=`translate(${c}px, ${g}px)`}(t,e,o),r.has(t)||(r.add(t),!this.onPinEvents||this.onPinEvents.forEach((n=>n(t,e))),this.getEventsByName("onpin").forEach((n=>n(t,e)))),t.classList.add("pinned"),t.classList.remove("ready-to-pin"),this.onElementInteractionChange(e,r,l)}async onNotColliding(t,e){const n=(0,s.getElementsInteractingSet)(e);n.delete(t),n.size>0?e.classList.add("has-pinned-elements"):e.classList.remove("has-pinned-elements"),s.mapTargetsCollidingByTriggerElement.has(t)||s.mapTargetsCollidingByTriggerElement.set(t,new Set);const i=s.mapTargetsCollidingByTriggerElement.get(t);i.delete(e)&&0===i.size&&t.classList.remove("pinned","ready-to-pin")}onElementInteractionChange(t,e,n){e.size>0?t.classList.add("has-pinned-elements"):t.classList.remove("has-pinned-elements"),t.setAttribute(n,e.size.toString())}}function a(t){t.style.transform=t.style.transform.replace(i.regexRemoveTranslateFromTransform,"")}},368:(t,e,n)=>{n.d(e,{ShareAttributeCollisionEvent:()=>a});var i=n(319),s=n(125),o=n(476);const r={keepAttribute:!1};class a extends o.CollisionEvent{checkTargetClass;keepAttribute;targetClass="attribute-target";constructor(t=r){super(),this.keepAttribute=t.keepAttribute||!1,this.checkTargetClass=t.checkTargetClass||!0}async onColliding(t,e,n,i){const o=t.getAttribute("shared-attribute-name"),r=t.getAttribute("shared-attribute-value");if(!r||!o||!this.isValidTargetToTriggerEvent(e,this.targetClass))return;const a=(0,s.getElementsInteractingSet)(e),l="total-sharing-attributes";t.classList.contains("dragging")?(t.classList.remove("sharing-attribute"),t.classList.add("ready-to-share-attribute"),this.handleElementInteractionShareAttribute(t,e,a,l)):(t.classList.add("sharing-attribute"),t.classList.remove("ready-to-share-attribute"),e.setAttribute(o,r),a.add(t),this.handleElementInteractionShareAttribute(t,e,a,l))}async onNotColliding(t,e){(0,s.getElementsInteractingSet)(e).size>0?e.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,e),s.mapTargetsCollidingByTriggerElement.has(t)||s.mapTargetsCollidingByTriggerElement.set(t,new Set);const n=s.mapTargetsCollidingByTriggerElement.get(t);(n.delete(e)||0===n.size)&&t.classList.remove("sharing-attribute","ready-to-share-attribute")}handleElementInteractionShareAttribute(t,e,n,i){n.size>0?e.classList.add("sharing-attribute"):this.onSharedAttributeEmpty(t,e),e.setAttribute(i,n.size.toString())}onSharedAttributeEmpty(t,e){e.classList.remove("sharing-attribute");const n=t.getAttribute("shared-attribute-name");if(n){const t=(0,i.getDefaultAttributeForTarget)(e,n);t?e.setAttribute(n,t):this.keepAttribute||e.removeAttribute(n)}}}},930:(t,e,n)=>{n.d(e,{ObjectEventListener:()=>i});class i{eventsByName=new Map;addEventListener(t,e){this.eventsByName.has(t.toLowerCase())?this.eventsByName.get(t.toLowerCase()).push(e):this.eventsByName.set(t.toLowerCase(),[e])}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t(...e)))}}},319:(t,e,n)=>{n.d(e,{checkElementCollision:()=>m,getCollisionDirection:()=>f,getDefaultAttributeForTarget:()=>p,getDistanceFromBorder:()=>E,getTransformCoordsFromElement:()=>y,regexRemoveTranslateFromTransform:()=>s});var i=n(739);const s=/translate\([^)]*\)/g,o=/rotate\((-?\d+\.?\d*)deg\)/,r=/rotateX\((-?\d+\.?\d*)deg\)/,a=/rotateY\((-?\d+\.?\d*)deg\)/,l=/rotateZ\((-?\d+\.?\d*)deg\)/,c=new Map,g=new Map,d=new Map;function h(t){const e=t.getBoundingClientRect(),n=e.left+e.width/2,i=e.top+e.height/2,s=function(){const t=function(t){switch(t){case"x":return r;case"y":return a;case"z":return l;default:return o}}(b(document.body)).exec(document.body.style.transform);return t?parseFloat(t[1]):0}(),c=Math.PI/180*s,g=Math.cos(c),d=Math.sin(c),h=n+(e.left-n)*g-(e.top-i)*d,m=i+(e.left-n)*d+(e.top-i)*g,u=n+(e.right-n)*g-(e.bottom-i)*d,p=i+(e.right-n)*d+(e.bottom-i)*g,f=Math.min(h,u),E=Math.min(m,p),y=Math.max(m,p),v=Math.max(h,u);return{x:f,y:E,width:e.width,height:e.height,toJSON:e.toJSON,left:f,top:E,bottom:y,right:v}}function m(t,e,n=!1){const i=n?h(t):t.getBoundingClientRect(),s=n?h(e):e.getBoundingClientRect();return!(i.top>s.bottom||i.right<s.left||i.bottom<s.top||i.left>s.right)}const u=new Map;function p(t,e){u.has(t)||u.set(t,new Map);let n="";const i=u.get(t);return n=(i.has(e)?i.get(e):t.getAttribute(e))||"",function(t,e,n){u.has(t)||u.set(t,new Map),u.get(t).set(e,n)}(t,e,n),n}function f(t,e,n=!1){const i=n?h(t):t.getBoundingClientRect(),s=n?h(e):e.getBoundingClientRect();return{top:i.bottom>s.top&&i.top<s.top+s.height/3,right:i.left<s.right&&i.right>s.right-s.width/3,center:i.top<s.bottom&&i.bottom>s.top&&i.left<s.right&&i.right>s.left,bottom:i.top<s.bottom-s.height/3&&i.bottom>s.bottom-s.height/3,left:i.right>s.left&&i.left<s.left+s.width/3}}function E(t,e,n=!1){const i=n?h(t):t.getBoundingClientRect(),s=n?h(e):e.getBoundingClientRect(),o=i.left+i.width/2,r=i.top+i.height/2;return{top:r-s.top,right:s.right-o,bottom:s.bottom-r,left:o-s.left}}function b(t){const e=t.style.transform.toLowerCase();return e.includes("x")?"x":e.includes("y")?"y":"z"}function y(t,e=!1){const n=(window.getComputedStyle(t).transform.match(i.regexNumberPattern)??[0,0]).map((t=>+t));let s={x:void 0!==n[4]?Math.round(n[4]):0,y:void 0!==n[5]?Math.round(n[5]):0};if(e){const e=function(t,e="x"){let n;switch(e){case"x":n=r;break;case"y":n=a;break;case"z":n=l;break;default:n=o}const i=n.exec(t.style.transform);return i?parseFloat(i[1]):0}(document.body,b(t))||0;return(0,i.rotateCoordinates)(s.x,s.y,e)}return s}window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of c)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of g)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of d)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},739:(t,e,n)=>{n.d(e,{regexNumberPattern:()=>i,rotateCoordinates:()=>s});const i=/-?\d+\.?\d*/g;function s(t,e,n){const i=Math.PI/180*n;return{x:t*Math.cos(i)-e*Math.sin(i),y:t*Math.sin(i)+e*Math.cos(i)}}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i=n(125);CollisionAction=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
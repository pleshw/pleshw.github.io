var DraggableElement;(()=>{"use strict";var t={8586:(t,e,n)=>{n.d(e,{MovableElement:()=>s});var o=n(7930),i=n(1319);class s extends o.ObjectEventListener{element;movingState;intervalUpdatePosition;onBeforeMove;onAfterMove;constructor(t){if(super(),!t.element)throw new Error("Null movable element. Please pass a valid element in constructor.");this.element=t.element,this.onBeforeMove=t.onBeforeMove,this.onAfterMove=t.onAfterMove,this.movingState={pos:{x:0,y:0},delta:{dx:0,dy:0}},this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),200)}get position(){return this.movingState.pos}set position(t){this.moveToPosition(t.x,t.y)}get x(){return this.movingState.pos.x}set x(t){this.moveToPosition(t,this.y)}get y(){return this.movingState.pos.y}set y(t){this.moveToPosition(this.x,t)}setTranslate(t,e){this.callEventsByName("onBeforeMove",this.element,this),this.onBeforeMove&&this.onBeforeMove(this.element,this),this.resetTranslate(),this.element.style.transform+=`translate(${t}px, ${e}px)`,this.callEventsByName("onAfterMove",this.element,this),this.onAfterMove&&this.onAfterMove(this.element,this)}setTranslateByPoint2D(t){this.setTranslate(t.x,t.y)}updatePosition(){this.movingState.pos=(0,i.getTransformCoordsFromElement)(this.element),this.movingState.delta.dx=0,this.movingState.delta.dy=0}resetTranslate(){this.element.style.transform=this.element.style.transform.replace(i.regexRemoveTranslateFromTransform,"")}moveToPosition(t,e){this.movingState.pos={x:t+this.movingState.delta.dx,y:e+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToPoint2D(t){this.movingState.pos={x:t.x+this.movingState.delta.dx,y:t.y+this.movingState.delta.dy},this.setTranslateByPoint2D(this.movingState.pos)}moveToTargetElement(t){const e=t.getBoundingClientRect(),n=(0,i.getTransformCoordsFromElement)(this.element),o=(0,i.getDistanceFromBorder)(this.element,t),s=n.x+o.right,r=n.y+o.bottom;this.setTranslateByPoint2D({x:Math.round(s-e.width),y:Math.round(r-e.height)})}moveToCenterOfTargetElement(t){const e=t.getBoundingClientRect(),n=(0,i.getTransformCoordsFromElement)(this.element),o=(0,i.getDistanceFromBorder)(this.element,t),s=n.x+o.right,r=n.y+o.bottom;this.setTranslateByPoint2D({x:Math.round(s-e.width/2),y:Math.round(r-e.height/2)})}static makeElementMovable(t){return new s({element:t})}}},7930:(t,e,n)=>{n.d(e,{ObjectEventListener:()=>o});class o{eventsByName=new Map;addEventListener(t,e){const n={id:crypto.randomUUID(),event:e};return this.eventsByName.has(t.toLowerCase())?(this.eventsByName.get(t.toLowerCase()).push(n),n.id):(this.eventsByName.set(t.toLowerCase(),[n]),n.id)}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}removeEventById(t){this.eventsByName.forEach(((e,n)=>{this.eventsByName.set(n,e.filter((e=>e.id!==t)))}))}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t.event(...e)))}}},1319:(t,e,n)=>{n.d(e,{clickEventToCoordinates:()=>y,getDistanceFromBorder:()=>c,getTransformCoordsFromElement:()=>u,regexRemoveTranslateFromTransform:()=>i});var o=n(739);const i=/translate\([^)]*\)/g,s=/rotate\((-?\d+\.?\d*)deg\)/,r=/rotateX\((-?\d+\.?\d*)deg\)/,a=/rotateY\((-?\d+\.?\d*)deg\)/,l=/rotateZ\((-?\d+\.?\d*)deg\)/,h=new Map,d=new Map,g=new Map;function m(t){const e=t.getBoundingClientRect(),n=e.left+e.width/2,o=e.top+e.height/2,i=function(){const t=function(t){switch(t){case"x":return r;case"y":return a;case"z":return l;default:return s}}(v(document.body)).exec(document.body.style.transform);return t?parseFloat(t[1]):0}(),h=Math.PI/180*i,d=Math.cos(h),g=Math.sin(h),m=n+(e.left-n)*d-(e.top-o)*g,c=o+(e.left-n)*g+(e.top-o)*d,u=n+(e.right-n)*d-(e.bottom-o)*g,y=o+(e.right-n)*g+(e.bottom-o)*d,f=Math.min(m,u),p=Math.min(c,y),b=Math.max(c,y),x=Math.max(m,u);return{x:f,y:p,width:e.width,height:e.height,toJSON:e.toJSON,left:f,top:p,bottom:b,right:x}}function c(t,e,n=!1){const o=n?m(t):t.getBoundingClientRect(),i=n?m(e):e.getBoundingClientRect(),s=o.left+o.width/2,r=o.top+o.height/2;return{top:r-i.top,right:i.right-s,bottom:i.bottom-r,left:s-i.left}}function v(t){const e=t.style.transform.toLowerCase();return e.includes("x")?"x":e.includes("y")?"y":"z"}function u(t,e=!1){const n=(window.getComputedStyle(t).transform.match(o.regexNumberPattern)??[0,0]).map((t=>+t));let i={x:void 0!==n[4]?Math.round(n[4]):0,y:void 0!==n[5]?Math.round(n[5]):0};if(e){const e=function(t,e="x"){let n;switch(e){case"x":n=r;break;case"y":n=a;break;case"z":n=l;break;default:n=s}const o=n.exec(t.style.transform);return o?parseFloat(o[1]):0}(document.body,v(t))||0;return(0,o.rotateCoordinates)(i.x,i.y,e)}return i}function y(t){if(t instanceof MouseEvent)return{x:t.clientX,y:t.clientY};if(t instanceof TouchEvent){const e=t.changedTouches[0];return{x:e.clientX,y:e.clientY}}throw"Event not Found"}new Map,window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of h)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of d)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of g)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},739:(t,e,n)=>{n.d(e,{regexNumberPattern:()=>o,rotateCoordinates:()=>i});const o=/-?\d+\.?\d*/g;function i(t,e,n){const o=Math.PI/180*n;return{x:t*Math.cos(o)-e*Math.sin(o),y:t*Math.sin(o)+e*Math.cos(o)}}}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var s=e[o]={exports:{}};return t[o](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{n.r(o),n.d(o,{DraggableElement:()=>i});var t=n(1319),e=n(8586);class i extends e.MovableElement{allowDraggingByInnerContent;draggingState;lastStartPoint;onDrop;onDrag;_enabled=!0;constructor(t){if(!t.element)throw new Error("Null draggable element. Please pass a valid element in constructor.");super(t),this.allowDraggingByInnerContent=!t.allowDraggingByInnerContent||t.allowDraggingByInnerContent,this.draggingState={dragging:!1},this.onDrag=t.onDrag,this.onDrop=t.onDrop,this.element.addEventListener("pointerdown",this.start.bind(this)),this.element.addEventListener("pointerup",this.end.bind(this)),this.element.addEventListener("pointercancel",this.end.bind(this)),this.element.addEventListener("pointermove",this.move.bind(this)),this.element.addEventListener("touchstart",(t=>t.preventDefault())),this.element.addEventListener("dragstart",(t=>t.preventDefault())),this.intervalUpdatePosition=setInterval(this.updatePosition.bind(this),100)}get enabled(){return this._enabled}set enabled(t){this._enabled=t}set dragging(t){this.enabled&&(this.draggingState.dragging=t,this.dragging?this.element.classList.add("dragging"):this.element.classList.remove("dragging"))}get dragging(){return this.draggingState.dragging}start(e){if(!this.enabled)return;const n=e instanceof MouseEvent,o=n&&0===e.button,i=e instanceof PointerEvent;if(n&&!o)return;if(!this.allowDraggingByInnerContent&&e.target!==this.element)return;this.callEventsByName("onDrag",this.element,this),this.onDrag&&this.onDrag(this.element,this),this.dragging=!0,e.stopPropagation();let{x:s,y:r}=(0,t.clickEventToCoordinates)(e);this.lastStartPoint={x:s,y:r},this.movingState.delta={dx:this.movingState.pos.x-s,dy:this.movingState.pos.y-r},i&&(this.draggingState.pointerId=e.pointerId,this.element.setPointerCapture(e.pointerId)),this.element.style.userSelect="none"}end(){this.dragging=!1,this.element.style.userSelect="",this.callEventsByName("onDrop",this.element,this),this.onDrop&&this.onDrop(this.element,this)}updatePosition(){this.dragging||super.updatePosition()}move(e){if(!this.enabled)return;const n=e instanceof PointerEvent;if(!this.dragging)return;if(!this.allowDraggingByInnerContent&&!(e.target===this.element||n&&this.draggingState.pointerId===e.pointerId))return;e.stopPropagation();let{x:o,y:i}=(0,t.clickEventToCoordinates)(e);super.moveToPosition(o,i)}static makeElementDraggable(t){return new i({element:t})}static makeElementDraggableByQuerySelector(t){const e=document.querySelector(t);return e?new i({element:e}):null}}})(),DraggableElement=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
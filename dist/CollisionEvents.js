var CollisionEvents;(()=>{"use strict";var e={6033:(e,t,s)=>{s.d(t,{BorderDistanceExtras:()=>o});class o{collisionBorderDistances;constructor(e){this.collisionBorderDistances=e}anyGreaterThan(e){return this.collisionBorderDistances.top>e||this.collisionBorderDistances.right>e||this.collisionBorderDistances.bottom>e||this.collisionBorderDistances.left>e}anyLowerThan(e){return this.collisionBorderDistances.top<e||this.collisionBorderDistances.right<e||this.collisionBorderDistances.bottom<e||this.collisionBorderDistances.left<e}anyEquals(e){return this.collisionBorderDistances.top===e||this.collisionBorderDistances.right===e||this.collisionBorderDistances.bottom===e||this.collisionBorderDistances.left===e}}},7930:(e,t,s)=>{s.d(t,{ObjectEventListener:()=>o});class o{eventsByName=new Map;addEventListener(e,t){const s={id:crypto.randomUUID(),event:t};return this.eventsByName.has(e.toLowerCase())?(this.eventsByName.get(e.toLowerCase()).push(s),s.id):(this.eventsByName.set(e.toLowerCase(),[s]),s.id)}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}removeEventById(e){this.eventsByName.forEach(((t,s)=>{this.eventsByName.set(s,t.filter((t=>t.id!==e)))}))}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e.event(...t)))}}}},t={};function s(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,s),i.exports}s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{s.r(o),s.d(o,{CollisionEvent:()=>r});var e=s(7930),t=s(6033);class r extends e.ObjectEventListener{enabled=!0;isValidTargetToTriggerEvent(e,s,o){return!!this.enabled&&(!(this.checkTargetClass&&!e.classList.contains(s))&&(!o||!new t.BorderDistanceExtras(o.distanceFromBorder).anyLowerThan(o.distanceThreshold)))}}})(),CollisionEvents=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQ2hGLFFBQU03RCxLQUFLeUQsWUFJTnpELEtBQUs4RCxtQkFBcUJILEVBQWNJLFVBQVVDLFNBQVVKLE9BSTVEQyxJQUVtQyxJQUFJLEVBQUFqRSxxQkFBc0JpRSxFQUFpQkksb0JBQzlDMUQsYUFBY3NELEVBQWlCSyxvQkFNdEUsRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9FeHRyYXMvQ29sbGlzaW9uRXZlbnRzL0JvcmRlckRpc3RhbmNlRXh0cmFzLnRzIiwid2VicGFjazovLy8uL3NyYy9FeHRyYXMvT2JqZWN0RXZlbnRMaXN0ZW5lci50cyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9zcmMvRXh0cmFzL0NvbGxpc2lvbkV2ZW50cy9Db2xsaXNpb25FdmVudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9yZGVyRGlzdGFuY2UgfSBmcm9tICcuL1R5cGVzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCb3JkZXJEaXN0YW5jZUV4dHJhcyB7XHJcbiAgY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzOiBCb3JkZXJEaXN0YW5jZTtcclxuXHJcbiAgY29uc3RydWN0b3IoIGNvbGxpc2lvbkJvcmRlckRpc3RhbmNlOiBCb3JkZXJEaXN0YW5jZSApIHtcclxuICAgIHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzID0gY29sbGlzaW9uQm9yZGVyRGlzdGFuY2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYW55R3JlYXRlclRoYW4oIG51bTogbnVtYmVyICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLnRvcCA+IG51bVxyXG4gICAgICB8fCB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy5yaWdodCA+IG51bVxyXG4gICAgICB8fCB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy5ib3R0b20gPiBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMubGVmdCA+IG51bTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhbnlMb3dlclRoYW4oIG51bTogbnVtYmVyICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLnRvcCA8IG51bVxyXG4gICAgICB8fCB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy5yaWdodCA8IG51bVxyXG4gICAgICB8fCB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy5ib3R0b20gPCBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMubGVmdCA8IG51bTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhbnlFcXVhbHMoIG51bTogbnVtYmVyICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLnRvcCA9PT0gbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLnJpZ2h0ID09PSBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMuYm90dG9tID09PSBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMubGVmdCA9PT0gbnVtO1xyXG4gIH1cclxufVxyXG5cclxuIiwiZXhwb3J0IHR5cGUgRXZlbnRMaXN0ZW5lciA9IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGV2ZW50OiBGdW5jdGlvbjtcclxufTtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RXZlbnRMaXN0ZW5lciB7XHJcbiAgcHVibGljIGV2ZW50c0J5TmFtZTogTWFwPHN0cmluZywgRXZlbnRMaXN0ZW5lcltdPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXIoIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudDogRnVuY3Rpb24gKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG5ld0V2ZW50OiBFdmVudExpc3RlbmVyID0ge1xyXG4gICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcclxuICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoICF0aGlzLmV2ZW50c0J5TmFtZS5oYXMoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkgKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRzQnlOYW1lLnNldCggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCksIFtuZXdFdmVudF0gKTtcclxuICAgICAgcmV0dXJuIG5ld0V2ZW50LmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZXZlbnRzQnlOYW1lLmdldCggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCkgKSEucHVzaCggbmV3RXZlbnQgKTtcclxuXHJcbiAgICByZXR1cm4gbmV3RXZlbnQuaWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RXZlbnRzQnlOYW1lKCBldmVudE5hbWU6IHN0cmluZyApOiBFdmVudExpc3RlbmVyW10ge1xyXG4gICAgaWYgKCAhdGhpcy5ldmVudHNCeU5hbWUuaGFzKCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSApICkge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpLCBbXSApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmV2ZW50c0J5TmFtZS5nZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkhO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZUV2ZW50QnlJZCggZXZlbnRJZDogc3RyaW5nICkge1xyXG4gICAgdGhpcy5ldmVudHNCeU5hbWUuZm9yRWFjaCggKCB2YWx1ZSwga2V5ICkgPT4ge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGtleSwgdmFsdWUuZmlsdGVyKCBlID0+IGUuaWQgIT09IGV2ZW50SWQgKSApO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNhbGxFdmVudHNCeU5hbWUoIGV2ZW50TmFtZTogc3RyaW5nLCAuLi5ldmVudEFyZ3M6IGFueVtdICk6IHZvaWQge1xyXG4gICAgdGhpcy5nZXRFdmVudHNCeU5hbWUoIGV2ZW50TmFtZSApLmZvckVhY2goIGUgPT4gZS5ldmVudCggLi4uZXZlbnRBcmdzICkgKTtcclxuICB9XHJcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IE9iamVjdEV2ZW50TGlzdGVuZXIgfSBmcm9tICcuLi9PYmplY3RFdmVudExpc3RlbmVyJztcclxuaW1wb3J0IHsgQm9yZGVyRGlzdGFuY2VFeHRyYXMgfSBmcm9tICcuL0JvcmRlckRpc3RhbmNlRXh0cmFzJztcclxuaW1wb3J0IHsgUGluQ29sbGlzaW9uRXZlbnQsIFBpblBvc2l0aW9uRm9ybXVsYSB9IGZyb20gJy4vUGluQ29sbGlzaW9uRXZlbnQnO1xyXG5pbXBvcnQgeyBTaGFyZUF0dHJpYnV0ZUNvbGxpc2lvbkV2ZW50IH0gZnJvbSAnLi9TaGFyZUF0dHJpYnV0ZUNvbGxpc2lvbkV2ZW50JztcclxuaW1wb3J0IHsgQm9yZGVyRGlzdGFuY2UsIENvbGxpc2lvbkRpcmVjdGlvbkNoZWNrLCBJQ29sbGlzaW9uRXZlbnQgfSBmcm9tICcuL1R5cGVzJztcclxuXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29sbGlzaW9uRXZlbnQgZXh0ZW5kcyBPYmplY3RFdmVudExpc3RlbmVyIGltcGxlbWVudHMgSUNvbGxpc2lvbkV2ZW50IHtcclxuICBhYnN0cmFjdCB0YXJnZXRDbGFzczogc3RyaW5nO1xyXG4gIGFic3RyYWN0IGNoZWNrVGFyZ2V0Q2xhc3M6IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyBlbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgaXNWYWxpZFRhcmdldFRvVHJpZ2dlckV2ZW50KCBjdXJyZW50VGFyZ2V0OiBIVE1MRWxlbWVudCwgdGFyZ2V0Q2xhc3NOYW1lOiBzdHJpbmcsIHZhbGlkYXRlRGlzdGFuY2U/OiB7IGRpc3RhbmNlVGhyZXNob2xkOiBudW1iZXIsIGRpc3RhbmNlRnJvbUJvcmRlcjogQm9yZGVyRGlzdGFuY2UgfSApOiBib29sZWFuIHtcclxuICAgIGlmICggIXRoaXMuZW5hYmxlZCApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggdGhpcy5jaGVja1RhcmdldENsYXNzICYmICFjdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyggdGFyZ2V0Q2xhc3NOYW1lICkgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIHZhbGlkYXRlRGlzdGFuY2UgKSB7XHJcbiAgICAgIC8vLyBDaGVja3MgaG93IG1hbnkgcGl4ZWxzIHRoZSBkcmFnZ2FibGUgaXMgaW5zaWRlIGZyb20gZWFjaCBib3JkZXI7IGlmIHRoZSBlbGVtZW50IGlzIG92ZXIgdGhlIHRocmVzaG9sZCB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gdHJ1ZTtcclxuICAgICAgY29uc3QgY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VFeHRyYXMgPSBuZXcgQm9yZGVyRGlzdGFuY2VFeHRyYXMoIHZhbGlkYXRlRGlzdGFuY2UuZGlzdGFuY2VGcm9tQm9yZGVyICk7XHJcbiAgICAgIGlmICggY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VFeHRyYXMuYW55TG93ZXJUaGFuKCB2YWxpZGF0ZURpc3RhbmNlLmRpc3RhbmNlVGhyZXNob2xkICkgKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBhYnN0cmFjdCBvbkNvbGxpZGluZyggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgY29sbGlkaW5nQXQ6IENvbGxpc2lvbkRpcmVjdGlvbkNoZWNrLCBkaXN0YW5jZUZyb21Cb3JkZXI6IEJvcmRlckRpc3RhbmNlICk6IFByb21pc2U8dm9pZD47XHJcbiAgYWJzdHJhY3Qgb25Ob3RDb2xsaWRpbmcoIGRyYWdnYWJsZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQgKTogUHJvbWlzZTx2b2lkPjtcclxufVxyXG4iXSwibmFtZXMiOlsiQm9yZGVyRGlzdGFuY2VFeHRyYXMiLCJjb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMiLCJjb25zdHJ1Y3RvciIsImNvbGxpc2lvbkJvcmRlckRpc3RhbmNlIiwidGhpcyIsImFueUdyZWF0ZXJUaGFuIiwibnVtIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiYW55TG93ZXJUaGFuIiwiYW55RXF1YWxzIiwiT2JqZWN0RXZlbnRMaXN0ZW5lciIsImV2ZW50c0J5TmFtZSIsIk1hcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudE5hbWUiLCJldmVudCIsIm5ld0V2ZW50IiwiaWQiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiaGFzIiwidG9Mb3dlckNhc2UiLCJnZXQiLCJwdXNoIiwic2V0IiwiZ2V0RXZlbnRzQnlOYW1lIiwicmVtb3ZlRXZlbnRCeUlkIiwiZXZlbnRJZCIsImZvckVhY2giLCJ2YWx1ZSIsImtleSIsImZpbHRlciIsImUiLCJjYWxsRXZlbnRzQnlOYW1lIiwiZXZlbnRBcmdzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiQ29sbGlzaW9uRXZlbnQiLCJlbmFibGVkIiwiaXNWYWxpZFRhcmdldFRvVHJpZ2dlckV2ZW50IiwiY3VycmVudFRhcmdldCIsInRhcmdldENsYXNzTmFtZSIsInZhbGlkYXRlRGlzdGFuY2UiLCJjaGVja1RhcmdldENsYXNzIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJkaXN0YW5jZUZyb21Cb3JkZXIiLCJkaXN0YW5jZVRocmVzaG9sZCJdLCJzb3VyY2VSb290IjoiIn0=
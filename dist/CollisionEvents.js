var CollisionEvents;(()=>{"use strict";var e={33:(e,t,s)=>{s.d(t,{BorderDistanceExtras:()=>o});class o{collisionBorderDistances;constructor(e){this.collisionBorderDistances=e}anyGreaterThan(e){return this.collisionBorderDistances.top>e||this.collisionBorderDistances.right>e||this.collisionBorderDistances.bottom>e||this.collisionBorderDistances.left>e}anyLowerThan(e){return this.collisionBorderDistances.top<e||this.collisionBorderDistances.right<e||this.collisionBorderDistances.bottom<e||this.collisionBorderDistances.left<e}anyEquals(e){return this.collisionBorderDistances.top===e||this.collisionBorderDistances.right===e||this.collisionBorderDistances.bottom===e||this.collisionBorderDistances.left===e}}},930:(e,t,s)=>{s.d(t,{ObjectEventListener:()=>o});class o{eventsByName=new Map;addEventListener(e,t){this.eventsByName.has(e.toLowerCase())?this.eventsByName.get(e.toLowerCase()).push(t):this.eventsByName.set(e.toLowerCase(),[t])}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e(...t)))}}}},t={};function s(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,s),i.exports}s.d=(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{s.r(o),s.d(o,{CollisionEvent:()=>r});var e=s(930),t=s(33);class r extends e.ObjectEventListener{enabled=!0;isValidTargetToTriggerEvent(e,s,o){return!!this.enabled&&(!(this.checkTargetClass&&!e.classList.contains(s))&&(!o||!new t.BorderDistanceExtras(o.distanceFromBorder).anyLowerThan(o.distanceThreshold)))}}})(),CollisionEvents=o})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGlzaW9uRXZlbnRzLmpzIiwibWFwcGluZ3MiOiIrRkFFTyxNQUFNQSxFQUNYQyx5QkFFQSxXQUFBQyxDQUFhQyxHQUNYQyxLQUFLSCx5QkFBMkJFLENBQ2xDLENBRU8sY0FBQUUsQ0FBZ0JDLEdBQ3JCLE9BQU9GLEtBQUtILHlCQUF5Qk0sSUFBTUQsR0FDdENGLEtBQUtILHlCQUF5Qk8sTUFBUUYsR0FDdENGLEtBQUtILHlCQUF5QlEsT0FBU0gsR0FDdkNGLEtBQUtILHlCQUF5QlMsS0FBT0osQ0FDNUMsQ0FFTyxZQUFBSyxDQUFjTCxHQUNuQixPQUFPRixLQUFLSCx5QkFBeUJNLElBQU1ELEdBQ3RDRixLQUFLSCx5QkFBeUJPLE1BQVFGLEdBQ3RDRixLQUFLSCx5QkFBeUJRLE9BQVNILEdBQ3ZDRixLQUFLSCx5QkFBeUJTLEtBQU9KLENBQzVDLENBRU8sU0FBQU0sQ0FBV04sR0FDaEIsT0FBT0YsS0FBS0gseUJBQXlCTSxNQUFRRCxHQUN4Q0YsS0FBS0gseUJBQXlCTyxRQUFVRixHQUN4Q0YsS0FBS0gseUJBQXlCUSxTQUFXSCxHQUN6Q0YsS0FBS0gseUJBQXlCUyxPQUFTSixDQUM5QyxFLG1EQzNCSyxNQUFNTyxFQUNKQyxhQUF3QyxJQUFJQyxJQUU1QyxnQkFBQUMsQ0FBa0JDLEVBQW1CQyxHQUNwQ2QsS0FBS1UsYUFBYUssSUFBS0YsRUFBVUcsZUFLdkNoQixLQUFLVSxhQUFhTyxJQUFLSixFQUFVRyxlQUFpQkUsS0FBTUosR0FKdERkLEtBQUtVLGFBQWFTLElBQUtOLEVBQVVHLGNBQWUsQ0FBQ0YsR0FLckQsQ0FFTyxlQUFBTSxDQUFpQlAsR0FLdEIsT0FKTWIsS0FBS1UsYUFBYUssSUFBS0YsRUFBVUcsZ0JBQ3JDaEIsS0FBS1UsYUFBYVMsSUFBS04sRUFBVUcsY0FBZSxJQUczQ2hCLEtBQUtVLGFBQWFPLElBQUtKLEVBQVVHLGNBQzFDLENBR08sZ0JBQUFLLENBQWtCUixLQUFzQlMsR0FDN0N0QixLQUFLb0IsZ0JBQWlCUCxHQUFZVSxTQUFTQyxHQUFLQSxLQUFNRixJQUN4RCxFLEdDdkJFRyxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFFLFFBR3JCLElBQUlDLEVBQVNOLEVBQXlCRSxHQUFZLENBR2pERyxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkwsR0FBVUksRUFBUUEsRUFBT0QsUUFBU0osR0FHL0NLLEVBQU9ELE9BQ2YsQ0NyQkFKLEVBQW9CTyxFQUFJLENBQUNILEVBQVNJLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWFIsRUFBb0JVLEVBQUVGLEVBQVlDLEtBQVNULEVBQW9CVSxFQUFFTixFQUFTSyxJQUM1RUUsT0FBT0MsZUFBZVIsRUFBU0ssRUFBSyxDQUFFSSxZQUFZLEVBQU10QixJQUFLaUIsRUFBV0MsSUFFMUUsRUNORFQsRUFBb0JVLEVBQUksQ0FBQ0ksRUFBS0MsSUFBVUosT0FBT0ssVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsR0NDbEZmLEVBQW9CbUIsRUFBS2YsSUFDSCxvQkFBWGdCLFFBQTBCQSxPQUFPQyxhQUMxQ1YsT0FBT0MsZUFBZVIsRUFBU2dCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFgsT0FBT0MsZUFBZVIsRUFBUyxhQUFjLENBQUVrQixPQUFPLEdBQU8sRSx5RUNFdkQsTUFBZUMsVUFBdUIsRUFBQXhDLG9CQUlwQ3lDLFNBQW1CLEVBRTFCLDJCQUFBQyxDQUE2QkMsRUFBNEJDLEVBQXlCQyxHQUNoRixRQUFNdEQsS0FBS2tELFlBSU5sRCxLQUFLdUQsbUJBQXFCSCxFQUFjSSxVQUFVQyxTQUFVSixPQUk1REMsSUFFbUMsSUFBSSxFQUFBMUQscUJBQXNCMEQsRUFBaUJJLG9CQUM5Q25ELGFBQWMrQyxFQUFpQkssb0JBTXRFLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvRXh0cmFzL0NvbGxpc2lvbkV2ZW50cy9Cb3JkZXJEaXN0YW5jZUV4dHJhcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRXh0cmFzL09iamVjdEV2ZW50TGlzdGVuZXIudHMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V4dHJhcy9Db2xsaXNpb25FdmVudHMvQ29sbGlzaW9uRXZlbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvcmRlckRpc3RhbmNlIH0gZnJvbSAnLi9UeXBlcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQm9yZGVyRGlzdGFuY2VFeHRyYXMge1xyXG4gIGNvbGxpc2lvbkJvcmRlckRpc3RhbmNlczogQm9yZGVyRGlzdGFuY2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCBjb2xsaXNpb25Cb3JkZXJEaXN0YW5jZTogQm9yZGVyRGlzdGFuY2UgKSB7XHJcbiAgICB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcyA9IGNvbGxpc2lvbkJvcmRlckRpc3RhbmNlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFueUdyZWF0ZXJUaGFuKCBudW06IG51bWJlciApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy50b3AgPiBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMucmlnaHQgPiBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMuYm90dG9tID4gbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmxlZnQgPiBudW07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYW55TG93ZXJUaGFuKCBudW06IG51bWJlciApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy50b3AgPCBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMucmlnaHQgPCBudW1cclxuICAgICAgfHwgdGhpcy5jb2xsaXNpb25Cb3JkZXJEaXN0YW5jZXMuYm90dG9tIDwgbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmxlZnQgPCBudW07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYW55RXF1YWxzKCBudW06IG51bWJlciApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy50b3AgPT09IG51bVxyXG4gICAgICB8fCB0aGlzLmNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcy5yaWdodCA9PT0gbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmJvdHRvbSA9PT0gbnVtXHJcbiAgICAgIHx8IHRoaXMuY29sbGlzaW9uQm9yZGVyRGlzdGFuY2VzLmxlZnQgPT09IG51bTtcclxuICB9XHJcbn1cclxuXHJcbiIsIlxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RXZlbnRMaXN0ZW5lciB7XHJcbiAgcHVibGljIGV2ZW50c0J5TmFtZTogTWFwPHN0cmluZywgRnVuY3Rpb25bXT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyKCBldmVudE5hbWU6IHN0cmluZywgZXZlbnQ6IEZ1bmN0aW9uICkge1xyXG4gICAgaWYgKCAhdGhpcy5ldmVudHNCeU5hbWUuaGFzKCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSApICkge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpLCBbZXZlbnRdICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmV2ZW50c0J5TmFtZS5nZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkhLnB1c2goIGV2ZW50ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RXZlbnRzQnlOYW1lKCBldmVudE5hbWU6IHN0cmluZyApOiBGdW5jdGlvbltdIHtcclxuICAgIGlmICggIXRoaXMuZXZlbnRzQnlOYW1lLmhhcyggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCkgKSApIHtcclxuICAgICAgdGhpcy5ldmVudHNCeU5hbWUuc2V0KCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSwgW10gKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5ldmVudHNCeU5hbWUuZ2V0KCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSApITtcclxuICB9XHJcblxyXG5cclxuICBwdWJsaWMgY2FsbEV2ZW50c0J5TmFtZSggZXZlbnROYW1lOiBzdHJpbmcsIC4uLmV2ZW50QXJnczogYW55W10gKTogdm9pZCB7XHJcbiAgICB0aGlzLmdldEV2ZW50c0J5TmFtZSggZXZlbnROYW1lICkuZm9yRWFjaCggZSA9PiBlKCAuLi5ldmVudEFyZ3MgKSApO1xyXG4gIH1cclxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgT2JqZWN0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uL09iamVjdEV2ZW50TGlzdGVuZXInO1xyXG5pbXBvcnQgeyBCb3JkZXJEaXN0YW5jZUV4dHJhcyB9IGZyb20gJy4vQm9yZGVyRGlzdGFuY2VFeHRyYXMnO1xyXG5pbXBvcnQgeyBQaW5Db2xsaXNpb25FdmVudCwgUGluUG9zaXRpb25Gb3JtdWxhIH0gZnJvbSAnLi9QaW5Db2xsaXNpb25FdmVudCc7XHJcbmltcG9ydCB7IFNoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnQgfSBmcm9tICcuL1NoYXJlQXR0cmlidXRlQ29sbGlzaW9uRXZlbnQnO1xyXG5pbXBvcnQgeyBCb3JkZXJEaXN0YW5jZSwgQ29sbGlzaW9uRGlyZWN0aW9uQ2hlY2ssIElDb2xsaXNpb25FdmVudCB9IGZyb20gJy4vVHlwZXMnO1xyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb2xsaXNpb25FdmVudCBleHRlbmRzIE9iamVjdEV2ZW50TGlzdGVuZXIgaW1wbGVtZW50cyBJQ29sbGlzaW9uRXZlbnQge1xyXG4gIGFic3RyYWN0IHRhcmdldENsYXNzOiBzdHJpbmc7XHJcbiAgYWJzdHJhY3QgY2hlY2tUYXJnZXRDbGFzczogYm9vbGVhbjtcclxuXHJcbiAgcHVibGljIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICBpc1ZhbGlkVGFyZ2V0VG9UcmlnZ2VyRXZlbnQoIGN1cnJlbnRUYXJnZXQ6IEhUTUxFbGVtZW50LCB0YXJnZXRDbGFzc05hbWU6IHN0cmluZywgdmFsaWRhdGVEaXN0YW5jZT86IHsgZGlzdGFuY2VUaHJlc2hvbGQ6IG51bWJlciwgZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSB9ICk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCAhdGhpcy5lbmFibGVkICkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCB0aGlzLmNoZWNrVGFyZ2V0Q2xhc3MgJiYgIWN1cnJlbnRUYXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCB0YXJnZXRDbGFzc05hbWUgKSApIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggdmFsaWRhdGVEaXN0YW5jZSApIHtcclxuICAgICAgLy8vIENoZWNrcyBob3cgbWFueSBwaXhlbHMgdGhlIGRyYWdnYWJsZSBpcyBpbnNpZGUgZnJvbSBlYWNoIGJvcmRlcjsgaWYgdGhlIGVsZW1lbnQgaXMgb3ZlciB0aGUgdGhyZXNob2xkIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiB0cnVlO1xyXG4gICAgICBjb25zdCBjb2xsaXNpb25Cb3JkZXJEaXN0YW5jZUV4dHJhcyA9IG5ldyBCb3JkZXJEaXN0YW5jZUV4dHJhcyggdmFsaWRhdGVEaXN0YW5jZS5kaXN0YW5jZUZyb21Cb3JkZXIgKTtcclxuICAgICAgaWYgKCBjb2xsaXNpb25Cb3JkZXJEaXN0YW5jZUV4dHJhcy5hbnlMb3dlclRoYW4oIHZhbGlkYXRlRGlzdGFuY2UuZGlzdGFuY2VUaHJlc2hvbGQgKSApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGFic3RyYWN0IG9uQ29sbGlkaW5nKCBkcmFnZ2FibGU6IEhUTUxFbGVtZW50LCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBjb2xsaWRpbmdBdDogQ29sbGlzaW9uRGlyZWN0aW9uQ2hlY2ssIGRpc3RhbmNlRnJvbUJvcmRlcjogQm9yZGVyRGlzdGFuY2UgKTogUHJvbWlzZTx2b2lkPjtcclxuICBhYnN0cmFjdCBvbk5vdENvbGxpZGluZyggZHJhZ2dhYmxlOiBIVE1MRWxlbWVudCwgdGFyZ2V0OiBIVE1MRWxlbWVudCApOiBQcm9taXNlPHZvaWQ+O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJCb3JkZXJEaXN0YW5jZUV4dHJhcyIsImNvbGxpc2lvbkJvcmRlckRpc3RhbmNlcyIsImNvbnN0cnVjdG9yIiwiY29sbGlzaW9uQm9yZGVyRGlzdGFuY2UiLCJ0aGlzIiwiYW55R3JlYXRlclRoYW4iLCJudW0iLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJhbnlMb3dlclRoYW4iLCJhbnlFcXVhbHMiLCJPYmplY3RFdmVudExpc3RlbmVyIiwiZXZlbnRzQnlOYW1lIiwiTWFwIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsImV2ZW50IiwiaGFzIiwidG9Mb3dlckNhc2UiLCJnZXQiLCJwdXNoIiwic2V0IiwiZ2V0RXZlbnRzQnlOYW1lIiwiY2FsbEV2ZW50c0J5TmFtZSIsImV2ZW50QXJncyIsImZvckVhY2giLCJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJDb2xsaXNpb25FdmVudCIsImVuYWJsZWQiLCJpc1ZhbGlkVGFyZ2V0VG9UcmlnZ2VyRXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwidGFyZ2V0Q2xhc3NOYW1lIiwidmFsaWRhdGVEaXN0YW5jZSIsImNoZWNrVGFyZ2V0Q2xhc3MiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImRpc3RhbmNlRnJvbUJvcmRlciIsImRpc3RhbmNlVGhyZXNob2xkIl0sInNvdXJjZVJvb3QiOiIifQ==
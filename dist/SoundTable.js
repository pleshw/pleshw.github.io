var SoundTable;(()=>{"use strict";var e={173:(e,t,i)=>{i.d(t,{AudioComponent:()=>a});var n=i(7930),s=i(1319),r=i(6555);class a extends n.ObjectEventListener{src;audioElement;_container;_blockInteraction=!1;_divBlockInteraction;constructor(e){super(),this.src=e.src,this._container=e.container,this.audioElement=e.audioElement,this._blockInteraction=!!e.blockInteraction,e.audioElementId&&(this.audioElement.id=e.audioElementId),this.audioElement.classList.add("audio-component"),this._container.id||(this._container.id=e.audioElementId+"AudioComponentContainer"),this._container.classList.add("audio-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction()}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.audioElement.paused}get fileName(){return this.audioElement.src||this.audioElement.querySelector("source")?.src||""}get currentTime(){return this.audioElement.currentTime}set currentTime(e){this.audioElement.currentTime=e}playWithoutTriggerEvents(){var e=this.audioElement.play();return void 0!==e&&e.then((e=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.audioElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("audio-component-playing"),this._divBlockInteraction.classList.add("audio-component-playing"),this._container.classList.remove("audio-component-paused"),this._divBlockInteraction.classList.remove("audio-component-paused")}setClassesPaused(){this._container.classList.add("audio-component-paused"),this._divBlockInteraction.classList.add("audio-component-paused"),this._container.classList.remove("audio-component-playing"),this._divBlockInteraction.classList.remove("audio-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.audioElement.currentTime=0,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.audioElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.audioElement.volume=1,this.callEventsByName("onunmute",this),this}seek(e,t){return this.currentTime=e,this.callEventsByName("onseek",this),this}get dimensions(){return(0,s.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(e){const t=(0,s.createInvisibleDivAboveParent)({parentElement:e._container,id:`invisibleDivBlockInteraction${e._container.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("audio-component-div-block-interaction"),t}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createAudioComponentOnBody(e){const t=await new r.AudioComponentFactory(e.src).buildOnBody();return new a({src:e.src,container:t,audioElement:t.querySelector("audio"),audioElementId:e.audioElementId,blockInteraction:e.blockInteraction})}static async createAudioComponent(e){if(e.container===document.body||!e.container)return this.createAudioComponentOnBody(e);const t=await new r.AudioComponentFactory(e.src).build(e.container);return new a({src:e.src,container:t,audioElement:t.querySelector("audio"),audioElementId:e.audioElementId,blockInteraction:e.blockInteraction})}}},6555:(e,t,i)=>{i.d(t,{AudioComponentFactory:()=>r});var n=i(7353),s=i(6401);class r extends s.ComponentContainer{constructor(e,t){super("audioComponent",(0,n.createInvisiblePlayer)([e],t))}async buildSubComponents(e){}}},6401:(e,t,i)=>{i.d(t,{ComponentContainer:()=>n});class n{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(e,t){if("string"==typeof t){const e=document.getElementById(t);if(!e)throw new Error("Invalid template for scene component. Template id: "+t);this.templateElement=e}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(t),document.body.appendChild(this.templateElement);this.componentName=e}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(e,t){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let i=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,i+1),await e.build(t,`${this.componentName}${e.componentName.capitalizeFirstLetter()}${i}`)}async buildOnBody(e){this._element=document.createElement("div"),e&&(this._element.id=e);for(let e of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",e);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${e}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(e,t){for(let t of this.getTemplateCloneNodes())e.insertAdjacentElement("afterbegin",t);return await this.buildSubComponents(e),e}}},9126:(e,t,i)=>{function n(e){return`\n  <div id="${e}SoundTableItem" class="sound-table-item-container">\n  </div>\n  `.trim()}i.d(t,{templateSoundTableItemContainer:()=>n})},2152:(e,t,i)=>{function n(e){return`\n  <div id="${e}">\n  </div>\n  `.trim()}i.d(t,{templateBackgroundYoutubeIframeElement:()=>n})},5102:(e,t,i)=>{i.d(t,{YoutubeIframe:()=>o});var n=i(1319),s=(i(4763),i(739)),r=i(2152),a=(i(4785),i(3362),i(7930));class o extends a.ObjectEventListener{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;invisibleDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new a.ObjectEventListener;constructor(e){if(o._dictYoutubeIframeById.has(e.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=e.iframeId,this._startsAt=e.startsAt??0,this.videoId=e.videoId,this._startMuted=!!e.startMuted,this._blockInteraction=!!e.blockInteraction,this._iframeContainer=o.getYoutubeIframeElement({iframeId:e.iframeId,classList:e.classList}),this._iframeParentElement=o.setupParentFromYoutubeIframe({parentElement:e.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=e.dimensions??(0,n.getElementDimensions)(this._iframeParentElement),o._dictYoutubeIframeById.set(e.iframeId,this),this.getVideoInfo().then((e=>{this.videoName=e&&e.title?e.title:"",this.channelName=e&&e.author_name?e.author_name:"",this.videoThumb=e&&e.thumbnail_url?e.thumbnail_url:"",this.channelURL=e&&e.author_url?e.author_url:""}))}async getVideoInfo(){const e=await(0,n.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));if(!e.error)return await e.data().json();console.error(e.error)}onPlayerReady(e){this._startMuted&&this.player.mute(),o._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),o.checkIfEveryIframeIsReady()}onPlayerStateChange(e){this._isPlaying=e.data===o._youtubeAPIReference.PlayerState.PLAYING,this._isPlaying?(this.setClassesIframePlaying(),this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this)),5)):this._playingObserverInterval&&(this.setClassesIframePaused(),clearInterval(this._playingObserverInterval),this._playingObserverInterval=null),this.callEventsByName("onplayerstatechange",this._isPlaying,this)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(e){this.seek(e)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,s.clamp)(this._startsAt,0,this._startsAt)}set startsAt(e){this._startsAt=(0,s.clamp)(e,0,e)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(e,t=!1,i=!1){return this.callEventsByName("onseek",e,t,i,this),e+=i?this._startsAt:0,this.player.seekTo(e,t),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...o._dictYoutubeIframeById.keys()].some((e=>!this._arrYoutubeIframeIdReady.includes(e)))||(this.arrObjectToSetOnEveryIframeReady.forEach((e=>e.setup(o._dictYoutubeIframeById))),o._dictYoutubeIframeById.forEach(((e,t)=>{e.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:e,classList:t}){const i=document.createElement("div");return i.classList.add("yt-iframe-container"),t&&i.classList.add(...t),i.id=`containerYoutubeIframe${e}`,i.insertAdjacentHTML("afterbegin",(0,r.templateBackgroundYoutubeIframeElement)(e)),i}static setupParentFromYoutubeIframe({parentElement:e,iframeContainer:t}){const i=e??document.body;return i.classList.add("yt-iframe-parent"),i.insertAdjacentElement("afterbegin",t),i}setInvisibleTopDiv(e){this.invisibleDiv=e,this.invisibleDiv.style.zIndex="990"}setInvisibleDivBlockInteraction(e){this._divBlockInteraction=e,this._divBlockInteraction.setAttribute("yt-iframe-id",this.id),this._divBlockInteraction.setAttribute("yt-iframe-video-name",this.videoName),this._divBlockInteraction.setAttribute("yt-iframe-video-channel-name",this.channelName),this._divBlockInteraction.setAttribute("yt-iframe-video-thumb-url",this.videoThumb),this._divBlockInteraction.setAttribute("yt-iframe-video-channel-url",this.channelURL),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(e=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}set blockInteraction(e){this._blockInteraction=e,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new o._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;static buildIframes(){var e=document.createElement("script");e.id="ytIframeAPI",e.src="https://www.youtube.com/iframe_api";var t=document.getElementsByTagName("script")[0];t&&t.parentNode&&t.parentNode.insertBefore(e,t),(0,n.waitUntilElementExists)("#ytIframeAPI").then((()=>{(0,n.pollForVariable)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(e=>{o._youtubeAPIReference=e,o.setYoutubeIframeElements()}))}))}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((e,t)=>{e.setInvisibleTopDiv(this.getInvisibleTopDiv(e)),e.setInvisibleDivBlockInteraction(this.getInvisibleDivBlockInteraction(e)),e.initPlayer()}))}static getInvisibleTopDiv(e){return(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleTopDivHoldToDrag${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:.2*e.dimensions.height}})}static getInvisibleDivBlockInteraction(e){const t=(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleDivBlockInteraction${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("yt-div-block-interaction"),t}}},4785:(e,t,i)=>{i.d(t,{YoutubeIframe:()=>n.YoutubeIframe});var n=i(5102)},3362:(e,t,i)=>{i(5102)},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(e,t="..."){return(this.length>e?this.substring(0,e)+t:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},4763:(e,t,i)=>{i(1319),i(8586)},8586:(e,t,i)=>{i(1319)},7930:(e,t,i)=>{i.d(t,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(e,t){this.eventsByName.has(e.toLowerCase())?this.eventsByName.get(e.toLowerCase()).push(t):this.eventsByName.set(e.toLowerCase(),[t])}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e(...t)))}}},7353:(e,t,i)=>{i.d(t,{createInvisiblePlayer:()=>r}),i(2976);var n=i(1319),s=i(3164);function r(e,t){const i=(0,n.getElementFromHTML)(function(e,t){return`<audio controls ${t?function(e){return` ${e.id?'id="'+e.id+'"':""} ${e.autoPlay||e.autoplay?"autoplay":""} ${e.muted?"muted":""} ${e.loop?"loop":""} ${e.preload?'preload="'+e.preload+'"':""}`.trimEnd()}(t):""}>\n    ${e.map((e=>function(e){return`<source src="${e}" type="audio/${(0,s.getFileExtension)(e)}">`}(e))).reduce(((e,t)=>e+t),"")}\n  </audio>`}(e,t));return document.body.insertAdjacentElement("afterbegin",i),(0,n.hideElement)(i),i}i(173)},1319:(e,t,i)=>{i.d(t,{createInvisibleDivAboveParent:()=>m,getElementDimensions:()=>l,getElementFromHTML:()=>o,handlePromise:()=>a,hideElement:()=>u,pollForVariable:()=>c,waitUntilElementExists:()=>d});const n=new Map,s=new Map,r=new Map;async function a(e){try{const t=await e;return{data:()=>t,error:null}}catch(e){return console.error(e),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:e instanceof Error?e:new Error(String(e))}}}function o(e,t=!0){if(!(e=t?e.trim():e))return null;const i=document.createElement("template");i.innerHTML=e;const n=i.content.children;return 1===n.length?n[0]:Array.from(n)}function l(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height}}function c(e,t,i){const n=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(n),i(window[e]))}),100)}function d(e){return new Promise((t=>{if(document.querySelector(e))return t(document.querySelector(e));const i=new MutationObserver((n=>{document.querySelector(e)&&(i.disconnect(),t(document.querySelector(e)))}));i.observe(document.body,{childList:!0,subtree:!0})}))}function m({parentElement:e,id:t,position:i,dimensions:n}){var s=document.createElement("div");return e.style.position||(e.style.position="relative"),s.id=t,s.style.position="absolute",s.style.width=n&&n.width?n.width.toString()+"px":"100%",s.style.height=n&&n.height?n.height.toString()+"px":"100%",s.style.top=(i?.top.toString()??"0")+"px",s.style.left=(i?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",e.appendChild(s),s}function u(e){e.style.display="block",e.style.position="absolute",e.style.zIndex="-1",e.style.opacity="0",e.style.width="0px !important",e.style.height="0px !important",e.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(e=>{e.repeat||function(e){for(const t of n)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e),function(e){for(const t of s)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e)})),window.addEventListener("keyup",(e=>{for(const t of r)e.code===t[0]&&t[1].forEach((t=>t(e)))}))},3164:(e,t,i)=>{i.d(t,{getFileExtension:()=>s});var n=i(2843);function s(e){if((0,n.isNullOrEmpty)(e))return"";const t=e.split(".").pop();if(t&&t!==e)return t;const i=e.split("/").pop();return i&&i!==e?i:""}},739:(e,t,i)=>{function n(e=0,t=0,i=100){return Math.max(t,Math.min(e,i))}i.d(t,{clamp:()=>n})},2843:(e,t,i)=>{function n(e){return"string"!=typeof e||!e||""===e}i.d(t,{isNullOrEmpty:()=>n})}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{i.r(n),i.d(n,{SoundTable:()=>o});var e=i(7930),t=i(1319),s=i(173),r=i(4785),a=i(9126);class o extends e.ObjectEventListener{container;iframesClassList;containersClassList;_arrEveryComponent;_arrComponentsReady=[];_setYTIframeControllers=new Set;_mapYTIframeControllersById=new Map;constructor(e){super(),this.container=e.container,this.iframesClassList=e.iframesClassList??[],this.containersClassList=e.containersClassList??[],this._arrEveryComponent=[...e.arrMediaSrc,...e.arrVideoId],e.arrMediaSrc.forEach((t=>{this.addAudioComponent(e.container.id,t)})),e.arrVideoId.forEach((t=>{this.addIframe(`${e.container.id}IframeTableItem${t}`,t)}))}init(){this.componentsControllers.forEach((e=>{e.addEventListener("oninteractionblocked",(()=>{e.seek(0,!0),e.playWithoutTriggerEvents()}))})),r.YoutubeIframe.buildIframes()}get everyComponentReady(){return this._arrEveryComponent.length===this._arrComponentsReady.length}get componentsControllers(){return Array.from(this._setYTIframeControllers)}getElementMediaContainer(e){const i=(0,t.getElementFromHTML)((0,a.templateSoundTableItemContainer)(e));return i.classList.add(...this.containersClassList),i}addAudioComponent(e,t){const i=this.getElementMediaContainer(e);this.container.insertAdjacentElement("beforeend",i),s.AudioComponent.createAudioComponent({src:t,audioElementId:`${e}IframeTableItem${t}`,blockInteraction:!0,container:i}).then((t=>{this._setYTIframeControllers.add(t),this._mapYTIframeControllersById.set(e,t),this._arrComponentsReady.push(e),this.everyComponentReady&&this.init()}))}addIframe(e,t){if(this._mapYTIframeControllersById.has(e))throw new Error("A Iframe with this id already exists: "+e);const i=this.getElementMediaContainer(e);this.container.insertAdjacentElement("beforeend",i);const n=new r.YoutubeIframe({iframeId:e,videoId:t,parentElement:i,startsAt:0,classList:["sound-table-item",...this.iframesClassList],blockInteraction:!0});this._setYTIframeControllers.add(n),this._mapYTIframeControllersById.set(e,n),this._arrComponentsReady.push(e),this.everyComponentReady&&this.init()}}})(),SoundTable=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
var SoundTable;(()=>{"use strict";var t={173:(t,e,i)=>{i.d(e,{AudioComponent:()=>l});var n=i(7930),s=i(7353),r=i(1319),a=i(3164),o=i(6555);class l extends n.ObjectEventListener{src;audioElement;_container;_blockInteraction=!1;_divBlockInteraction;constructor(t){super(),this.src=t.src,this._container=t.container,this.audioElement=t.audioElement,this._blockInteraction=!!t.blockInteraction,t.audioElementId&&(this.audioElement.id=t.audioElementId),this.audioElement.classList.add("audio-component"),this.audioElement.addEventListener("ended",(()=>{this.stop()})),this._container.id||(this._container.id=t.audioElementId+"AudioComponentContainer"),this._container.classList.add("audio-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction(),this.setElementsAttributes()}get _videoInfoAttributeList(){return[["audio-component-src",this.src],["audio-component-name",(0,a.removeFilePath)(this.src)]]}setElementsAttributes(){(0,r.setAttributeListForElement)(this.audioElement,this._videoInfoAttributeList),(0,r.setAttributeListForElement)(this.container,this._videoInfoAttributeList),(0,r.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.audioElement.paused}get fileName(){return this.audioElement.src||this.audioElement.querySelector("source")?.src||""}get currentTime(){return this.audioElement.currentTime}set currentTime(t){this.audioElement.currentTime=t}get sourceElements(){return Array.from(this.audioElement.querySelectorAll("source"))}changeSource(t){this.src=t,this.audioElement.innerHTML=(0,s.sourceElementHTML)(this.src),this.audioElement.load(),this.setElementsAttributes()}playWithoutTriggerEvents(){var t=this.audioElement.play();return void 0!==t&&t.then((t=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.audioElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("audio-component-playing"),this._divBlockInteraction.classList.add("audio-component-playing"),this._container.classList.remove("audio-component-paused"),this._divBlockInteraction.classList.remove("audio-component-paused")}setClassesPaused(){this._container.classList.add("audio-component-paused"),this._divBlockInteraction.classList.add("audio-component-paused"),this._container.classList.remove("audio-component-playing"),this._divBlockInteraction.classList.remove("audio-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.audioElement.currentTime=0,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.audioElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.audioElement.volume=1,this.callEventsByName("onunmute",this),this}seek(t,e){return this.currentTime=t,this.callEventsByName("onseek",this),this}get dimensions(){return(0,r.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(t){const e=(0,r.createInvisibleDivAboveParent)({parentElement:t._container,id:`invisibleDivBlockInteraction${t._container.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("audio-component-div-block-interaction"),e}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createAudioComponentOnBody(t){const e=await new o.AudioComponentFactory(t.src).buildOnBody();return new l({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}static async createAudioComponent(t){if(t.container===document.body||!t.container)return this.createAudioComponentOnBody(t);const e=await new o.AudioComponentFactory(t.src).build(t.container);return new l({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}}},6555:(t,e,i)=>{i.d(e,{AudioComponentFactory:()=>r});var n=i(7353),s=i(6401);class r extends s.ComponentContainer{constructor(t,e){super("audioComponent",(0,n.createInvisiblePlayer)([t],e))}async buildSubComponents(t){}}},6401:(t,e,i)=>{i.d(e,{ComponentContainer:()=>n});class n{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(t,e){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw new Error("Invalid template for scene component. Template id: "+e);this.templateElement=t}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(e),document.body.appendChild(this.templateElement);this.componentName=t}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(t,e){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let i=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,i+1),await t.build(e,`${this.componentName}${t.componentName.capitalizeFirstLetter()}${i}`)}async buildOnBody(t){this._element=document.createElement("div"),t&&(this._element.id=t);for(let t of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",t);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${t}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(t,e){for(let e of this.getTemplateCloneNodes())t.insertAdjacentElement("afterbegin",e);return await this.buildSubComponents(t),t}}},9126:(t,e,i)=>{function n(t){return`\n  <div id="${t}SoundTableItem" class="sound-table-item-container">\n  </div>\n  `.trim()}function s(t,e,i="",n=""){return`\n    <div class="form-floating sound-table-input-container">\n      <input type="text" value="${i}" class="form-control sound-table-input" id="urlInput${t}" placeholder="${n}">\n      <label for="urlInput${t}">${e}</label>\n    </div>\n  `}i.d(e,{templateSoundTableInput:()=>s,templateSoundTableItemContainer:()=>n})},2152:(t,e,i)=>{function n(t){return`\n  <div id="${t}">\n  </div>\n  `.trim()}i.d(e,{templateBackgroundYoutubeIframeElement:()=>n})},5102:(t,e,i)=>{i.d(e,{YoutubeIframe:()=>o});var n=i(1319),s=(i(4763),i(739)),r=i(2152),a=(i(4785),i(3362),i(7930));class o extends a.ObjectEventListener{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;_videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;topDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new a.ObjectEventListener;constructor(t){if(o._dictYoutubeIframeById.has(t.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=t.iframeId,this._startsAt=t.startsAt??0,this._videoId=t.videoId,this._startMuted=!!t.startMuted,this._blockInteraction=!!t.blockInteraction,this._iframeContainer=o.getYoutubeIframeElement({iframeId:t.iframeId,classList:t.classList}),this._iframeParentElement=o.setupParentFromYoutubeIframe({parentElement:t.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=t.dimensions??(0,n.getElementDimensions)(this._iframeParentElement),o._dictYoutubeIframeById.set(t.iframeId,this),this.setVideoInfo()}get videoId(){return(0,n.extractYouTubeId)(this._videoId)}async setVideoInfo(){const t=await this.getVideoInfo();this.videoName=t&&t.title?t.title:"",this.channelName=t&&t.author_name?t.author_name:"",this.videoThumb=t&&t.thumbnail_url?t.thumbnail_url:"",this.channelURL=t&&t.author_url?t.author_url:""}changeVideo(t){(0,n.isValidYoutubeUrlOrId)(t.videoId)&&(this.player&&this.player.loadVideoById?(this.prepareOptions(t),this.player.seekTo(this.startsAt,!0),this.isPlaying?this.playWithoutTriggerEvents():this.pauseWithoutTriggerEvents()):setTimeout((()=>this.changeVideo(t)),100))}prepareOptions(t){this.id=t.iframeId,this._videoId=t.videoId,this.startsAt=t.startsAt??this.startsAt,this.loadVideo()}loadVideo(){this.player.loadVideoById({videoId:this.videoId,startSeconds:this.startsAt,suggestedQuality:"highres"}),this.setVideoInfo().then((()=>{this.setExternalHTMLElementsAttributes()}))}async getVideoInfo(){const t=await(0,n.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));if(!t.error)return await t.data().json();console.error(t.error)}onPlayerReady(t){this._startMuted&&this.player.mute(),o._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),o.checkIfEveryIframeIsReady()}onPlayerStateChange(t){this._isPlaying=t.data===o._youtubeAPIReference.PlayerState.PLAYING,this._isPlaying?(this.setClassesIframePlaying(),this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this,this.isPlaying)),100)):this._playingObserverInterval&&(this.setClassesIframePaused(),clearInterval(this._playingObserverInterval),this._playingObserverInterval=null),this.callEventsByName("playerstatechange",this,this.isPlaying),this.callEventsByName("onplayerstatechange",this,this.isPlaying)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(t){this.seek(t)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,s.clamp)(this._startsAt,0,this._startsAt)}set startsAt(t){this._startsAt=(0,s.clamp)(t,0,t)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(t,e=!1,i=!1){return this.callEventsByName("onseek",t,e,i,this),t+=i?this._startsAt:0,this.player.seekTo(t,e),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...o._dictYoutubeIframeById.keys()].some((t=>!this._arrYoutubeIframeIdReady.includes(t)))||(this.arrObjectToSetOnEveryIframeReady.forEach((t=>t.setup(o._dictYoutubeIframeById))),o._dictYoutubeIframeById.forEach(((t,e)=>{t.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:t,classList:e}){const i=document.createElement("div");return i.classList.add("yt-iframe-container"),e&&i.classList.add(...e),i.id=`containerYoutubeIframe${t}`,i.insertAdjacentHTML("afterbegin",(0,r.templateBackgroundYoutubeIframeElement)(t)),i}static setupParentFromYoutubeIframe({parentElement:t,iframeContainer:e}){const i=t??document.body;return i.classList.add("yt-iframe-parent"),i.insertAdjacentElement("afterbegin",e),i}setExternalHTMLElements(){this.createInvisibleDivTop(),this.createInvisibleDivBlockInteraction(),this.setExternalHTMLElementsAttributes()}setExternalHTMLElementsAttributes(){this.setIframeContainerAttributes(),this.setTopDivAttributes(),this.setDivBlockInteractionAttributes()}createInvisibleDivTop(){this.topDiv=o.getInvisibleTopDiv(this),this.topDiv.style.zIndex="990"}createInvisibleDivBlockInteraction(){this._divBlockInteraction=o.getInvisibleDivBlockInteraction(this),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(t=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}setDivBlockInteractionAttributes(){this.divBlockInteraction&&(0,n.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}setIframeContainerAttributes(){this._iframeContainer&&(0,n.setAttributeListForElement)(this._iframeContainer,this._videoInfoAttributeList)}setTopDivAttributes(){this.topDiv&&(0,n.setAttributeListForElement)(this.topDiv,this._videoInfoAttributeList)}set blockInteraction(t){this._blockInteraction=t,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new o._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;get _videoInfoAttributeList(){return[["yt-iframe-id",this.id],["yt-iframe-video-name",this.videoName],["yt-iframe-video-channel-name",this.channelName],["yt-iframe-video-thumb-url",this.videoThumb],["yt-iframe-video-channel-url",this.channelURL]]}static buildIframes(){var t=document.createElement("script");t.id="ytIframeAPI",t.src="https://www.youtube.com/iframe_api";var e=document.getElementsByTagName("script")[0];e&&e.parentNode&&e.parentNode.insertBefore(t,e),(0,n.waitUntilElementExists)("#ytIframeAPI").then((()=>{(0,n.pollForVariable)("YT",(t=>"function"==typeof t.Player&&t.Player.prototype&&t.Player.prototype.constructor===t.Player&&t.loaded),(t=>{o._youtubeAPIReference=t,o.setYoutubeIframeElements()}))}))}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((t,e)=>{t.setExternalHTMLElements(),t.initPlayer()}))}static getInvisibleTopDiv(t){return(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(t.id).parentElement,id:`invisibleTopDivHoldToDrag${t.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:.2*t.dimensions.height}})}static getInvisibleDivBlockInteraction(t){const e=(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(t.id).parentElement,id:`invisibleDivBlockInteraction${t.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("yt-div-block-interaction"),e}}},4785:(t,e,i)=>{i.d(e,{YoutubeIframe:()=>n.YoutubeIframe});var n=i(5102)},3362:(t,e,i)=>{i(5102)},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},4763:(t,e,i)=>{i(1319),i(8586)},8586:(t,e,i)=>{i(1319)},7930:(t,e,i)=>{i.d(e,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(t,e){this.eventsByName.has(t.toLowerCase())?this.eventsByName.get(t.toLowerCase()).push(e):this.eventsByName.set(t.toLowerCase(),[e])}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t(...e)))}}},7353:(t,e,i)=>{i.d(e,{createInvisiblePlayer:()=>r,sourceElementHTML:()=>a}),i(2976);var n=i(1319),s=i(3164);function r(t,e){const i=(0,n.getElementFromHTML)(function(t,e){return`<audio controls ${e?function(t){return` ${t.id?'id="'+t.id+'"':""} ${t.autoPlay||t.autoplay?"autoplay":""} ${t.muted?"muted":""} ${t.loop?"loop":""} ${t.preload?'preload="'+t.preload+'"':""}`.trimEnd()}(e):""}>\n    ${t.map((t=>a(t))).reduce(((t,e)=>t+e),"")}\n  </audio>`}(t,e));return document.body.insertAdjacentElement("afterbegin",i),(0,n.hideElement)(i),i}function a(t){return`<source src="${t}" type="audio/${(0,s.getFileExtension)(t)}">`}i(173)},1319:(t,e,i)=>{i.d(e,{createInvisibleDivAboveParent:()=>p,extractYouTubeId:()=>l,getElementDimensions:()=>u,getElementFromHTML:()=>c,handlePromise:()=>a,hideElement:()=>y,isValidYoutubeUrlOrId:()=>o,pollForVariable:()=>m,setAttributeListForElement:()=>d,waitUntilElementExists:()=>h});const n=new Map,s=new Map,r=new Map;async function a(t){try{const e=await t;return{data:()=>e,error:null}}catch(t){return console.error(t),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}function o(t){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(t)||/^[a-zA-Z0-9_-]{11}$/.test(t)}function l(t){const e=t.match(/[?&]v=([^?&]+)/);return e&&e[1]?e[1]:11===t.length?t:null}function d(t,e){e.forEach((([e,i])=>{t.setAttribute(e,i)}))}function c(t,e=!0){if(!(t=e?t.trim():t))return null;const i=document.createElement("template");i.innerHTML=t;const n=i.content.children;return 1===n.length?n[0]:Array.from(n)}function u(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function m(t,e,i){const n=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(n),i(window[t]))}),100)}function h(t){return new Promise((e=>{if(document.querySelector(t))return e(document.querySelector(t));const i=new MutationObserver((n=>{document.querySelector(t)&&(i.disconnect(),e(document.querySelector(t)))}));i.observe(document.body,{childList:!0,subtree:!0})}))}function p({parentElement:t,id:e,position:i,dimensions:n}){var s=document.createElement("div");return t.style.position||(t.style.position="relative"),s.id=e,s.style.position="absolute",s.style.width=n&&n.width?n.width.toString()+"px":"100%",s.style.height=n&&n.height?n.height.toString()+"px":"100%",s.style.top=(i?.top.toString()??"0")+"px",s.style.left=(i?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",t.appendChild(s),s}function y(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of n)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of s)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of r)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},3164:(t,e,i)=>{i.d(e,{getFileExtension:()=>r,removeFilePath:()=>s});var n=i(2843);function s(t){const e=/(?:.*[\\/])([^\\/]+)$/.exec(t);return e&&e.length>1?e[1]:t}function r(t){if((0,n.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const i=t.split("/").pop();return i&&i!==t?i:""}},739:(t,e,i)=>{function n(t=0,e=0,i=100){return Math.max(e,Math.min(t,i))}i.d(e,{clamp:()=>n})},2843:(t,e,i)=>{function n(t){return"string"!=typeof t||!t||""===t}i.d(e,{isNullOrEmpty:()=>n})}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{i.r(n),i.d(n,{SoundTable:()=>o});var t=i(7930),e=i(1319),s=i(173),r=i(4785),a=i(9126);class o extends t.ObjectEventListener{container;iframesClassList;containersClassList;_arrEveryComponent;_arrComponentsReady=[];_setMediaControllers=new Set;_mapMediaControllersById=new Map;_mapInputBySourceId=new Map;constructor(t){super(),this.container=t.container,this.iframesClassList=t.iframesClassList??[],this.containersClassList=t.containersClassList??[],this._arrEveryComponent=[...t.arrMediaSrc,...t.arrVideoId],t.arrMediaSrc.forEach((e=>{this.addAudioComponent(t.container.id,e)})),t.arrVideoId.forEach((e=>{this.addIframe(`${t.container.id}IframeTableItem${e}`,e)}))}init(){this.componentsControllers.forEach((t=>{t.addEventListener("oninteractionblocked",(()=>{t.seek(0,!0),t.playWithoutTriggerEvents()}))})),r.YoutubeIframe.buildIframes()}getInputBySource(t){if(!this._mapInputBySourceId.has(t))throw new Error("Element src not on sound table.");return this._mapInputBySourceId.get(t)}get everyComponentReady(){return this._arrEveryComponent.length===this._arrComponentsReady.length}get componentsControllers(){return Array.from(this._setMediaControllers)}getElementMediaContainer(t){const i=(0,e.getElementFromHTML)((0,a.templateSoundTableItemContainer)(t));return i.classList.add(...this.containersClassList),i}addAudioComponent(t,i){const n=this.getElementMediaContainer(t);this.container.insertAdjacentElement("beforeend",n);const r=(0,e.getElementFromHTML)((0,a.templateSoundTableInput)(t,"Source",i));n.insertAdjacentElement("beforeend",r),this._mapInputBySourceId.set(t,r),s.AudioComponent.createAudioComponent({src:i,audioElementId:`${t}IframeTableItem${i}`,blockInteraction:!0,container:n}).then((e=>{this._setMediaControllers.add(e),this._mapMediaControllersById.set(t,e),this._arrComponentsReady.push(t),r.querySelector("input").addEventListener("input",(()=>{this.callEventsByName("input",r.querySelector("input").value,e),this.callEventsByName("oninput",r.querySelector("input").value,e),this.callEventsByName("inputchange",r.querySelector("input").value,e),this.callEventsByName("oninputchange",r.querySelector("input").value,e)})),this.everyComponentReady&&this.init()}))}addIframe(t,i){if(this._mapMediaControllersById.has(t))throw new Error("A Iframe with this id already exists: "+t);const n=this.getElementMediaContainer(t);this.container.insertAdjacentElement("beforeend",n);const s=(0,e.getElementFromHTML)((0,a.templateSoundTableInput)(t,"Source",i));n.insertAdjacentElement("beforeend",s),this._mapInputBySourceId.set(t,s);const o=new r.YoutubeIframe({iframeId:t,videoId:i,parentElement:n,startsAt:0,classList:["sound-table-item",...this.iframesClassList],blockInteraction:!0});s.querySelector("input").addEventListener("input",(()=>{this.callEventsByName("input",s.querySelector("input").value,o),this.callEventsByName("oninput",s.querySelector("input").value,o),this.callEventsByName("inputchange",s.querySelector("input").value,o),this.callEventsByName("oninputchange",s.querySelector("input").value,o)})),this._setMediaControllers.add(o),this._mapMediaControllersById.set(t,o),this._arrComponentsReady.push(t),this.everyComponentReady&&this.init()}}})(),SoundTable=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBVTJQLEdBQzdDeFcsS0FBS29WLG9CQUFvQi9LLEtBQU14RCxHQUUxQjdHLEtBQUtpVyxxQkFDUmpXLEtBQUs4VixNQUVULEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9BdWRpb0NvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9BdWRpb0NvbXBvbmVudEZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQ29tcG9uZW50Q29udGFpbmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1NvdW5kVGFibGUvVGVtcGxhdGVzU291bmRUYWJsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Zb3V0dWJlSWZyYW1lL1RlbXBsYXRlc1lvdXR1YmVJZnJhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvWW91dHViZUlmcmFtZS9Zb3V0dWJlSWZyYW1lLnRzIiwid2VicGFjazovLy8uL3NyYy9FeHRlbnNpb25zL1N0cmluZ0V4dGVuc2lvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V4dHJhcy9PYmplY3RFdmVudExpc3RlbmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9Ub29scy9BdWRpb1Rvb2xzLnRzIiwid2VicGFjazovLy8uL3NyYy9Ub29scy9ET01Ub29scy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVG9vbHMvRmlsZVRvb2xzLnRzIiwid2VicGFjazovLy8uL3NyYy9Ub29scy9NYXRoVG9vbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rvb2xzL1N0cmluZ1Rvb2xzLnRzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Tb3VuZFRhYmxlL1NvdW5kVGFibGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JqZWN0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uL0V4dHJhcy9PYmplY3RFdmVudExpc3RlbmVyJztcclxuaW1wb3J0IHsgc291cmNlRWxlbWVudEhUTUwgfSBmcm9tICcuLi9Ub29scy9BdWRpb1Rvb2xzJztcclxuaW1wb3J0IHsgY3JlYXRlSW52aXNpYmxlRGl2QWJvdmVQYXJlbnQsIGdldEVsZW1lbnREaW1lbnNpb25zLCBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCB9IGZyb20gJy4uL1Rvb2xzL0RPTVRvb2xzJztcclxuaW1wb3J0IHsgcmVtb3ZlRmlsZVBhdGggfSBmcm9tICcuLi9Ub29scy9GaWxlVG9vbHMnO1xyXG5pbXBvcnQgeyBEaW1lbnNpb25zIH0gZnJvbSAnLi4vVG9vbHMvTWF0aFRvb2xzJztcclxuaW1wb3J0IHsgQXVkaW9Db21wb25lbnRGYWN0b3J5IH0gZnJvbSAnLi9BdWRpb0NvbXBvbmVudEZhY3RvcnknO1xyXG5pbXBvcnQgeyBJTWVkaWFQbGF5ZXJGdW5jdGlvbnMgfSBmcm9tICcuL1R5cGVzJztcclxuXHJcbmV4cG9ydCB0eXBlIEF1ZGlvQ29tcG9uZW50T3B0aW9ucyA9IHtcclxuICBzcmM6IHN0cmluZztcclxuICBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQ7XHJcbiAgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICBhdWRpb0VsZW1lbnRJZD86IHN0cmluZztcclxuICBibG9ja0ludGVyYWN0aW9uPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIENyZWF0ZUF1ZGlvQ29tcG9uZW50T3B0aW9ucyA9IHtcclxuICBzcmM6IHN0cmluZztcclxuICBhdWRpb0VsZW1lbnRJZD86IHN0cmluZztcclxuICBibG9ja0ludGVyYWN0aW9uPzogYm9vbGVhbjtcclxuICBjb250YWluZXI/OiBIVE1MRWxlbWVudDtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBBdWRpb0NvbXBvbmVudCBleHRlbmRzIE9iamVjdEV2ZW50TGlzdGVuZXIgaW1wbGVtZW50cyBJTWVkaWFQbGF5ZXJGdW5jdGlvbnMge1xyXG4gIHB1YmxpYyBzcmM6IHN0cmluZztcclxuICBwdWJsaWMgYXVkaW9FbGVtZW50OiBIVE1MQXVkaW9FbGVtZW50O1xyXG4gIHByaXZhdGUgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByb3RlY3RlZCBfYmxvY2tJbnRlcmFjdGlvbjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHByb3RlY3RlZCBfZGl2QmxvY2tJbnRlcmFjdGlvbjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCBvcHRpb25zOiBBdWRpb0NvbXBvbmVudE9wdGlvbnMgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuc3JjID0gb3B0aW9ucy5zcmM7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcclxuICAgIHRoaXMuYXVkaW9FbGVtZW50ID0gb3B0aW9ucy5hdWRpb0VsZW1lbnQ7XHJcbiAgICB0aGlzLl9ibG9ja0ludGVyYWN0aW9uID0gb3B0aW9ucy5ibG9ja0ludGVyYWN0aW9uID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgIGlmICggb3B0aW9ucy5hdWRpb0VsZW1lbnRJZCApIHtcclxuICAgICAgdGhpcy5hdWRpb0VsZW1lbnQuaWQgPSBvcHRpb25zLmF1ZGlvRWxlbWVudElkO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYXVkaW9FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdhdWRpby1jb21wb25lbnQnICk7XHJcbiAgICB0aGlzLmF1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnZW5kZWQnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGlmICggIXRoaXMuX2NvbnRhaW5lci5pZCApIHtcclxuICAgICAgdGhpcy5fY29udGFpbmVyLmlkID0gb3B0aW9ucy5hdWRpb0VsZW1lbnRJZCArICdBdWRpb0NvbXBvbmVudENvbnRhaW5lcic7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCggJ2F1ZGlvLWNvbXBvbmVudC1jb250YWluZXInICk7XHJcblxyXG4gICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbiA9IHRoaXMuZ2V0SW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbiggdGhpcyApO1xyXG4gICAgdGhpcy5zZXR1cEludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24oKTtcclxuICAgIHRoaXMuc2V0RWxlbWVudHNBdHRyaWJ1dGVzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldCBfdmlkZW9JbmZvQXR0cmlidXRlTGlzdCgpOiBbc3RyaW5nLCBzdHJpbmddW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgWydhdWRpby1jb21wb25lbnQtc3JjJywgdGhpcy5zcmNdLFxyXG4gICAgICBbJ2F1ZGlvLWNvbXBvbmVudC1uYW1lJywgcmVtb3ZlRmlsZVBhdGgoIHRoaXMuc3JjICldXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXRFbGVtZW50c0F0dHJpYnV0ZXMoKSB7XHJcbiAgICBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCggdGhpcy5hdWRpb0VsZW1lbnQsIHRoaXMuX3ZpZGVvSW5mb0F0dHJpYnV0ZUxpc3QgKTtcclxuICAgIHNldEF0dHJpYnV0ZUxpc3RGb3JFbGVtZW50KCB0aGlzLmNvbnRhaW5lciwgdGhpcy5fdmlkZW9JbmZvQXR0cmlidXRlTGlzdCApO1xyXG4gICAgc2V0QXR0cmlidXRlTGlzdEZvckVsZW1lbnQoIHRoaXMuZGl2QmxvY2tJbnRlcmFjdGlvbiwgdGhpcy5fdmlkZW9JbmZvQXR0cmlidXRlTGlzdCApO1xyXG4gIH1cclxuXHJcblxyXG4gIHB1YmxpYyBnZXQgZGl2QmxvY2tJbnRlcmFjdGlvbigpOiBIVE1MRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBhdXNlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmF1ZGlvRWxlbWVudC5wYXVzZWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGZpbGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5hdWRpb0VsZW1lbnQuc3JjIHx8IHRoaXMuYXVkaW9FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoICdzb3VyY2UnICk/LnNyYyB8fCAnJztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY3VycmVudFRpbWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmF1ZGlvRWxlbWVudC5jdXJyZW50VGltZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgY3VycmVudFRpbWUoIHQ6IG51bWJlciApIHtcclxuICAgIHRoaXMuYXVkaW9FbGVtZW50LmN1cnJlbnRUaW1lID0gdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc291cmNlRWxlbWVudHMoKTogSFRNTFNvdXJjZUVsZW1lbnRbXSB7XHJcbiAgICByZXR1cm4gQXJyYXkuZnJvbSggdGhpcy5hdWRpb0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbCggJ3NvdXJjZScgKSApIGFzIEhUTUxTb3VyY2VFbGVtZW50W107XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2hhbmdlU291cmNlKCBzcmM6IHN0cmluZyApIHtcclxuICAgIHRoaXMuc3JjID0gc3JjO1xyXG4gICAgdGhpcy5hdWRpb0VsZW1lbnQuaW5uZXJIVE1MID0gc291cmNlRWxlbWVudEhUTUwoIHRoaXMuc3JjICk7XHJcbiAgICB0aGlzLmF1ZGlvRWxlbWVudC5sb2FkKCk7XHJcbiAgICB0aGlzLnNldEVsZW1lbnRzQXR0cmlidXRlcygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsYXlXaXRob3V0VHJpZ2dlckV2ZW50cygpIHtcclxuICAgIHZhciBwbGF5UHJvbWlzZSA9IHRoaXMuYXVkaW9FbGVtZW50LnBsYXkoKTtcclxuXHJcbiAgICBpZiAoIHBsYXlQcm9taXNlICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgIHBsYXlQcm9taXNlLnRoZW4oIF8gPT4geyB9IClcclxuICAgICAgICAuY2F0Y2goICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgIH0gKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNldENsYXNzZXNQbGF5aW5nKCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwYXVzZVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCkge1xyXG4gICAgdGhpcy5hdWRpb0VsZW1lbnQucGF1c2UoKTtcclxuICAgIHRoaXMuc2V0Q2xhc3Nlc1BhdXNlZCgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzZXRDbGFzc2VzUGxheWluZygpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCAnYXVkaW8tY29tcG9uZW50LXBsYXlpbmcnICk7XHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLmNsYXNzTGlzdC5hZGQoICdhdWRpby1jb21wb25lbnQtcGxheWluZycgKTtcclxuXHJcbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSggJ2F1ZGlvLWNvbXBvbmVudC1wYXVzZWQnICk7XHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLmNsYXNzTGlzdC5yZW1vdmUoICdhdWRpby1jb21wb25lbnQtcGF1c2VkJyApO1xyXG4gIH1cclxuXHJcbiAgc2V0Q2xhc3Nlc1BhdXNlZCgpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCAnYXVkaW8tY29tcG9uZW50LXBhdXNlZCcgKTtcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uY2xhc3NMaXN0LmFkZCggJ2F1ZGlvLWNvbXBvbmVudC1wYXVzZWQnICk7XHJcblxyXG4gICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoICdhdWRpby1jb21wb25lbnQtcGxheWluZycgKTtcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSggJ2F1ZGlvLWNvbXBvbmVudC1wbGF5aW5nJyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsYXkoKSB7XHJcbiAgICB0aGlzLnBsYXlXaXRob3V0VHJpZ2dlckV2ZW50cygpO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25wbGF5JywgdGhpcyApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGF1c2UoKSB7XHJcbiAgICB0aGlzLnBhdXNlV2l0aG91dFRyaWdnZXJFdmVudHMoKTtcclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ucGF1c2UnLCB0aGlzICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdG9wKCkge1xyXG4gICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgdGhpcy5hdWRpb0VsZW1lbnQuY3VycmVudFRpbWUgPSAwO1xyXG5cclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29uc3RvcCcsIHRoaXMgKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvZ2dsZSgpIHtcclxuICAgIGlmICggdGhpcy5wYXVzZWQgKSB7XHJcbiAgICAgIHRoaXMucGxheVdpdGhvdXRUcmlnZ2VyRXZlbnRzKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb250b2dnbGUnLCB0aGlzICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIG11dGUoKSB7XHJcbiAgICB0aGlzLmF1ZGlvRWxlbWVudC52b2x1bWUgPSAwO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25tdXRlJywgdGhpcyApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICB1bm11dGUoKSB7XHJcbiAgICB0aGlzLmF1ZGlvRWxlbWVudC52b2x1bWUgPSAxO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb251bm11dGUnLCB0aGlzICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHNlZWsoIHNlZWtUaW1lOiBudW1iZXIsIF9yZWxvYWRCdWZmZXI/OiBib29sZWFuICkge1xyXG4gICAgdGhpcy5jdXJyZW50VGltZSA9IHNlZWtUaW1lO1xyXG4gICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25zZWVrJywgdGhpcyApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRpbWVuc2lvbnMoKTogRGltZW5zaW9ucyB7XHJcbiAgICByZXR1cm4gZ2V0RWxlbWVudERpbWVuc2lvbnMoIHRoaXMuX2NvbnRhaW5lciApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRJbnZpc2libGVEaXZCbG9ja0ludGVyYWN0aW9uKCBhdWRpb0NvbXBvbmVudDogQXVkaW9Db21wb25lbnQgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZWxlbWVudEludmlzaWJsZURpdiA9IGNyZWF0ZUludmlzaWJsZURpdkFib3ZlUGFyZW50KCB7XHJcbiAgICAgIHBhcmVudEVsZW1lbnQ6IGF1ZGlvQ29tcG9uZW50Ll9jb250YWluZXIsXHJcbiAgICAgIGlkOiBgaW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbiR7IGF1ZGlvQ29tcG9uZW50Ll9jb250YWluZXIuaWQgfWAsXHJcbiAgICAgIHBvc2l0aW9uOiB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG4gICAgICBkaW1lbnNpb25zOiB7IHdpZHRoOiBhdWRpb0NvbXBvbmVudC5kaW1lbnNpb25zLndpZHRoLCBoZWlnaHQ6IGF1ZGlvQ29tcG9uZW50LmRpbWVuc2lvbnMuaGVpZ2h0IH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBlbGVtZW50SW52aXNpYmxlRGl2LmNsYXNzTGlzdC5hZGQoICdhdWRpby1jb21wb25lbnQtZGl2LWJsb2NrLWludGVyYWN0aW9uJyApO1xyXG5cclxuICAgIHJldHVybiBlbGVtZW50SW52aXNpYmxlRGl2O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldHVwSW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbigpIHtcclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uc3R5bGUuZGlzcGxheSA9IHRoaXMuX2Jsb2NrSW50ZXJhY3Rpb24gPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbi5zdHlsZS56SW5kZXggPSAnOTk1JztcclxuXHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICgpID0+IHtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25jbGlja2ludGVyYWN0aW9uYmxvY2tlZCcsIHRoaXMsIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24gKTtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25pbnRlcmFjdGlvbmJsb2NrZWQnLCB0aGlzLCB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvLyBhd2FpdHMgYXVkaW8gbG9hZHMgZnJvbSBzb3VyY2UgdGhlbiBjcmVhdGVzIHRoZSBjb21wb25lbnRcclxuICBwdWJsaWMgc3RhdGljIGFzeW5jIGNyZWF0ZUF1ZGlvQ29tcG9uZW50T25Cb2R5KCBvcHRpb25zOiBDcmVhdGVBdWRpb0NvbXBvbmVudE9wdGlvbnMgKTogUHJvbWlzZTxBdWRpb0NvbXBvbmVudD4ge1xyXG4gICAgY29uc3QgYXVkaW9Db21wb25lbnRDb250YWluZXIgPSBhd2FpdCBuZXcgQXVkaW9Db21wb25lbnRGYWN0b3J5KCBvcHRpb25zLnNyYyApLmJ1aWxkT25Cb2R5KCk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBBdWRpb0NvbXBvbmVudCgge1xyXG4gICAgICBzcmM6IG9wdGlvbnMuc3JjLFxyXG4gICAgICBjb250YWluZXI6IGF1ZGlvQ29tcG9uZW50Q29udGFpbmVyLFxyXG4gICAgICBhdWRpb0VsZW1lbnQ6IGF1ZGlvQ29tcG9uZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoICdhdWRpbycgKSEsXHJcbiAgICAgIGF1ZGlvRWxlbWVudElkOiBvcHRpb25zLmF1ZGlvRWxlbWVudElkLFxyXG4gICAgICBibG9ja0ludGVyYWN0aW9uOiBvcHRpb25zLmJsb2NrSW50ZXJhY3Rpb25cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIC8vIGF3YWl0cyBhdWRpbyBsb2FkcyBmcm9tIHNvdXJjZSB0aGVuIGNyZWF0ZXMgdGhlIGNvbXBvbmVudFxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgY3JlYXRlQXVkaW9Db21wb25lbnQoIG9wdGlvbnM6IENyZWF0ZUF1ZGlvQ29tcG9uZW50T3B0aW9ucyApOiBQcm9taXNlPEF1ZGlvQ29tcG9uZW50PiB7XHJcbiAgICBpZiAoIG9wdGlvbnMuY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5IHx8ICFvcHRpb25zLmNvbnRhaW5lciApIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXVkaW9Db21wb25lbnRPbkJvZHkoIG9wdGlvbnMgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhdWRpb0NvbXBvbmVudENvbnRhaW5lciA9IGF3YWl0IG5ldyBBdWRpb0NvbXBvbmVudEZhY3RvcnkoIG9wdGlvbnMuc3JjICkuYnVpbGQoIG9wdGlvbnMuY29udGFpbmVyICk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBBdWRpb0NvbXBvbmVudCgge1xyXG4gICAgICBzcmM6IG9wdGlvbnMuc3JjLFxyXG4gICAgICBjb250YWluZXI6IGF1ZGlvQ29tcG9uZW50Q29udGFpbmVyLFxyXG4gICAgICBhdWRpb0VsZW1lbnQ6IGF1ZGlvQ29tcG9uZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoICdhdWRpbycgKSEsXHJcbiAgICAgIGF1ZGlvRWxlbWVudElkOiBvcHRpb25zLmF1ZGlvRWxlbWVudElkLFxyXG4gICAgICBibG9ja0ludGVyYWN0aW9uOiBvcHRpb25zLmJsb2NrSW50ZXJhY3Rpb25cclxuICAgIH0gKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBBdWRpb1BsYXllckNvbmZpZywgY3JlYXRlSW52aXNpYmxlUGxheWVyIH0gZnJvbSAnLi4vVG9vbHMvQXVkaW9Ub29scyc7XHJcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJy4vQ29tcG9uZW50Q29udGFpbmVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBdWRpb0NvbXBvbmVudEZhY3RvcnkgZXh0ZW5kcyBDb21wb25lbnRDb250YWluZXIge1xyXG4gIGNvbnN0cnVjdG9yKCBzcmM6IHN0cmluZywgcGxheWVyQ29uZmlnPzogQXVkaW9QbGF5ZXJDb25maWcgKSB7XHJcbiAgICBzdXBlciggXCJhdWRpb0NvbXBvbmVudFwiLCBjcmVhdGVJbnZpc2libGVQbGF5ZXIoIFtzcmNdLCBwbGF5ZXJDb25maWcgKSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGJ1aWxkU3ViQ29tcG9uZW50cyggcGFyZW50OiBIVE1MRWxlbWVudCApOiBQcm9taXNlPEhUTUxFbGVtZW50W10gfCB2b2lkPiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG59IiwiZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBvbmVudENvbnRhaW5lciB7XHJcbiAgcHJvdGVjdGVkIF9lbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gIHB1YmxpYyB0ZW1wbGF0ZUVsZW1lbnQ6IEhUTUxUZW1wbGF0ZUVsZW1lbnQ7XHJcbiAgcHVibGljIHJlYWRvbmx5IGNvbXBvbmVudE5hbWU6IHN0cmluZztcclxuICBwcm90ZWN0ZWQgc3ViQ29tcG9uZW50Q291bnRCeU5hbWU6IE1hcDxzdHJpbmcsIG51bWJlcj4gPSBuZXcgTWFwKCk7XHJcbiAgcHJvdGVjdGVkIHN1YkNvbXBvbmVudHM6IEhUTUxFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgLy8vIFRlbXBsYXRlIGlzIGVpdGhlciBhIGlkIGZvciBhIGh0bWwgdGVtcGxhdGUgZWxlbWVudCBvciBhbiBlbGVtZW50IHRoYXQgd2lsbCBiZSBpbnNlcnRlZCBhcyBhIHRlbXBsYXRlIGluc2lkZSBkb2N1bWVudC5ib2R5XHJcbiAgY29uc3RydWN0b3IoIGNvbXBvbmVudE5hbWU6IHN0cmluZywgdGVtcGxhdGU6IHN0cmluZyB8IEhUTUxFbGVtZW50ICkge1xyXG4gICAgaWYgKCB0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICBjb25zdCB0ZW1wbGF0ZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggdGVtcGxhdGUgKSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xyXG5cclxuICAgICAgaWYgKCAhdGVtcGxhdGVFbGVtZW50ICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvciggXCJJbnZhbGlkIHRlbXBsYXRlIGZvciBzY2VuZSBjb21wb25lbnQuIFRlbXBsYXRlIGlkOiBcIiArIHRlbXBsYXRlICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudGVtcGxhdGVFbGVtZW50ID0gdGVtcGxhdGVFbGVtZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50ZW1wbGF0ZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRlbXBsYXRlXCIgKTtcclxuICAgICAgdGhpcy50ZW1wbGF0ZUVsZW1lbnQuY29udGVudC5hcHBlbmRDaGlsZCggdGVtcGxhdGUgKTtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggdGhpcy50ZW1wbGF0ZUVsZW1lbnQgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldFRlbXBsYXRlQ2xvbmVOb2RlcygpOiBIVE1MQ29sbGVjdGlvbiB7XHJcbiAgICByZXR1cm4gKCB0aGlzLnRlbXBsYXRlRWxlbWVudC5jb250ZW50LmNsb25lTm9kZSggdHJ1ZSApIGFzIERvY3VtZW50RnJhZ21lbnQgKS5jaGlsZHJlbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhYnN0cmFjdCBidWlsZFN1YkNvbXBvbmVudHMoIHBhcmVudDogSFRNTEVsZW1lbnQgKTogUHJvbWlzZTxIVE1MRWxlbWVudFtdIHwgdm9pZD47XHJcblxyXG4gIHByb3RlY3RlZCBhc3luYyBidWlsZFNpbmdsZVN1YkNvbXBvbmVudCggY29tcG9uZW50OiBDb21wb25lbnRDb250YWluZXIsIHBhcmVudDogSFRNTEVsZW1lbnQgKTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xyXG4gICAgaWYgKCB0aGlzLnN1YkNvbXBvbmVudENvdW50QnlOYW1lLmhhcyggdGhpcy5jb21wb25lbnROYW1lICkgKSB7XHJcbiAgICAgIHRoaXMuc3ViQ29tcG9uZW50Q291bnRCeU5hbWUuc2V0KCB0aGlzLmNvbXBvbmVudE5hbWUsIDAgKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY29tcG9uZW50Q291bnQgPSB0aGlzLnN1YkNvbXBvbmVudENvdW50QnlOYW1lLmdldCggdGhpcy5jb21wb25lbnROYW1lICkhO1xyXG5cclxuICAgIHRoaXMuc3ViQ29tcG9uZW50Q291bnRCeU5hbWUuc2V0KCB0aGlzLmNvbXBvbmVudE5hbWUsIGNvbXBvbmVudENvdW50ICsgMSApO1xyXG5cclxuICAgIHJldHVybiBhd2FpdCBjb21wb25lbnQuYnVpbGQoIHBhcmVudCwgYCR7IHRoaXMuY29tcG9uZW50TmFtZSB9JHsgY29tcG9uZW50LmNvbXBvbmVudE5hbWUuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKCkgfSR7IGNvbXBvbmVudENvdW50IH1gICk7XHJcbiAgfVxyXG5cclxuICAvLy8gR2V0cyB0aGUgdGVtcGxhdGUgbm9kZXMgYW5kIGluc2VydCB0aGVtIGludG8gYSBjb250YWluZXIgdGhlbiByZXR1cm5zIHRoZSBjb250YWluZXJcclxuICBwdWJsaWMgYXN5bmMgYnVpbGRPbkJvZHkoIGVsZW1lbnRJZD86IHN0cmluZyApOiBQcm9taXNlPEhUTUxFbGVtZW50PiB7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcclxuXHJcbiAgICBpZiAoIGVsZW1lbnRJZCApIHtcclxuICAgICAgdGhpcy5fZWxlbWVudC5pZCA9IGVsZW1lbnRJZDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKCBsZXQgaXRlbSBvZiB0aGlzLmdldFRlbXBsYXRlQ2xvbmVOb2RlcygpICkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudCggJ2FmdGVyYmVnaW4nLCBpdGVtICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhdGhpcy5fZWxlbWVudCApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBgRmFpbCBidWlsZGluZyBTY2VuZUNvbXBvbmVudC4gRWxlbWVudElkOiAkeyBlbGVtZW50SWQgfWAgKTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCB0aGlzLmJ1aWxkU3ViQ29tcG9uZW50cyggZG9jdW1lbnQuYm9keSApO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCAnYmVmb3JlZW5kJywgdGhpcy5fZWxlbWVudCApO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgLy8vIEdldHMgdGhlIHRlbXBsYXRlIG5vZGVzIGFuZCBpbnNlcnQgdGhlbSBpbnRvIGEgY29udGFpbmVyIHRoZW4gcmV0dXJucyB0aGUgY29udGFpbmVyXHJcbiAgcHVibGljIGFzeW5jIGJ1aWxkKCBjb250YWluZXI6IEhUTUxFbGVtZW50LCBlbGVtZW50SWQ/OiBzdHJpbmcgKTogUHJvbWlzZTxIVE1MRWxlbWVudD4ge1xyXG4gICAgZm9yICggbGV0IGl0ZW0gb2YgdGhpcy5nZXRUZW1wbGF0ZUNsb25lTm9kZXMoKSApIHtcclxuICAgICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudCggJ2FmdGVyYmVnaW4nLCBpdGVtICk7XHJcbiAgICB9XHJcblxyXG4gICAgYXdhaXQgdGhpcy5idWlsZFN1YkNvbXBvbmVudHMoIGNvbnRhaW5lciApO1xyXG5cclxuICAgIHJldHVybiBjb250YWluZXI7XHJcbiAgfVxyXG59IiwiXHJcbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZVNvdW5kVGFibGVJdGVtQ29udGFpbmVyKCBpdGVtSWQ6IHN0cmluZyApOiBzdHJpbmcge1xyXG4gIHJldHVybiBgXHJcbiAgPGRpdiBpZD1cIiR7IGl0ZW1JZCB9U291bmRUYWJsZUl0ZW1cIiBjbGFzcz1cInNvdW5kLXRhYmxlLWl0ZW0tY29udGFpbmVyXCI+XHJcbiAgPC9kaXY+XHJcbiAgYC50cmltKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZVNvdW5kVGFibGVJbnB1dCggaXRlbUlkOiBzdHJpbmcsIGxhYmVsVGV4dDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nID0gXCJcIiwgcGxhY2Vob2xkZXI6IHN0cmluZyA9IFwiXCIgKSB7XHJcbiAgcmV0dXJuIGBcclxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWZsb2F0aW5nIHNvdW5kLXRhYmxlLWlucHV0LWNvbnRhaW5lclwiPlxyXG4gICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT1cIiR7IHZhbHVlIH1cIiBjbGFzcz1cImZvcm0tY29udHJvbCBzb3VuZC10YWJsZS1pbnB1dFwiIGlkPVwidXJsSW5wdXQkeyBpdGVtSWQgfVwiIHBsYWNlaG9sZGVyPVwiJHsgcGxhY2Vob2xkZXIgfVwiPlxyXG4gICAgICA8bGFiZWwgZm9yPVwidXJsSW5wdXQkeyBpdGVtSWQgfVwiPiR7IGxhYmVsVGV4dCB9PC9sYWJlbD5cclxuICAgIDwvZGl2PlxyXG4gIGA7XHJcbn0iLCJcclxuZXhwb3J0IGZ1bmN0aW9uIHRlbXBsYXRlQmFja2dyb3VuZFlvdXR1YmVJZnJhbWVFbGVtZW50KCBpZnJhbWVJZDogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBcclxuICA8ZGl2IGlkPVwiJHsgaWZyYW1lSWQgfVwiPlxyXG4gIDwvZGl2PlxyXG4gIGAudHJpbSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVZb3V0dWJlSWZyYW1lVGFibGVJdGVtKCBpZnJhbWVJZDogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBcclxuICA8ZGl2IGlkPVwiJHsgaWZyYW1lSWQgfUlmcmFtZVRhYmxlSXRlbVwiIGNsYXNzPVwieXQtaWZyYW1lLXRhYmxlLWl0ZW0tY29udGFpbmVyXCI+XHJcbiAgPC9kaXY+XHJcbiAgYC50cmltKCk7XHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVJbnZpc2libGVEaXZBYm92ZVBhcmVudCwgZXh0cmFjdFlvdVR1YmVJZCwgZ2V0RWxlbWVudERpbWVuc2lvbnMsIGhhbmRsZVByb21pc2UsIGlzVmFsaWRZb3VUdWJlVXJsLCBpc1ZhbGlkWW91dHViZVVybE9ySWQsIHBvbGxGb3JWYXJpYWJsZSwgc2V0QXR0cmlidXRlTGlzdEZvckVsZW1lbnQsIHdhaXRVbnRpbEVsZW1lbnRFeGlzdHMgfSBmcm9tICcuLi8uLi9Ub29scy9ET01Ub29scyc7XHJcbmltcG9ydCB7IERyYWdnYWJsZUVsZW1lbnQgfSBmcm9tICcuLi8uLi9FeHRyYXMvRHJhZ2dhYmxlRWxlbWVudCc7XHJcbmltcG9ydCB7IERpbWVuc2lvbnMsIGNsYW1wIH0gZnJvbSAnLi4vLi4vVG9vbHMvTWF0aFRvb2xzJztcclxuaW1wb3J0IHsgdGVtcGxhdGVCYWNrZ3JvdW5kWW91dHViZUlmcmFtZUVsZW1lbnQgfSBmcm9tICcuL1RlbXBsYXRlc1lvdXR1YmVJZnJhbWUnO1xyXG5pbXBvcnQgeyBJT2JqZWN0VG9TZXRPbllvdXR1YmVJZnJhbWVzUmVhZHkgfSBmcm9tICcuL1R5cGVzJztcclxuaW1wb3J0IHsgWW91dHViZUlmcmFtZVN3aXRjaGVyIH0gZnJvbSAnLi9Zb3V0dWJlSWZyYW1lU3dpdGNoZXInO1xyXG5pbXBvcnQgeyBZb3V0dWJlSWZyYW1lU3luYyB9IGZyb20gJy4vWW91dHViZUlmcmFtZVN5bmMnO1xyXG5pbXBvcnQgeyBPYmplY3RFdmVudExpc3RlbmVyIH0gZnJvbSAnLi4vLi4vRXh0cmFzL09iamVjdEV2ZW50TGlzdGVuZXInO1xyXG5pbXBvcnQgeyBJTWVkaWFQbGF5ZXJGdW5jdGlvbnMgfSBmcm9tICcuLi9UeXBlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBZb3V0dWJlSWZyYW1lT3B0aW9ucyA9IHtcclxuICBpZnJhbWVJZDogc3RyaW5nO1xyXG4gIHZpZGVvSWQ6IHN0cmluZztcclxuICBkaW1lbnNpb25zPzogRGltZW5zaW9ucztcclxuICBwYXJlbnRFbGVtZW50PzogSFRNTEVsZW1lbnQ7XHJcbiAgY2xhc3NMaXN0Pzogc3RyaW5nW107XHJcbiAgc3RhcnRNdXRlZD86IGJvb2xlYW47XHJcbiAgc3RhcnRzQXQ/OiBudW1iZXI7XHJcbiAgYmxvY2tJbnRlcmFjdGlvbj86IGJvb2xlYW47XHJcbiAgcmVwbGF5T25FbmQ/OiBib29sZWFuO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgWW91dHViZUlmcmFtZUNoYW5nZVZpZGVvT3B0aW9ucyA9IHtcclxuICBpZnJhbWVJZDogc3RyaW5nO1xyXG4gIHZpZGVvSWQ6IHN0cmluZztcclxuICBzdGFydHNBdD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURyYWdnYWJsZVlvdXR1YmVJZnJhbWUoIHsgaWZyYW1lSWQsIHZpZGVvSWQsIHN0YXJ0c0F0LCBwYXJlbnRFbGVtZW50LCBjbGFzc0xpc3QgPSBbXSB9OiBZb3V0dWJlSWZyYW1lT3B0aW9ucyApIHtcclxuICBjb25zdCBpZnJhbWVDb250cm9sbGVyUmVzdWx0ID0gbmV3IFlvdXR1YmVJZnJhbWUoIHsgc3RhcnRzQXQsIGlmcmFtZUlkLCB2aWRlb0lkLCBwYXJlbnRFbGVtZW50LCBjbGFzc0xpc3QgfSApO1xyXG5cclxuICBjb25zdCBkcmFnZ2FibGVSZXN1bHQgPSBuZXcgRHJhZ2dhYmxlRWxlbWVudCgge1xyXG4gICAgZWxlbWVudDogcGFyZW50RWxlbWVudCA/PyBkb2N1bWVudC5ib2R5LFxyXG4gICAgYWxsb3dEcmFnZ2luZ0J5SW5uZXJDb250ZW50OiB0cnVlLFxyXG4gICAgb25Ecm9wOiAoKSA9PiB7XHJcblxyXG4gICAgfVxyXG4gIH0gKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGlmcmFtZUNvbnRyb2xsZXI6IGlmcmFtZUNvbnRyb2xsZXJSZXN1bHQsXHJcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZVJlc3VsdFxyXG4gIH07XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgWW91dHViZUlmcmFtZSBleHRlbmRzIE9iamVjdEV2ZW50TGlzdGVuZXIgaW1wbGVtZW50cyBJTWVkaWFQbGF5ZXJGdW5jdGlvbnMge1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgYXJyT2JqZWN0VG9TZXRPbkV2ZXJ5SWZyYW1lUmVhZHk6IElPYmplY3RUb1NldE9uWW91dHViZUlmcmFtZXNSZWFkeVtdID0gW107XHJcblxyXG4gIHByb3RlY3RlZCBzdGF0aWMgX2RpY3RZb3V0dWJlSWZyYW1lQnlJZDogTWFwPHN0cmluZywgWW91dHViZUlmcmFtZT4gPSBuZXcgTWFwKCk7XHJcbiAgcHJvdGVjdGVkIHN0YXRpYyBfYXJyWW91dHViZUlmcmFtZUlkUmVhZHk6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIHB1YmxpYyBwbGF5ZXI6IGFueSB8IG51bGw7XHJcbiAgcHJvdGVjdGVkIF9pc1BsYXllclJlYWR5OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIHB1YmxpYyBpZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgX3ZpZGVvSWQ6IHN0cmluZztcclxuICBwdWJsaWMgdmlkZW9OYW1lOiBzdHJpbmcgPSAnJztcclxuICBwdWJsaWMgdmlkZW9UaHVtYjogc3RyaW5nID0gJyc7XHJcbiAgcHVibGljIGNoYW5uZWxVUkw6IHN0cmluZyA9ICcnO1xyXG4gIHB1YmxpYyBjaGFubmVsTmFtZTogc3RyaW5nID0gJyc7XHJcblxyXG4gIHByb3RlY3RlZCBfaWZyYW1lRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgLy8gQSBkaXYgd2hpY2ggaXMgY3JlYXRlZCBhZnRlciBpZnJhbWUgcmVuZGVyIGFuZCBob2xkcyBpZnJhbWUgZWxlbWVudFxyXG4gIHByb3RlY3RlZCBfaWZyYW1lQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgLy8gVGhlIGVsZW1lbnQgdGhhdCBob2xkcyB7IF9pZnJhbWVDb250YWluZXIgfVxyXG4gIHByb3RlY3RlZCBfaWZyYW1lUGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByb3RlY3RlZCBfaXNQbGF5aW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgcHJvdGVjdGVkIF9kaW1lbnNpb25zOiBEaW1lbnNpb25zO1xyXG5cclxuICAvLy8gQ2FuIGJlIHVzZWQgdG8gZHJhZywgaXMgYW4gaW52aXNpYmxlIGRpdiBwbGFjZWQgYXQgdGhlIHRvcCBvZiB0aGUgY29udGFpbmVyXHJcbiAgcHJvdGVjdGVkIHRvcERpdj86IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIF9zdGFydHNBdDogbnVtYmVyO1xyXG5cclxuICBwcm90ZWN0ZWQgX2Jsb2NrSW50ZXJhY3Rpb246IGJvb2xlYW4gPSBmYWxzZTtcclxuICBwcm90ZWN0ZWQgX2RpdkJsb2NrSW50ZXJhY3Rpb246IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIHByb3RlY3RlZCBfc3RhcnRNdXRlZDogYm9vbGVhbjtcclxuICBwdWJsaWMgX3BsYXlpbmdPYnNlcnZlckludGVydmFsOiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwcm90ZWN0ZWQgX2V2ZW50TGlzdGVuZXI6IE9iamVjdEV2ZW50TGlzdGVuZXIgPSBuZXcgT2JqZWN0RXZlbnRMaXN0ZW5lcigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9uczogWW91dHViZUlmcmFtZU9wdGlvbnMgKSB7XHJcbiAgICBpZiAoIFlvdXR1YmVJZnJhbWUuX2RpY3RZb3V0dWJlSWZyYW1lQnlJZC5oYXMoIG9wdGlvbnMuaWZyYW1lSWQgKSApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIkludmFsaWQgaWZyYW1lIHRoZXJlJ3MgYWxyZWFkeSBhbiBpZnJhbWUgd2l0aCB0aGlzIGlkLlwiICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLmlkID0gb3B0aW9ucy5pZnJhbWVJZDtcclxuICAgIHRoaXMuX3N0YXJ0c0F0ID0gb3B0aW9ucy5zdGFydHNBdCA/PyAwO1xyXG4gICAgdGhpcy5fdmlkZW9JZCA9IG9wdGlvbnMudmlkZW9JZDtcclxuXHJcbiAgICB0aGlzLl9zdGFydE11dGVkID0gb3B0aW9ucy5zdGFydE11dGVkID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgdGhpcy5fYmxvY2tJbnRlcmFjdGlvbiA9IG9wdGlvbnMuYmxvY2tJbnRlcmFjdGlvbiA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICB0aGlzLl9pZnJhbWVDb250YWluZXIgPSBZb3V0dWJlSWZyYW1lLmdldFlvdXR1YmVJZnJhbWVFbGVtZW50KCB7XHJcbiAgICAgIGlmcmFtZUlkOiBvcHRpb25zLmlmcmFtZUlkLFxyXG4gICAgICBjbGFzc0xpc3Q6IG9wdGlvbnMuY2xhc3NMaXN0XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5faWZyYW1lUGFyZW50RWxlbWVudCA9IFlvdXR1YmVJZnJhbWUuc2V0dXBQYXJlbnRGcm9tWW91dHViZUlmcmFtZSgge1xyXG4gICAgICBwYXJlbnRFbGVtZW50OiBvcHRpb25zLnBhcmVudEVsZW1lbnQgPz8gZG9jdW1lbnQuYm9keSxcclxuICAgICAgaWZyYW1lQ29udGFpbmVyOiB0aGlzLl9pZnJhbWVDb250YWluZXJcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnNldENsYXNzZXNJZnJhbWVQYXVzZWQoKTtcclxuXHJcbiAgICB0aGlzLl9kaW1lbnNpb25zID0gb3B0aW9ucy5kaW1lbnNpb25zID8/IGdldEVsZW1lbnREaW1lbnNpb25zKCB0aGlzLl9pZnJhbWVQYXJlbnRFbGVtZW50ICk7XHJcblxyXG4gICAgWW91dHViZUlmcmFtZS5fZGljdFlvdXR1YmVJZnJhbWVCeUlkLnNldCggb3B0aW9ucy5pZnJhbWVJZCwgdGhpcyApO1xyXG4gICAgdGhpcy5zZXRWaWRlb0luZm8oKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdmlkZW9JZCgpIHtcclxuICAgIHJldHVybiBleHRyYWN0WW91VHViZUlkKCB0aGlzLl92aWRlb0lkICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHNldFZpZGVvSW5mbygpIHtcclxuICAgIGNvbnN0IGluZm8gPSBhd2FpdCB0aGlzLmdldFZpZGVvSW5mbygpO1xyXG4gICAgdGhpcy52aWRlb05hbWUgPSBpbmZvICYmIGluZm8udGl0bGUgPyBpbmZvLnRpdGxlIGFzIHN0cmluZyA6ICcnO1xyXG4gICAgdGhpcy5jaGFubmVsTmFtZSA9IGluZm8gJiYgaW5mby5hdXRob3JfbmFtZSA/IGluZm8uYXV0aG9yX25hbWUgYXMgc3RyaW5nIDogJyc7XHJcbiAgICB0aGlzLnZpZGVvVGh1bWIgPSBpbmZvICYmIGluZm8udGh1bWJuYWlsX3VybCA/IGluZm8udGh1bWJuYWlsX3VybCBhcyBzdHJpbmcgOiAnJztcclxuICAgIHRoaXMuY2hhbm5lbFVSTCA9IGluZm8gJiYgaW5mby5hdXRob3JfdXJsID8gaW5mby5hdXRob3JfdXJsIGFzIHN0cmluZyA6ICcnO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNoYW5nZVZpZGVvKCBvcHRpb25zOiBZb3V0dWJlSWZyYW1lQ2hhbmdlVmlkZW9PcHRpb25zICk6IHZvaWQge1xyXG4gICAgaWYgKCAhaXNWYWxpZFlvdXR1YmVVcmxPcklkKCBvcHRpb25zLnZpZGVvSWQgKSApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggIXRoaXMucGxheWVyIHx8ICF0aGlzLnBsYXllci5sb2FkVmlkZW9CeUlkICkge1xyXG4gICAgICBzZXRUaW1lb3V0KCAoKSA9PiB0aGlzLmNoYW5nZVZpZGVvKCBvcHRpb25zICksIDEwMCApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcmVwYXJlT3B0aW9ucyggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMucGxheWVyLnNlZWtUbyggdGhpcy5zdGFydHNBdCwgdHJ1ZSApO1xyXG4gICAgaWYgKCB0aGlzLmlzUGxheWluZyApIHtcclxuICAgICAgdGhpcy5wbGF5V2l0aG91dFRyaWdnZXJFdmVudHMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGF1c2VXaXRob3V0VHJpZ2dlckV2ZW50cygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwcmVwYXJlT3B0aW9ucyggb3B0aW9uczogWW91dHViZUlmcmFtZUNoYW5nZVZpZGVvT3B0aW9ucyApIHtcclxuICAgIHRoaXMuaWQgPSBvcHRpb25zLmlmcmFtZUlkO1xyXG4gICAgdGhpcy5fdmlkZW9JZCA9IG9wdGlvbnMudmlkZW9JZDtcclxuICAgIHRoaXMuc3RhcnRzQXQgPSBvcHRpb25zLnN0YXJ0c0F0ID8/IHRoaXMuc3RhcnRzQXQ7XHJcblxyXG4gICAgdGhpcy5sb2FkVmlkZW8oKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9hZFZpZGVvKCkge1xyXG4gICAgdGhpcy5wbGF5ZXIubG9hZFZpZGVvQnlJZCgge1xyXG4gICAgICAndmlkZW9JZCc6IHRoaXMudmlkZW9JZCxcclxuICAgICAgJ3N0YXJ0U2Vjb25kcyc6IHRoaXMuc3RhcnRzQXQsXHJcbiAgICAgICdzdWdnZXN0ZWRRdWFsaXR5JzogJ2hpZ2hyZXMnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5zZXRWaWRlb0luZm8oKS50aGVuKCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0RXh0ZXJuYWxIVE1MRWxlbWVudHNBdHRyaWJ1dGVzKCk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuXHJcbiAgcHVibGljIGFzeW5jIGdldFZpZGVvSW5mbygpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgaGFuZGxlUHJvbWlzZTxSZXNwb25zZT4oIGZldGNoKCBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vb2VtYmVkP3VybD0keyB0aGlzLnZpZGVvVVJMIH0mZm9ybWF0PWpzb25gICkgKTtcclxuXHJcbiAgICBpZiAoIHJlc3BvbnNlLmVycm9yICkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCByZXNwb25zZS5lcnJvciApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmRhdGEoKS5qc29uKCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgb25QbGF5ZXJSZWFkeSggZXZlbnQ6IGFueSApIHtcclxuICAgIGlmICggdGhpcy5fc3RhcnRNdXRlZCApIHtcclxuICAgICAgdGhpcy5wbGF5ZXIubXV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIFlvdXR1YmVJZnJhbWUuX2FycllvdXR1YmVJZnJhbWVJZFJlYWR5LnB1c2goIHRoaXMuaWQgKTtcclxuICAgIHRoaXMuX2lmcmFtZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggdGhpcy5pZCApITtcclxuXHJcbiAgICB0aGlzLnNldENsYXNzZXNJZnJhbWVQYXVzZWQoKTtcclxuXHJcbiAgICB0aGlzLnBsYXllci5zZXRQbGF5YmFja1F1YWxpdHkoICdoaWdocmVzJyApO1xyXG4gICAgdGhpcy5wbGF5ZXIuc2Vla1RvKCB0aGlzLl9zdGFydHNBdCA/PyAwLCB0cnVlICk7XHJcbiAgICB0aGlzLnBsYXllci5wYXVzZVZpZGVvKCk7XHJcbiAgICB0aGlzLl9pc1BsYXllclJlYWR5ID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmlmcmFtZXJlYWR5JywgdGhpcyApO1xyXG5cclxuICAgIFlvdXR1YmVJZnJhbWUuY2hlY2tJZkV2ZXJ5SWZyYW1lSXNSZWFkeSgpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG9uUGxheWVyU3RhdGVDaGFuZ2UoIGV2ZW50OiBhbnkgKSB7XHJcbiAgICB0aGlzLl9pc1BsYXlpbmcgPSBldmVudC5kYXRhID09PSBZb3V0dWJlSWZyYW1lLl95b3V0dWJlQVBJUmVmZXJlbmNlLlBsYXllclN0YXRlLlBMQVlJTkc7XHJcblxyXG4gICAgaWYgKCB0aGlzLl9pc1BsYXlpbmcgKSB7XHJcbiAgICAgIHRoaXMuc2V0Q2xhc3Nlc0lmcmFtZVBsYXlpbmcoKTtcclxuICAgICAgdGhpcy5fcGxheWluZ09ic2VydmVySW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCggKCkgPT4gdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25wbGF5aW5nJywgdGhpcywgdGhpcy5pc1BsYXlpbmcgKSwgMTAwICk7XHJcbiAgICB9IGVsc2UgaWYgKCB0aGlzLl9wbGF5aW5nT2JzZXJ2ZXJJbnRlcnZhbCApIHtcclxuICAgICAgdGhpcy5zZXRDbGFzc2VzSWZyYW1lUGF1c2VkKCk7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwoIHRoaXMuX3BsYXlpbmdPYnNlcnZlckludGVydmFsICk7XHJcbiAgICAgIHRoaXMuX3BsYXlpbmdPYnNlcnZlckludGVydmFsID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdwbGF5ZXJzdGF0ZWNoYW5nZScsIHRoaXMsIHRoaXMuaXNQbGF5aW5nICk7XHJcbiAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbnBsYXllcnN0YXRlY2hhbmdlJywgdGhpcywgdGhpcy5pc1BsYXlpbmcgKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBzZXRDbGFzc2VzSWZyYW1lUGxheWluZygpIHtcclxuICAgIGlmICggdGhpcy5faWZyYW1lRWxlbWVudCApIHtcclxuICAgICAgdGhpcy5faWZyYW1lRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCAneXQtcGF1c2VkJyApO1xyXG4gICAgICB0aGlzLl9pZnJhbWVFbGVtZW50LmNsYXNzTGlzdC5hZGQoICd5dC1wbGF5aW5nJyApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lmcmFtZUNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCAneXQtcGF1c2VkJyApO1xyXG4gICAgdGhpcy5faWZyYW1lQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoICd5dC1wbGF5aW5nJyApO1xyXG5cclxuICAgIHRoaXMuX2lmcmFtZVBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ3l0LXBhdXNlZCcgKTtcclxuICAgIHRoaXMuX2lmcmFtZVBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3l0LXBsYXlpbmcnICk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc2V0Q2xhc3Nlc0lmcmFtZVBhdXNlZCgpIHtcclxuICAgIGlmICggdGhpcy5faWZyYW1lRWxlbWVudCApIHtcclxuICAgICAgdGhpcy5faWZyYW1lRWxlbWVudC5jbGFzc0xpc3QuYWRkKCAneXQtcGF1c2VkJyApO1xyXG4gICAgICB0aGlzLl9pZnJhbWVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICd5dC1wbGF5aW5nJyApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lmcmFtZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCAneXQtcGF1c2VkJyApO1xyXG4gICAgdGhpcy5faWZyYW1lQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoICd5dC1wbGF5aW5nJyApO1xyXG5cclxuICAgIHRoaXMuX2lmcmFtZVBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3l0LXBhdXNlZCcgKTtcclxuICAgIHRoaXMuX2lmcmFtZVBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ3l0LXBsYXlpbmcnICk7XHJcbiAgfVxyXG5cclxuXHJcbiAgcHJvdGVjdGVkIG9uRXZlcnlZb3V0dWJlSWZyYW1lUmVhZHkoKSB7XHJcbiAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmV2ZXJ5eW91dHViZWlmcmFtZXJlYWR5JyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkaXZCbG9ja0ludGVyYWN0aW9uKCk6IEhUTUxFbGVtZW50IHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdmlkZW9VUkwoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0keyB0aGlzLnZpZGVvSWQgfWA7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBhcmVudEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lmcmFtZVBhcmVudEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlmcmFtZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgaWYgKCAhdGhpcy5faWZyYW1lRWxlbWVudCApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIklmcmFtZSB3YXMgY2FsbGVkIGJ1dCBpdCdzIG5vdCByZWFkeS5cIiApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9pZnJhbWVFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc1BsYXllclJlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzUGxheWVyUmVhZHk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGR1cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKSAtIHRoaXMuX3N0YXJ0c0F0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBwbGF5ZXJEdXJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMucGxheWVyLmdldER1cmF0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IGN1cnJlbnRUaW1lKCB0OiBudW1iZXIgKSB7XHJcbiAgICB0aGlzLnNlZWsoIHQgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgY3VycmVudFRpbWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnBsYXllci5nZXRDdXJyZW50VGltZSgpIC0gdGhpcy5fc3RhcnRzQXQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBsYXllckN1cnJlbnRUaW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgcHJvZ3Jlc3NQZXJjZW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VGltZSAvIHRoaXMuZHVyYXRpb247XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHBsYXllclByb2dyZXNzUGVyY2VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMucGxheWVyQ3VycmVudFRpbWUgLyB0aGlzLnBsYXllckR1cmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBzdGFydE11dGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0TXV0ZWQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGlzUGxheWluZygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc1BsYXlpbmc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRpbWVuc2lvbnMoKTogRGltZW5zaW9ucyB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGltZW5zaW9ucztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgc3RhcnRzQXQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBjbGFtcCggdGhpcy5fc3RhcnRzQXQsIDAsIHRoaXMuX3N0YXJ0c0F0ICk7XHJcbiAgfVxyXG4gIHB1YmxpYyBzZXQgc3RhcnRzQXQoIHZhbDogbnVtYmVyICkge1xyXG4gICAgdGhpcy5fc3RhcnRzQXQgPSBjbGFtcCggdmFsLCAwLCB2YWwgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB0b2dnbGUoKTogSU1lZGlhUGxheWVyRnVuY3Rpb25zIHtcclxuICAgIGlmICggdGhpcy5pc1BsYXlpbmcgKSB7XHJcbiAgICAgIHRoaXMucGF1c2UoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsYXkoKSB7XHJcbiAgICB0aGlzLnBsYXlXaXRob3V0VHJpZ2dlckV2ZW50cygpO1xyXG5cclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ucGxheScsIHRoaXMgKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwbGF5V2l0aG91dFRyaWdnZXJFdmVudHMoKSB7XHJcbiAgICB0aGlzLnBsYXllci5wbGF5VmlkZW8oKTtcclxuICAgIHRoaXMuX2lzUGxheWluZyA9IHRydWU7XHJcbiAgICB0aGlzLnNldENsYXNzZXNJZnJhbWVQbGF5aW5nKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGF1c2UoKSB7XHJcbiAgICB0aGlzLnBhdXNlV2l0aG91dFRyaWdnZXJFdmVudHMoKTtcclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29ucGF1c2UnLCB0aGlzICk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGF1c2VXaXRob3V0VHJpZ2dlckV2ZW50cygpIHtcclxuICAgIHRoaXMucGxheWVyLnBhdXNlVmlkZW8oKTtcclxuICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5zZXRDbGFzc2VzSWZyYW1lUGF1c2VkKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2Vlayggc2Vla1RpbWU6IG51bWJlciwgcmVsb2FkQnVmZmVyOiBib29sZWFuID0gZmFsc2UsIGNvbnNpZGVyU3RhcnRzQXQ6IGJvb2xlYW4gPSBmYWxzZSApIHtcclxuICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ29uc2VlaycsIHNlZWtUaW1lLCByZWxvYWRCdWZmZXIsIGNvbnNpZGVyU3RhcnRzQXQsIHRoaXMgKTtcclxuXHJcbiAgICBzZWVrVGltZSArPSBjb25zaWRlclN0YXJ0c0F0ID8gdGhpcy5fc3RhcnRzQXQgOiAwO1xyXG4gICAgdGhpcy5wbGF5ZXIuc2Vla1RvKCBzZWVrVGltZSwgcmVsb2FkQnVmZmVyICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBtdXRlKCkge1xyXG4gICAgdGhpcy5wbGF5ZXIubXV0ZSgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdW5tdXRlKCkge1xyXG4gICAgdGhpcy5wbGF5ZXIudW5tdXRlKCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjaGVja0lmRXZlcnlJZnJhbWVJc1JlYWR5KCkge1xyXG4gICAgY29uc3QgYXJyRXZlcnlJZnJhbWVJZCA9IFsuLi5Zb3V0dWJlSWZyYW1lLl9kaWN0WW91dHViZUlmcmFtZUJ5SWQua2V5cygpXTtcclxuICAgIGNvbnN0IGhhc0lmcmFtZU5vdFJlYWR5WWV0ID0gYXJyRXZlcnlJZnJhbWVJZC5zb21lKCByID0+ICF0aGlzLl9hcnJZb3V0dWJlSWZyYW1lSWRSZWFkeS5pbmNsdWRlcyggciApICk7XHJcblxyXG4gICAgaWYgKCAhaGFzSWZyYW1lTm90UmVhZHlZZXQgKSB7XHJcbiAgICAgIHRoaXMuYXJyT2JqZWN0VG9TZXRPbkV2ZXJ5SWZyYW1lUmVhZHkuZm9yRWFjaCggbyA9PiBvLnNldHVwKCBZb3V0dWJlSWZyYW1lLl9kaWN0WW91dHViZUlmcmFtZUJ5SWQgKSApO1xyXG5cclxuICAgICAgWW91dHViZUlmcmFtZS5fZGljdFlvdXR1YmVJZnJhbWVCeUlkLmZvckVhY2goICggdmFsLCBrZXkgKSA9PiB7XHJcbiAgICAgICAgdmFsLm9uRXZlcnlZb3V0dWJlSWZyYW1lUmVhZHkoKTtcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFlvdXR1YmVJZnJhbWVFbGVtZW50KCB7IGlmcmFtZUlkLCBjbGFzc0xpc3QgfTogeyBpZnJhbWVJZDogc3RyaW5nOyBjbGFzc0xpc3Q/OiBzdHJpbmdbXTsgfSApIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XHJcbiAgICBjb250YWluZXJEaXYuY2xhc3NMaXN0LmFkZCggJ3l0LWlmcmFtZS1jb250YWluZXInICk7XHJcbiAgICBpZiAoIGNsYXNzTGlzdCApIHtcclxuICAgICAgY29udGFpbmVyRGl2LmNsYXNzTGlzdC5hZGQoIC4uLmNsYXNzTGlzdCApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRhaW5lckRpdi5pZCA9IGBjb250YWluZXJZb3V0dWJlSWZyYW1lJHsgaWZyYW1lSWQgfWA7XHJcbiAgICBjb250YWluZXJEaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCAnYWZ0ZXJiZWdpbicsIHRlbXBsYXRlQmFja2dyb3VuZFlvdXR1YmVJZnJhbWVFbGVtZW50KCBpZnJhbWVJZCApICk7XHJcbiAgICByZXR1cm4gY29udGFpbmVyRGl2O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldHVwUGFyZW50RnJvbVlvdXR1YmVJZnJhbWUoIHsgcGFyZW50RWxlbWVudCwgaWZyYW1lQ29udGFpbmVyIH06IHsgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQ7IGlmcmFtZUNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7IH0gKSB7XHJcbiAgICBjb25zdCBpZnJhbWVQYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudCA/PyBkb2N1bWVudC5ib2R5O1xyXG4gICAgaWZyYW1lUGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCAneXQtaWZyYW1lLXBhcmVudCcgKTtcclxuICAgIGlmcmFtZVBhcmVudEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCAnYWZ0ZXJiZWdpbicsIGlmcmFtZUNvbnRhaW5lciApO1xyXG4gICAgcmV0dXJuIGlmcmFtZVBhcmVudEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBTZXRzIGRpdiB0byBibG9jayBpbnRlcmFjdGlvbiwgdG9wIGRpdiwgY29udGFpbmVyIGFuZCBhbnkgb3RoZXIgZWxlbWVudCB0aGF0IGlzIG5vdCB0aGUgbWFpbiBpZnJhbWVcclxuICBwcml2YXRlIHNldEV4dGVybmFsSFRNTEVsZW1lbnRzKCkge1xyXG4gICAgdGhpcy5jcmVhdGVJbnZpc2libGVEaXZUb3AoKTtcclxuICAgIHRoaXMuY3JlYXRlSW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbigpO1xyXG5cclxuICAgIHRoaXMuc2V0RXh0ZXJuYWxIVE1MRWxlbWVudHNBdHRyaWJ1dGVzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldEV4dGVybmFsSFRNTEVsZW1lbnRzQXR0cmlidXRlcygpIHtcclxuICAgIHRoaXMuc2V0SWZyYW1lQ29udGFpbmVyQXR0cmlidXRlcygpO1xyXG4gICAgdGhpcy5zZXRUb3BEaXZBdHRyaWJ1dGVzKCk7XHJcbiAgICB0aGlzLnNldERpdkJsb2NrSW50ZXJhY3Rpb25BdHRyaWJ1dGVzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZUludmlzaWJsZURpdlRvcCgpIHtcclxuICAgIHRoaXMudG9wRGl2ID0gWW91dHViZUlmcmFtZS5nZXRJbnZpc2libGVUb3BEaXYoIHRoaXMgKTtcclxuICAgIHRoaXMudG9wRGl2LnN0eWxlLnpJbmRleCA9ICc5OTAnO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVJbnZpc2libGVEaXZCbG9ja0ludGVyYWN0aW9uKCkge1xyXG4gICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbiA9IFlvdXR1YmVJZnJhbWUuZ2V0SW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbiggdGhpcyApO1xyXG5cclxuICAgIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24uc3R5bGUuZGlzcGxheSA9IHRoaXMuX2Jsb2NrSW50ZXJhY3Rpb24gPyAnYmxvY2snIDogJ25vbmUnO1xyXG4gICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbi5zdHlsZS56SW5kZXggPSAnOTk1JztcclxuXHJcbiAgICB0aGlzLl9kaXZCbG9ja0ludGVyYWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsICggZXZ0ICkgPT4ge1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmNsaWNraW50ZXJhY3Rpb25ibG9ja2VkJywgdGhpcywgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbiApO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmludGVyYWN0aW9uYmxvY2tlZCcsIHRoaXMsIHRoaXMuX2RpdkJsb2NrSW50ZXJhY3Rpb24gKTtcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0RGl2QmxvY2tJbnRlcmFjdGlvbkF0dHJpYnV0ZXMoKSB7XHJcbiAgICBpZiAoICF0aGlzLmRpdkJsb2NrSW50ZXJhY3Rpb24gKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCggdGhpcy5kaXZCbG9ja0ludGVyYWN0aW9uLCB0aGlzLl92aWRlb0luZm9BdHRyaWJ1dGVMaXN0ICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldElmcmFtZUNvbnRhaW5lckF0dHJpYnV0ZXMoKSB7XHJcbiAgICBpZiAoICF0aGlzLl9pZnJhbWVDb250YWluZXIgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBdHRyaWJ1dGVMaXN0Rm9yRWxlbWVudCggdGhpcy5faWZyYW1lQ29udGFpbmVyLCB0aGlzLl92aWRlb0luZm9BdHRyaWJ1dGVMaXN0ICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldFRvcERpdkF0dHJpYnV0ZXMoKSB7XHJcbiAgICBpZiAoICF0aGlzLnRvcERpdiApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEF0dHJpYnV0ZUxpc3RGb3JFbGVtZW50KCB0aGlzLnRvcERpdiwgdGhpcy5fdmlkZW9JbmZvQXR0cmlidXRlTGlzdCApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCBibG9ja0ludGVyYWN0aW9uKCB2YWw6IGJvb2xlYW4gKSB7XHJcbiAgICB0aGlzLl9ibG9ja0ludGVyYWN0aW9uID0gdmFsO1xyXG5cclxuICAgIGlmICggdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbiApIHtcclxuICAgICAgdGhpcy5fZGl2QmxvY2tJbnRlcmFjdGlvbi5zdHlsZS5kaXNwbGF5ID0gdGhpcy5fYmxvY2tJbnRlcmFjdGlvbiA/ICdibG9jaycgOiAnbm9uZSc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5pdFBsYXllcigpIHtcclxuICAgIHRoaXMucGxheWVyID0gbmV3IFlvdXR1YmVJZnJhbWUuX3lvdXR1YmVBUElSZWZlcmVuY2UuUGxheWVyKCB0aGlzLmlkLCB7XHJcbiAgICAgIHZpZGVvSWQ6IHRoaXMudmlkZW9JZCxcclxuICAgICAgd2lkdGg6IHRoaXMuZGltZW5zaW9ucy53aWR0aCxcclxuICAgICAgaGVpZ2h0OiB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0LFxyXG4gICAgICBwbGF5ZXJWYXJzOiB7XHJcbiAgICAgICAgJ3JlbCc6IDAsICAgICAgICAgICAgLy8gRGVzYXRpdmEgdsOtZGVvcyByZWxhY2lvbmFkb3NcclxuICAgICAgICAnaXZfbG9hZF9wb2xpY3knOiAzLCAvLyBEZXNhdGl2YSBzdWdlc3TDtWVzIGRlIHbDrWRlb3MgZHVyYW50ZSBhIHBhdXNhXHJcbiAgICAgICAgJ3Nob3dpbmZvJzogMCwgICAgICAgLy8gUmVtb3ZlIGluZm9ybWHDp8O1ZXMgZG8gdsOtZGVvICh0w610dWxvLCBldGMuKVxyXG4gICAgICAgICdjb250cm9scyc6IDAsICAgICAgIC8vIFJlbW92ZSBvcyBjb250cm9sZXMgZG8gcGxheWVyXHJcbiAgICAgICAgJ2F1dG9wbGF5JzogMCAgICAgICAgLy8gRGVzYXRpdmEgYSByZXByb2R1w6fDo28gYXV0b23DoXRpY2FcclxuICAgICAgfSxcclxuICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgJ29uUmVhZHknOiB0aGlzLm9uUGxheWVyUmVhZHkuYmluZCggdGhpcyApLFxyXG4gICAgICAgICdvblN0YXRlQ2hhbmdlJzogdGhpcy5vblBsYXllclN0YXRlQ2hhbmdlLmJpbmQoIHRoaXMgKVxyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgc3RhdGljIF95b3V0dWJlQVBJUmVmZXJlbmNlOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgZ2V0IF92aWRlb0luZm9BdHRyaWJ1dGVMaXN0KCk6IFtzdHJpbmcsIHN0cmluZ11bXSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBbJ3l0LWlmcmFtZS1pZCcsIHRoaXMuaWRdLFxyXG4gICAgICBbJ3l0LWlmcmFtZS12aWRlby1uYW1lJywgdGhpcy52aWRlb05hbWVdLFxyXG4gICAgICBbJ3l0LWlmcmFtZS12aWRlby1jaGFubmVsLW5hbWUnLCB0aGlzLmNoYW5uZWxOYW1lXSxcclxuICAgICAgWyd5dC1pZnJhbWUtdmlkZW8tdGh1bWItdXJsJywgdGhpcy52aWRlb1RodW1iXSxcclxuICAgICAgWyd5dC1pZnJhbWUtdmlkZW8tY2hhbm5lbC11cmwnLCB0aGlzLmNoYW5uZWxVUkxdXHJcbiAgICBdXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYnVpbGRJZnJhbWVzKCkge1xyXG4gICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdzY3JpcHQnICk7XHJcbiAgICB0YWcuaWQgPSAneXRJZnJhbWVBUEknO1xyXG5cclxuICAgIHRhZy5zcmMgPSBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGlcIjtcclxuICAgIHZhciBmaXJzdFNjcmlwdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnc2NyaXB0JyApWzBdO1xyXG4gICAgaWYgKCBmaXJzdFNjcmlwdFRhZyAmJiBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlICkge1xyXG4gICAgICBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggdGFnLCBmaXJzdFNjcmlwdFRhZyApO1xyXG4gICAgfVxyXG5cclxuICAgIHdhaXRVbnRpbEVsZW1lbnRFeGlzdHMoICcjeXRJZnJhbWVBUEknICkudGhlbiggKCkgPT4ge1xyXG4gICAgICBwb2xsRm9yVmFyaWFibGU8YW55PiggJ1lUJyxcclxuICAgICAgICAoIHZhbHVlOiBhbnkgKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlLlBsYXllciA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICAmJiB2YWx1ZS5QbGF5ZXIucHJvdG90eXBlXHJcbiAgICAgICAgICAgICYmIHZhbHVlLlBsYXllci5wcm90b3R5cGUuY29uc3RydWN0b3IgPT09IHZhbHVlLlBsYXllclxyXG4gICAgICAgICAgICAmJiB2YWx1ZS5sb2FkZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoIHZhbHVlICkgPT4ge1xyXG4gICAgICAgICAgWW91dHViZUlmcmFtZS5feW91dHViZUFQSVJlZmVyZW5jZSA9IHZhbHVlO1xyXG4gICAgICAgICAgWW91dHViZUlmcmFtZS5zZXRZb3V0dWJlSWZyYW1lRWxlbWVudHMoKTtcclxuICAgICAgICB9ICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0WW91dHViZUlmcmFtZUVsZW1lbnRzKCkge1xyXG4gICAgdGhpcy5fZGljdFlvdXR1YmVJZnJhbWVCeUlkLmZvckVhY2goICggdmFsLCBrZXkgKSA9PiB7XHJcbiAgICAgIHZhbC5zZXRFeHRlcm5hbEhUTUxFbGVtZW50cygpO1xyXG4gICAgICB2YWwuaW5pdFBsYXllcigpO1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEludmlzaWJsZVRvcERpdiggeXRJZnJhbWU6IFlvdXR1YmVJZnJhbWUgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUludmlzaWJsZURpdkFib3ZlUGFyZW50KCB7XHJcbiAgICAgIHBhcmVudEVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCB5dElmcmFtZS5pZCApIS5wYXJlbnRFbGVtZW50ISxcclxuICAgICAgaWQ6IGBpbnZpc2libGVUb3BEaXZIb2xkVG9EcmFnJHsgeXRJZnJhbWUuaWQgfWAsXHJcbiAgICAgIHBvc2l0aW9uOiB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG4gICAgICBkaW1lbnNpb25zOiB7IHdpZHRoOiB5dElmcmFtZS5kaW1lbnNpb25zLndpZHRoLCBoZWlnaHQ6IHl0SWZyYW1lLmRpbWVuc2lvbnMuaGVpZ2h0ICogMC4yIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG5cclxuICBzdGF0aWMgZ2V0SW52aXNpYmxlRGl2QmxvY2tJbnRlcmFjdGlvbiggeXRJZnJhbWU6IFlvdXR1YmVJZnJhbWUgKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgZWxlbWVudEludmlzaWJsZURpdiA9IGNyZWF0ZUludmlzaWJsZURpdkFib3ZlUGFyZW50KCB7XHJcbiAgICAgIHBhcmVudEVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCB5dElmcmFtZS5pZCApIS5wYXJlbnRFbGVtZW50ISxcclxuICAgICAgaWQ6IGBpbnZpc2libGVEaXZCbG9ja0ludGVyYWN0aW9uJHsgeXRJZnJhbWUuaWQgfWAsXHJcbiAgICAgIHBvc2l0aW9uOiB7IHRvcDogMCwgbGVmdDogMCB9LFxyXG4gICAgICBkaW1lbnNpb25zOiB7IHdpZHRoOiB5dElmcmFtZS5kaW1lbnNpb25zLndpZHRoLCBoZWlnaHQ6IHl0SWZyYW1lLmRpbWVuc2lvbnMuaGVpZ2h0IH1cclxuICAgIH0gKTtcclxuXHJcbiAgICBlbGVtZW50SW52aXNpYmxlRGl2LmNsYXNzTGlzdC5hZGQoICd5dC1kaXYtYmxvY2staW50ZXJhY3Rpb24nICk7XHJcblxyXG4gICAgcmV0dXJuIGVsZW1lbnRJbnZpc2libGVEaXY7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgWW91dHViZUlmcmFtZVN3aXRjaGVyLCBZb3V0dWJlSWZyYW1lU3luYyB9OyIsIlxyXG5pbnRlcmZhY2UgU3RyaW5nIHtcclxuICB0cnVuY2F0ZSggbWF4OiBudW1iZXIsIGRlY29yYXRvcjogc3RyaW5nICk6IHN0cmluZztcclxuICByZW1vdmVBY2NlbnRzKCk6IHN0cmluZztcclxuICBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoKTogc3RyaW5nO1xyXG4gIHplcm9CZWZvcmUoKTogc3RyaW5nO1xyXG4gIGlzTnVsbE9yRW1wdHkoKTogYm9vbGVhbjtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS5pc051bGxPckVtcHR5ID0gZnVuY3Rpb24gKCk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiB0eXBlb2YgdGhpcyAhPT0gJ3N0cmluZycgJiYgIXRoaXMgJiYgdGhpcyAhPT0gJyc7XHJcbn07XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLnRydW5jYXRlID0gZnVuY3Rpb24gKCBtYXg6IG51bWJlciwgZGVjb3JhdG9yOiBzdHJpbmcgPSAnLi4uJyApOiBzdHJpbmcge1xyXG4gIHJldHVybiAoIHRoaXMubGVuZ3RoID4gbWF4ID8gdGhpcy5zdWJzdHJpbmcoIDAsIG1heCApICsgZGVjb3JhdG9yIDogdGhpcyApLnRvU3RyaW5nKCk7XHJcbn07XHJcblxyXG5TdHJpbmcucHJvdG90eXBlLnJlbW92ZUFjY2VudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRoaXMubm9ybWFsaXplKCAnTkZEJyApLnJlcGxhY2UoIC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiICk7XHJcbn1cclxuXHJcblN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gZnVuY3Rpb24gKCk6IHN0cmluZyB7XHJcbiAgaWYgKCB0eXBlb2YgdGhpcyAhPT0gJ3N0cmluZycgKSB7XHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcy5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zdWJzdHJpbmcoIDEgKTtcclxufVxyXG5cclxuU3RyaW5nLnByb3RvdHlwZS56ZXJvQmVmb3JlID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0aGlzLnBhZFN0YXJ0KCAyLCAnMCcgKTtcclxufSIsIlxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RXZlbnRMaXN0ZW5lciB7XHJcbiAgcHVibGljIGV2ZW50c0J5TmFtZTogTWFwPHN0cmluZywgRnVuY3Rpb25bXT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyKCBldmVudE5hbWU6IHN0cmluZywgZXZlbnQ6IEZ1bmN0aW9uICkge1xyXG4gICAgaWYgKCAhdGhpcy5ldmVudHNCeU5hbWUuaGFzKCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSApICkge1xyXG4gICAgICB0aGlzLmV2ZW50c0J5TmFtZS5zZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpLCBbZXZlbnRdICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmV2ZW50c0J5TmFtZS5nZXQoIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpICkhLnB1c2goIGV2ZW50ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RXZlbnRzQnlOYW1lKCBldmVudE5hbWU6IHN0cmluZyApOiBGdW5jdGlvbltdIHtcclxuICAgIGlmICggIXRoaXMuZXZlbnRzQnlOYW1lLmhhcyggZXZlbnROYW1lLnRvTG93ZXJDYXNlKCkgKSApIHtcclxuICAgICAgdGhpcy5ldmVudHNCeU5hbWUuc2V0KCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSwgW10gKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5ldmVudHNCeU5hbWUuZ2V0KCBldmVudE5hbWUudG9Mb3dlckNhc2UoKSApITtcclxuICB9XHJcblxyXG5cclxuICBwdWJsaWMgY2FsbEV2ZW50c0J5TmFtZSggZXZlbnROYW1lOiBzdHJpbmcsIC4uLmV2ZW50QXJnczogYW55W10gKTogdm9pZCB7XHJcbiAgICB0aGlzLmdldEV2ZW50c0J5TmFtZSggZXZlbnROYW1lICkuZm9yRWFjaCggZSA9PiBlKCAuLi5ldmVudEFyZ3MgKSApO1xyXG4gIH1cclxufSIsImltcG9ydCAnLi4vRXh0ZW5zaW9ucy9TdHJpbmdFeHRlbnNpb25zJztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudEZyb21IVE1MLCBoaWRlRWxlbWVudCB9IGZyb20gJy4vRE9NVG9vbHMnO1xyXG5pbXBvcnQgeyBnZXRGaWxlRXh0ZW5zaW9uIH0gZnJvbSAnLi9GaWxlVG9vbHMnO1xyXG5pbXBvcnQgeyBBdWRpb0NvbXBvbmVudCwgQ3JlYXRlQXVkaW9Db21wb25lbnRPcHRpb25zIH0gZnJvbSAnLi4vQ29tcG9uZW50cy9BdWRpb0NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgdHlwZSBBdWRpb1BsYXllckNvbmZpZyA9IHtcclxuICBpZD86IHN0cmluZztcclxuICBhdXRvUGxheT86IGJvb2xlYW47XHJcbiAgYXV0b3BsYXk/OiBib29sZWFuO1xyXG4gIG11dGVkPzogYm9vbGVhbjtcclxuICBsb29wPzogYm9vbGVhbjtcclxuICBwcmVsb2FkPzogJ2F1dG8nIHwgJ21ldGFkYXRhJyB8ICdub25lJztcclxuICBvbnBsYXk/OiAoIGF1ZGlvRWxlbWVudDogSFRNTEF1ZGlvRWxlbWVudCApID0+IHZvaWQ7XHJcbiAgb25wYXVzZT86ICggYXVkaW9FbGVtZW50OiBIVE1MQXVkaW9FbGVtZW50ICkgPT4gdm9pZDtcclxuICBvblBsYXk/OiAoIGF1ZGlvRWxlbWVudDogSFRNTEF1ZGlvRWxlbWVudCApID0+IHZvaWQ7XHJcbiAgb25QYXVzZT86ICggYXVkaW9FbGVtZW50OiBIVE1MQXVkaW9FbGVtZW50ICkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUF1ZGlvQ29tcG9uZW50T25Cb2R5KCBvcHRpb25zOiBDcmVhdGVBdWRpb0NvbXBvbmVudE9wdGlvbnMgKSB7XHJcbiAgcmV0dXJuIGF3YWl0IEF1ZGlvQ29tcG9uZW50LmNyZWF0ZUF1ZGlvQ29tcG9uZW50T25Cb2R5KCBvcHRpb25zICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZpc2libGVQbGF5ZXIoIGFyclNvdXJjZXM6IHN0cmluZ1tdLCBwbGF5ZXJDb25maWc/OiBBdWRpb1BsYXllckNvbmZpZyApIHtcclxuICBjb25zdCBhdWRpb0VsZW1lbnQgPSBnZXRFbGVtZW50RnJvbUhUTUwoIGF1ZGlvRWxlbWVudEhUTUwoIGFyclNvdXJjZXMsIHBsYXllckNvbmZpZyApICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEVsZW1lbnQoICdhZnRlcmJlZ2luJywgYXVkaW9FbGVtZW50ICk7XHJcbiAgaGlkZUVsZW1lbnQoIGF1ZGlvRWxlbWVudCApO1xyXG4gIHJldHVybiBhdWRpb0VsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdWRpb0VsZW1lbnRIVE1MKCBhcnJTb3VyY2VzOiBzdHJpbmdbXSwgcGxheWVyQ29uZmlnPzogQXVkaW9QbGF5ZXJDb25maWcgKSB7XHJcbiAgcmV0dXJuIGA8YXVkaW8gY29udHJvbHMgJHsgcGxheWVyQ29uZmlnID8gYXVkaW9FbGVtZW50UGFyYW1zQnlQbGF5ZXJDb25maWcoIHBsYXllckNvbmZpZyApIDogXCJcIiB9PlxyXG4gICAgJHsgYXJyU291cmNlcy5tYXAoIHNyYyA9PiBzb3VyY2VFbGVtZW50SFRNTCggc3JjICkgKS5yZWR1Y2UoICggYWNjLCBuZXh0ICkgPT4gYWNjICsgbmV4dCwgJycgKSB9XHJcbiAgPC9hdWRpbz5gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc291cmNlRWxlbWVudEhUTUwoIHNyYzogc3RyaW5nICkge1xyXG4gIHJldHVybiBgPHNvdXJjZSBzcmM9XCIkeyBzcmMgfVwiIHR5cGU9XCJhdWRpby8keyBnZXRGaWxlRXh0ZW5zaW9uKCBzcmMgKSB9XCI+YDtcclxufVxyXG5cclxuZnVuY3Rpb24gYXVkaW9FbGVtZW50UGFyYW1zQnlQbGF5ZXJDb25maWcoIHBsYXllckNvbmZpZzogQXVkaW9QbGF5ZXJDb25maWcgKSB7XHJcbiAgY29uc3QgcGFyYW1JZCA9IHBsYXllckNvbmZpZy5pZCA/ICdpZD1cIicgKyBwbGF5ZXJDb25maWcuaWQgKyAnXCInIDogJyc7XHJcbiAgY29uc3QgcGFyYW1BdXRvUGxheSA9IHBsYXllckNvbmZpZy5hdXRvUGxheSB8fCBwbGF5ZXJDb25maWcuYXV0b3BsYXkgPyAnYXV0b3BsYXknIDogJyc7XHJcbiAgY29uc3QgcGFyYW1NdXRlZCA9IHBsYXllckNvbmZpZy5tdXRlZCA/ICdtdXRlZCcgOiAnJztcclxuICBjb25zdCBwYXJhbUxvb3AgPSBwbGF5ZXJDb25maWcubG9vcCA/ICdsb29wJyA6ICcnO1xyXG4gIGNvbnN0IHBhcmFtUHJlbG9hZCA9IHBsYXllckNvbmZpZy5wcmVsb2FkID8gJ3ByZWxvYWQ9XCInICsgcGxheWVyQ29uZmlnLnByZWxvYWQgKyAnXCInIDogJyc7XHJcblxyXG4gIHJldHVybiBgICR7IHBhcmFtSWQgfSAkeyBwYXJhbUF1dG9QbGF5IH0gJHsgcGFyYW1NdXRlZCB9ICR7IHBhcmFtTG9vcCB9ICR7IHBhcmFtUHJlbG9hZCB9YC50cmltRW5kKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBsYXlCdXR0b25FbGVtZW50KCBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQsIHBsYXllckNvbmZpZz86IEF1ZGlvUGxheWVyQ29uZmlnICkge1xyXG4gIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnYnV0dG9uJyApO1xyXG4gIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3BsYXktYnV0dG9uJyApO1xyXG5cclxuICBzZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICBpZiAoIGF1ZGlvRWxlbWVudC5wYXVzZWQgKSB7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCggJ3BhdXNlZCcgKTtcclxuICAgIH1cclxuICB9LCAzMDAgKTtcclxuXHJcbiAgYnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnY2xpY2snLCAoKSA9PiB7XHJcbiAgICBpZiAoIGF1ZGlvRWxlbWVudC5wYXVzZWQgKSB7XHJcbiAgICAgIGF1ZGlvRWxlbWVudC5wbGF5KCk7XHJcbiAgICAgIGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSggJ3BhdXNlZCcgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGF1ZGlvRWxlbWVudC5wYXVzZSgpO1xyXG4gICAgICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdwYXVzZWQnICk7XHJcbiAgICB9XHJcbiAgfSApO1xyXG5cclxuICBzZXRBdWRpb0VsZW1lbnRQbGF5UGF1c2VFdmVudHMoIGJ1dHRvbkVsZW1lbnQsIGF1ZGlvRWxlbWVudCwgcGxheWVyQ29uZmlnICk7XHJcblxyXG4gIHJldHVybiBidXR0b25FbGVtZW50O1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gc2V0QXVkaW9FbGVtZW50UGxheVBhdXNlRXZlbnRzKCBidXR0b25FbGVtZW50OiBIVE1MQnV0dG9uRWxlbWVudCwgYXVkaW9FbGVtZW50OiBIVE1MQXVkaW9FbGVtZW50LCBwbGF5ZXJDb25maWc/OiBBdWRpb1BsYXllckNvbmZpZyApIHtcclxuICBhdWRpb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3BsYXknLCAoKSA9PiB7XHJcbiAgICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoICdwYXVzZWQnICk7XHJcbiAgICBpZiAoIHBsYXllckNvbmZpZyAmJiBwbGF5ZXJDb25maWcub25QbGF5ICkge1xyXG4gICAgICBwbGF5ZXJDb25maWcub25QbGF5KCBhdWRpb0VsZW1lbnQgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIHBsYXllckNvbmZpZyAmJiBwbGF5ZXJDb25maWcub25wbGF5ICkge1xyXG4gICAgICBwbGF5ZXJDb25maWcub25wbGF5KCBhdWRpb0VsZW1lbnQgKTtcclxuICAgIH1cclxuICB9ICk7XHJcblxyXG4gIGF1ZGlvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncGF1c2UnLCAoKSA9PiB7XHJcbiAgICBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQoICdwYXVzZWQnICk7XHJcbiAgICBpZiAoIHBsYXllckNvbmZpZyAmJiBwbGF5ZXJDb25maWcub25QYXVzZSApIHtcclxuICAgICAgcGxheWVyQ29uZmlnLm9uUGF1c2UoIGF1ZGlvRWxlbWVudCApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggcGxheWVyQ29uZmlnICYmIHBsYXllckNvbmZpZy5vbnBhdXNlICkge1xyXG4gICAgICBwbGF5ZXJDb25maWcub25wYXVzZSggYXVkaW9FbGVtZW50ICk7XHJcbiAgICB9XHJcbiAgfSApO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBsYXlCdXR0b25DU1MoKSB7XHJcbiAgcmV0dXJuIGBcclxuICAgIC5wbGF5LWJ1dHRvbiB7XHJcbiAgICAgIG1hcmdpbjogMDtcclxuICAgICAgcGFkZGluZzogMDtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgYm9yZGVyOiAwO1xyXG4gICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgd2lkdGg6IDA7XHJcbiAgICAgIGhlaWdodDogMzRweDtcclxuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjMjAyMDIwO1xyXG4gICAgICB0cmFuc2l0aW9uOiAxMDBtcyBhbGwgZWFzZTtcclxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICBib3JkZXItc3R5bGU6IGRvdWJsZTtcclxuICAgICAgYm9yZGVyLXdpZHRoOiAwcHggMCAwcHggMzBweDtcclxuICAgIH1cclxuXHJcbiAgICAucGxheS1idXR0b24ucGF1c2VkIHtcclxuICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICAgICAgYm9yZGVyLXdpZHRoOiAyM3B4IDBweCAyM3B4IDM0cHg7XHJcbiAgICB9XHJcblxyXG4gICAgLnBsYXktYnV0dG9uOmhvdmVyIHtcclxuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjNDA0MDQwO1xyXG4gICAgfVxyXG4gIGA7XHJcbn1cclxuXHJcbmV4cG9ydCB7IENyZWF0ZUF1ZGlvQ29tcG9uZW50T3B0aW9ucyB9OyIsImltcG9ydCB7IERpbWVuc2lvbnMsIFBvaW50MkQsIGxlcnAsIHJlZ2V4TnVtYmVyUGF0dGVybiwgcm90YXRlQ29vcmRpbmF0ZXMsIHJvdGF0ZUNvb3JkaW5hdGVzRnJvbVBvaW50MkQgfSBmcm9tICcuL01hdGhUb29scyc7XHJcbmltcG9ydCB7IHRvUGhvbmVOdW1iZXIgfSBmcm9tICcuL1N0cmluZ1Rvb2xzJztcclxuaW1wb3J0IHsgQ29sbGlzaW9uRGlyZWN0aW9uQ2hlY2ssIEJvcmRlckRpc3RhbmNlIH0gZnJvbSAnLi4vRXh0cmFzL0NvbGxpc2lvbkV2ZW50cy9UeXBlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBLZXlib2FyZEV2ZW50Q2FsbGJhY2sgPSAoIGV2dDogS2V5Ym9hcmRFdmVudCApID0+IHZvaWQ7XHJcbmV4cG9ydCBjb25zdCByZWdleFJlbW92ZVRyYW5zbGF0ZUZyb21UcmFuc2Zvcm0gPSAvdHJhbnNsYXRlXFwoW14pXSpcXCkvZztcclxuZXhwb3J0IGNvbnN0IHJlZ2V4R3JvdXBSb3RhdGVWYWx1ZSA9IC9yb3RhdGVcXCgoLT9cXGQrXFwuP1xcZCopZGVnXFwpLztcclxuZXhwb3J0IGNvbnN0IHJlZ2V4R3JvdXBSb3RhdGVYVmFsdWUgPSAvcm90YXRlWFxcKCgtP1xcZCtcXC4/XFxkKilkZWdcXCkvO1xyXG5leHBvcnQgY29uc3QgcmVnZXhHcm91cFJvdGF0ZVlWYWx1ZSA9IC9yb3RhdGVZXFwoKC0/XFxkK1xcLj9cXGQqKWRlZ1xcKS87XHJcbmV4cG9ydCBjb25zdCByZWdleEdyb3VwUm90YXRlWlZhbHVlID0gL3JvdGF0ZVpcXCgoLT9cXGQrXFwuP1xcZCopZGVnXFwpLztcclxuXHJcbmV4cG9ydCBjb25zdCBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2UgPSBuZXcgTWFwPHN0cmluZywgS2V5Ym9hcmRFdmVudENhbGxiYWNrW10+KCk7XHJcbmV4cG9ydCBjb25zdCBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdCA9IG5ldyBNYXA8c3RyaW5nLCBLZXlib2FyZEV2ZW50Q2FsbGJhY2tbXT4oKTtcclxuZXhwb3J0IGNvbnN0IGRpY3RLZXlzQnlBY3Rpb25LZXl1cCA9IG5ldyBNYXA8c3RyaW5nLCBLZXlib2FyZEV2ZW50Q2FsbGJhY2tbXT4oKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFjdGlvbktleSggeyBrZXksIGtleWRvd246IGV2ZW50S2V5ZG93biwga2V5dXA6IGV2ZW50S2V5dXAsIGV4ZWN1dGVPbmx5T25jZSA9IHRydWUgfTogeyBrZXk6IHN0cmluZzsga2V5ZG93bjogS2V5Ym9hcmRFdmVudENhbGxiYWNrOyBrZXl1cD86IEtleWJvYXJkRXZlbnRDYWxsYmFjazsgZXhlY3V0ZU9ubHlPbmNlPzogYm9vbGVhbjsgfSApIHtcclxuICBpZiAoIGV4ZWN1dGVPbmx5T25jZSApIHtcclxuICAgIGFkZEFjdGlvbktleVJ1bk9uY2UoIGtleSwgZXZlbnRLZXlkb3duLCBldmVudEtleXVwICk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBhZGRBY3Rpb25LZXlSdW5PblJlcGVhdCgga2V5LCBldmVudEtleWRvd24sIGV2ZW50S2V5dXAgKTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU2FmZVByb21pc2U8VD4gPSB7XHJcbiAgZGF0YTogKCkgPT4gVDtcclxuICBlcnJvcjogRXJyb3IgfCBudWxsO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlUHJvbWlzZTxUPiggcHJvbWlzZTogUHJvbWlzZTxUPiApOiBQcm9taXNlPFNhZmVQcm9taXNlPFQ+PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwcm9taXNlO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRhdGE6ICgpID0+IGRhdGEsXHJcbiAgICAgIGVycm9yOiBudWxsXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKCBlcnJvciApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoIGVycm9yICk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZGF0YTogKCkgPT4geyB0aHJvdyBuZXcgRXJyb3IoIFwiQ291bGRuJ3QgZmV0Y2gsIGNoZWNrIFNhZmVQcm9taXNlLmVycm9yIGZvciBkZXRhaWxzLlwiICk7IH0sXHJcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoIFN0cmluZyggZXJyb3IgKSApXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRZb3V0dWJlVXJsT3JJZCggaW5wdXQ6IHN0cmluZyApOiBib29sZWFuIHtcclxuICBjb25zdCB1cmxQYXR0ZXJuID0gL14oaHR0cChzKT86XFwvXFwvKT8oKHcpezN9Lik/eW91dHUoYmV8LmJlKT8oXFwuY29tKT9cXC8uKy87XHJcbiAgY29uc3QgaWRQYXR0ZXJuID0gL15bYS16QS1aMC05Xy1dezExfSQvO1xyXG5cclxuICByZXR1cm4gdXJsUGF0dGVybi50ZXN0KCBpbnB1dCApIHx8IGlkUGF0dGVybi50ZXN0KCBpbnB1dCApO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRZb3VUdWJlVXJsKCB1cmw6IHN0cmluZyApOiBib29sZWFuIHtcclxuICBjb25zdCBwYXR0ZXJuID0gL14oaHR0cChzKT86XFwvXFwvKT8oKHcpezN9Lik/eW91dHUoYmV8LmJlKT8oXFwuY29tKT9cXC8uKy87XHJcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCggdXJsICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0WW91VHViZUlkKCBpbnB1dDogc3RyaW5nICk6IHN0cmluZyB8IG51bGwge1xyXG4gIGNvbnN0IHJlZ2V4ID0gL1s/Jl12PShbXj8mXSspLztcclxuICBjb25zdCBtYXRjaCA9IGlucHV0Lm1hdGNoKCByZWdleCApO1xyXG4gIGlmICggbWF0Y2ggJiYgbWF0Y2hbMV0gKSB7XHJcbiAgICByZXR1cm4gbWF0Y2hbMV07XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIElmIGRpcmVjdCB2aWRlbyBJRCBpcyBwcm92aWRlZFxyXG4gICAgcmV0dXJuIGlucHV0Lmxlbmd0aCA9PT0gMTEgPyBpbnB1dCA6IG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZUxpc3RGb3JFbGVtZW50KCBlbGVtZW50OiBIVE1MRWxlbWVudCwgYXR0ckxpc3Q6IFtzdHJpbmcsIHN0cmluZ11bXSApIHtcclxuICBhdHRyTGlzdC5mb3JFYWNoKCAoIFtrZXksIHZhbF0gKSA9PiB7XHJcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgga2V5LCB2YWwgKTtcclxuICB9ICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50RnJvbUhUTUwoIGh0bWw6IHN0cmluZywgdHJpbTogYm9vbGVhbiA9IHRydWUgKSB7XHJcbiAgaHRtbCA9IHRyaW0gPyBodG1sLnRyaW0oKSA6IGh0bWw7XHJcblxyXG4gIGlmICggIWh0bWwgKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3RlbXBsYXRlJyApO1xyXG4gIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgY29uc3QgcmVzdWx0ID0gdGVtcGxhdGUuY29udGVudC5jaGlsZHJlbjtcclxuXHJcbiAgaWYgKCByZXN1bHQubGVuZ3RoID09PSAxICkge1xyXG4gICAgcmV0dXJuIHJlc3VsdFswXSBhcyBIVE1MRWxlbWVudDtcclxuICB9XHJcblxyXG4gIHJldHVybiBBcnJheS5mcm9tKCByZXN1bHQgKSBhcyBIVE1MRWxlbWVudFtdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudERpbWVuc2lvbnNCeUlkKCBlbGVtZW50SWQ6IHN0cmluZyApOiBEaW1lbnNpb25zIHtcclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGVsZW1lbnRJZCApO1xyXG5cclxuICBpZiAoICFlbGVtZW50ICkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCBcIkludmFsaWQgZWxlbWVudCBhdCBnZXRFbGVtZW50RGltZW5zaW9uc0J5SWQgd2l0aCBpZDogXCIgKyBlbGVtZW50SWQgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBnZXRFbGVtZW50RGltZW5zaW9ucyggZWxlbWVudCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudERpbWVuc2lvbnMoIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICk6IERpbWVuc2lvbnMge1xyXG4gIHZhciByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxyXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICk6IERPTVJlY3Qge1xyXG4gIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIGNvbnN0IGNlbnRlclggPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjtcclxuICBjb25zdCBjZW50ZXJZID0gcmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDI7XHJcblxyXG4gIC8vIFJvdGF0aW9uIGFuZ2xlIGluIGRlZ3JlZXMgKGV4dHJhY3RlZCBmcm9tIHN0eWxlLnRyYW5zZm9ybSBvciBhbnkgb3RoZXIgc291cmNlKVxyXG4gIGNvbnN0IHJvdGF0aW9uQW5nbGUgPSBnZXRCb2R5Um90YXRpb25JbkRlZ3JlZXMoKTtcclxuXHJcbiAgY29uc3QgcmFkaWFucyA9ICggTWF0aC5QSSAvIDE4MCApICogcm90YXRpb25BbmdsZTtcclxuICBjb25zdCBjb3NUaGV0YSA9IE1hdGguY29zKCByYWRpYW5zICk7XHJcbiAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbiggcmFkaWFucyApO1xyXG5cclxuICAvLyBDYWxjdWxhdGUgdGhlIHJvdGF0ZWQgY29vcmRpbmF0ZXNcclxuICBjb25zdCByb3RhdGVkWDEgPSBjZW50ZXJYICsgKCByZWN0LmxlZnQgLSBjZW50ZXJYICkgKiBjb3NUaGV0YSAtICggcmVjdC50b3AgLSBjZW50ZXJZICkgKiBzaW5UaGV0YTtcclxuICBjb25zdCByb3RhdGVkWTEgPSBjZW50ZXJZICsgKCByZWN0LmxlZnQgLSBjZW50ZXJYICkgKiBzaW5UaGV0YSArICggcmVjdC50b3AgLSBjZW50ZXJZICkgKiBjb3NUaGV0YTtcclxuXHJcbiAgY29uc3Qgcm90YXRlZFgyID0gY2VudGVyWCArICggcmVjdC5yaWdodCAtIGNlbnRlclggKSAqIGNvc1RoZXRhIC0gKCByZWN0LmJvdHRvbSAtIGNlbnRlclkgKSAqIHNpblRoZXRhO1xyXG4gIGNvbnN0IHJvdGF0ZWRZMiA9IGNlbnRlclkgKyAoIHJlY3QucmlnaHQgLSBjZW50ZXJYICkgKiBzaW5UaGV0YSArICggcmVjdC5ib3R0b20gLSBjZW50ZXJZICkgKiBjb3NUaGV0YTtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIGxlZnQsIHRvcCwgYm90dG9tLCBhbmQgcmlnaHQgY29vcmRpbmF0ZXNcclxuICBjb25zdCByb3RhdGVkTGVmdCA9IE1hdGgubWluKCByb3RhdGVkWDEsIHJvdGF0ZWRYMiApO1xyXG4gIGNvbnN0IHJvdGF0ZWRUb3AgPSBNYXRoLm1pbiggcm90YXRlZFkxLCByb3RhdGVkWTIgKTtcclxuICBjb25zdCByb3RhdGVkQm90dG9tID0gTWF0aC5tYXgoIHJvdGF0ZWRZMSwgcm90YXRlZFkyICk7XHJcbiAgY29uc3Qgcm90YXRlZFJpZ2h0ID0gTWF0aC5tYXgoIHJvdGF0ZWRYMSwgcm90YXRlZFgyICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB4OiByb3RhdGVkTGVmdCxcclxuICAgIHk6IHJvdGF0ZWRUb3AsXHJcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcclxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXHJcbiAgICB0b0pTT046IHJlY3QudG9KU09OLFxyXG4gICAgbGVmdDogcm90YXRlZExlZnQsXHJcbiAgICB0b3A6IHJvdGF0ZWRUb3AsXHJcbiAgICBib3R0b206IHJvdGF0ZWRCb3R0b20sXHJcbiAgICByaWdodDogcm90YXRlZFJpZ2h0LFxyXG4gIH0gYXMgRE9NUmVjdDtcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkQWN0aW9uS2V5UnVuT25jZSgga2V5OiBzdHJpbmcsIGV2ZW50S2V5ZG93bjogS2V5Ym9hcmRFdmVudENhbGxiYWNrLCBldmVudEtleXVwPzogS2V5Ym9hcmRFdmVudENhbGxiYWNrICkge1xyXG4gIGlmICggZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlLmhhcygga2V5ICkgKSB7XHJcbiAgICBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2Uuc2V0KCBrZXksIFtldmVudEtleWRvd24sIC4uLmRpY3RLZXlzQnlBY3Rpb25LZXlkb3duT25jZS5nZXQoIGtleSApIV0gKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93bk9uY2Uuc2V0KCBrZXksIFtldmVudEtleWRvd25dIClcclxuICB9XHJcblxyXG4gIGlmICggZXZlbnRLZXl1cCApIHtcclxuICAgIGlmICggZGljdEtleXNCeUFjdGlvbktleXVwLmhhcygga2V5ICkgKSB7XHJcbiAgICAgIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5zZXQoIGtleSwgW2V2ZW50S2V5dXAsIC4uLmRpY3RLZXlzQnlBY3Rpb25LZXl1cC5nZXQoIGtleSApIV0gKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGljdEtleXNCeUFjdGlvbktleXVwLnNldCgga2V5LCBbZXZlbnRLZXl1cF0gKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkQWN0aW9uS2V5UnVuT25SZXBlYXQoIGtleTogc3RyaW5nLCBldmVudEtleWRvd246IEtleWJvYXJkRXZlbnRDYWxsYmFjaywgZXZlbnRLZXl1cD86IEtleWJvYXJkRXZlbnRDYWxsYmFjayApIHtcclxuICBpZiAoIGRpY3RLZXlzQnlBY3Rpb25LZXlkb3duUmVwZWF0Lmhhcygga2V5ICkgKSB7XHJcbiAgICBkaWN0S2V5c0J5QWN0aW9uS2V5ZG93blJlcGVhdC5zZXQoIGtleSwgW2V2ZW50S2V5ZG93biwgLi4uZGljdEtleXNCeUFjdGlvbktleWRvd25SZXBlYXQuZ2V0KCBrZXkgKSFdIClcclxuICB9IGVsc2Uge1xyXG4gICAgZGljdEtleXNCeUFjdGlvbktleWRvd25SZXBlYXQuc2V0KCBrZXksIFtldmVudEtleWRvd25dIClcclxuICB9XHJcblxyXG4gIGlmICggZXZlbnRLZXl1cCApIHtcclxuICAgIGlmICggZGljdEtleXNCeUFjdGlvbktleXVwLmhhcygga2V5ICkgKSB7XHJcbiAgICAgIGRpY3RLZXlzQnlBY3Rpb25LZXl1cC5zZXQoIGtleSwgW2V2ZW50S2V5dXAsIC4uLmRpY3RLZXlzQnlBY3Rpb25LZXl1cC5nZXQoIGtleSApIV0gKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGljdEtleXNCeUFjdGlvbktleXVwLnNldCgga2V5LCBbZXZlbnRLZXl1cF0gKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRWxlbWVudENvbGxpc2lvbiggZWxlbWVudDE6IEhUTUxFbGVtZW50LCBlbGVtZW50MjogSFRNTEVsZW1lbnQsIGNoZWNrQm9keVJvdGF0aW9uOiBib29sZWFuID0gZmFsc2UgKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgcmVjdDEgPSAhY2hlY2tCb2R5Um90YXRpb24gPyBlbGVtZW50MS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIGVsZW1lbnQxICk7XHJcbiAgY29uc3QgcmVjdDIgPSAhY2hlY2tCb2R5Um90YXRpb24gPyBlbGVtZW50Mi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGdldFJvdGF0ZWRCb3VuZGluZ0JveEJhc2VkT25Cb2R5Um90YXRpb24oIGVsZW1lbnQyICk7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9ICEoXHJcbiAgICByZWN0MS50b3AgPiByZWN0Mi5ib3R0b20gfHxcclxuICAgIHJlY3QxLnJpZ2h0IDwgcmVjdDIubGVmdCB8fFxyXG4gICAgcmVjdDEuYm90dG9tIDwgcmVjdDIudG9wIHx8XHJcbiAgICByZWN0MS5sZWZ0ID4gcmVjdDIucmlnaHRcclxuICApO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcG9sbEZvclZhcmlhYmxlPFQ+KCB2YXJpYWJsZU5hbWU6IHN0cmluZywgcmVhZHlDb25kaXRpb246ICggdmFsdWU6IFQgKSA9PiBib29sZWFuLCBjYWxsYmFjazogKCB2YWx1ZTogVCApID0+IHZvaWQgKSB7XHJcbiAgY29uc3QgcG9sbEludGVydmFsID0gMTAwO1xyXG4gIGNvbnN0IHBvbGwgPSBzZXRJbnRlcnZhbCggKCkgPT4ge1xyXG4gICAgaWYgKCAoIHdpbmRvdyBhcyBhbnkgKVt2YXJpYWJsZU5hbWVdICE9PSB1bmRlZmluZWQgJiYgcmVhZHlDb25kaXRpb24oICggd2luZG93IGFzIGFueSApW3ZhcmlhYmxlTmFtZV0gKSApIHtcclxuICAgICAgLy8gSWYgYm90aCBjb25kaXRpb25zIGFyZSBtZXQsIGV4ZWN1dGUgdGhlIGNhbGxiYWNrIGFuZCBzdG9wIHBvbGxpbmdcclxuICAgICAgY2xlYXJJbnRlcnZhbCggcG9sbCApO1xyXG4gICAgICBjYWxsYmFjayggKCB3aW5kb3cgYXMgYW55IClbdmFyaWFibGVOYW1lXSApO1xyXG4gICAgfVxyXG4gIH0sIHBvbGxJbnRlcnZhbCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2FpdFVudGlsRWxlbWVudEV4aXN0cyggc2VsZWN0b3I6IHN0cmluZyApIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoIHJlc29sdmUgPT4ge1xyXG4gICAgaWYgKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZWxlY3RvciApICkge1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZSggZG9jdW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoIG11dGF0aW9ucyA9PiB7XHJcbiAgICAgIGlmICggZG9jdW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKSApIHtcclxuICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgcmVzb2x2ZSggZG9jdW1lbnQucXVlcnlTZWxlY3Rvciggc2VsZWN0b3IgKSApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSggZG9jdW1lbnQuYm9keSwge1xyXG4gICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgIHN1YnRyZWU6IHRydWVcclxuICAgIH0gKTtcclxuICB9ICk7XHJcbn1cclxuXHJcbi8vLyBHZXQgdGhlIGRlZmF1bHQgYXR0cmlidXRlcyBmcm9tIHRoZSB0YXJnZXQgZWxlbWVudFxyXG4vLy8gSWYgaGF2ZSBub3QgZGVmYXVsdCBhdHRyaWJ1dGUgd2l0aCB0aGlzIEBhdHRyaWJ1dGVOYW1lIG9uIG1hcCB3aWxsIHNldCB0aGUgY3VycmVudCBhdHRyaWJ1dGUgYXMgZGVmYXVsdFxyXG4vLy8gSWYgaGF2ZSBub3QgZGVmYXVsdCBhdHRyaWJ1dGUgd2l0aCB0aGlzIEBhdHRyaWJ1dGVOYW1lIHdpbGwgcmV0dXJuIGFuIGVtcHR5IHN0cmluZ1xyXG5leHBvcnQgY29uc3QgbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQgPSBuZXcgTWFwPEhUTUxFbGVtZW50LCBNYXA8c3RyaW5nLCBzdHJpbmc+PigpO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdEF0dHJpYnV0ZUZvclRhcmdldCggdGFyZ2V0OiBIVE1MRWxlbWVudCwgYXR0cmlidXRlTmFtZTogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgaWYgKCAhbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuaGFzKCB0YXJnZXQgKSApIHtcclxuICAgIG1hcERlZmF1bHRBdHRyaWJ1dGVzQnlFbGVtZW50LnNldCggdGFyZ2V0LCBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpICk7XHJcbiAgfVxyXG5cclxuICBsZXQgcmVzdWx0OiBzdHJpbmcgPSAnJztcclxuICBjb25zdCBkZWZhdWx0QXR0cmlidXRlVmFsdWVzQnlOYW1lID0gbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuZ2V0KCB0YXJnZXQgKSE7XHJcbiAgY29uc3QgdGFyZ2V0RGVmYXVsdEF0dHJpYnV0ZSA9ICFkZWZhdWx0QXR0cmlidXRlVmFsdWVzQnlOYW1lLmhhcyggYXR0cmlidXRlTmFtZSApID8gdGFyZ2V0LmdldEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSApIDogZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc0J5TmFtZS5nZXQoIGF0dHJpYnV0ZU5hbWUgKSE7XHJcblxyXG4gIHJlc3VsdCA9IHRhcmdldERlZmF1bHRBdHRyaWJ1dGUgPyB0YXJnZXREZWZhdWx0QXR0cmlidXRlIDogJyc7XHJcbiAgc2V0RGVmYXVsdEF0dHJpYnV0ZUZvclRhcmdldCggdGFyZ2V0LCBhdHRyaWJ1dGVOYW1lLCByZXN1bHQgKTtcclxuXHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRBdHRyaWJ1dGVGb3JUYXJnZXQoIHRhcmdldDogSFRNTEVsZW1lbnQsIGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgbmV3RGVmYXVsdEF0dHJpYnV0ZTogc3RyaW5nICk6IHZvaWQge1xyXG4gIGlmICggIW1hcERlZmF1bHRBdHRyaWJ1dGVzQnlFbGVtZW50LmhhcyggdGFyZ2V0ICkgKSB7XHJcbiAgICBtYXBEZWZhdWx0QXR0cmlidXRlc0J5RWxlbWVudC5zZXQoIHRhcmdldCwgbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKSApO1xyXG4gIH1cclxuXHJcbiAgbWFwRGVmYXVsdEF0dHJpYnV0ZXNCeUVsZW1lbnQuZ2V0KCB0YXJnZXQgKSEuc2V0KCBhdHRyaWJ1dGVOYW1lLCBuZXdEZWZhdWx0QXR0cmlidXRlICk7XHJcbn1cclxuXHJcbi8vLyBEaXZpZGUgbyBlbGVtZW50byBAdGFyZ2V0IGVtIDkgXCJxdWFkcmFkb3NcIiBpZ3VhaXMgZSByZXRvcm5hIGVtIHF1YWlzIHF1YWRyYWRvcyBvIGRyYWdnYWJsZSBlc3TDoSBjb2xpZGluZG8gY29tIG8gdGFyZ2V0XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xsaXNpb25EaXJlY3Rpb24oIGRyYWdnYWJsZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQsIGNoZWNrQm9keVJvdGF0aW9uOiBib29sZWFuID0gZmFsc2UgKTogQ29sbGlzaW9uRGlyZWN0aW9uQ2hlY2sge1xyXG4gIGNvbnN0IHJlY3QxID0gIWNoZWNrQm9keVJvdGF0aW9uID8gZHJhZ2dhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogZ2V0Um90YXRlZEJvdW5kaW5nQm94QmFzZWRPbkJvZHlSb3RhdGlvbiggZHJhZ2dhYmxlICk7XHJcbiAgY29uc3QgcmVjdDIgPSAhY2hlY2tCb2R5Um90YXRpb24gPyB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCB0YXJnZXQgKTtcclxuXHJcbiAgY29uc3QgaXNUb3AgPSByZWN0MS5ib3R0b20gPiByZWN0Mi50b3AgJiYgcmVjdDEudG9wIDwgcmVjdDIudG9wICsgcmVjdDIuaGVpZ2h0IC8gMztcclxuICBjb25zdCBpc1JpZ2h0ID0gcmVjdDEubGVmdCA8IHJlY3QyLnJpZ2h0ICYmIHJlY3QxLnJpZ2h0ID4gcmVjdDIucmlnaHQgLSByZWN0Mi53aWR0aCAvIDM7XHJcbiAgY29uc3QgaXNDZW50ZXIgPSByZWN0MS50b3AgPCByZWN0Mi5ib3R0b20gJiYgcmVjdDEuYm90dG9tID4gcmVjdDIudG9wICYmIHJlY3QxLmxlZnQgPCByZWN0Mi5yaWdodCAmJiByZWN0MS5yaWdodCA+IHJlY3QyLmxlZnQ7XHJcbiAgY29uc3QgaXNCb3R0b20gPSByZWN0MS50b3AgPCByZWN0Mi5ib3R0b20gLSByZWN0Mi5oZWlnaHQgLyAzICYmIHJlY3QxLmJvdHRvbSA+IHJlY3QyLmJvdHRvbSAtIHJlY3QyLmhlaWdodCAvIDM7XHJcbiAgY29uc3QgaXNMZWZ0ID0gcmVjdDEucmlnaHQgPiByZWN0Mi5sZWZ0ICYmIHJlY3QxLmxlZnQgPCByZWN0Mi5sZWZ0ICsgcmVjdDIud2lkdGggLyAzO1xyXG5cclxuICByZXR1cm4geyB0b3A6IGlzVG9wLCByaWdodDogaXNSaWdodCwgY2VudGVyOiBpc0NlbnRlciwgYm90dG9tOiBpc0JvdHRvbSwgbGVmdDogaXNMZWZ0IH07XHJcbn1cclxuXHJcbi8vLyByZXR1cm4gdGhlIGRpc3RhbmNlIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgZHJhZ2dhYmxlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHRhcmdldCBlbGVtZW50IGZyb20gZWFjaCBib3JkZXIgXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXN0YW5jZUZyb21Cb3JkZXIoIGRyYWdnYWJsZTogSFRNTEVsZW1lbnQsIHRhcmdldDogSFRNTEVsZW1lbnQsIGNoZWNrQm9keVJvdGF0aW9uOiBib29sZWFuID0gZmFsc2UgKTogQm9yZGVyRGlzdGFuY2Uge1xyXG4gIGNvbnN0IHJlY3QxID0gIWNoZWNrQm9keVJvdGF0aW9uID8gZHJhZ2dhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogZ2V0Um90YXRlZEJvdW5kaW5nQm94QmFzZWRPbkJvZHlSb3RhdGlvbiggZHJhZ2dhYmxlICk7XHJcbiAgY29uc3QgcmVjdDIgPSAhY2hlY2tCb2R5Um90YXRpb24gPyB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiBnZXRSb3RhdGVkQm91bmRpbmdCb3hCYXNlZE9uQm9keVJvdGF0aW9uKCB0YXJnZXQgKTtcclxuXHJcbiAgY29uc3QgY2VudGVyID0ge1xyXG4gICAgeDogcmVjdDEubGVmdCArIHJlY3QxLndpZHRoIC8gMixcclxuICAgIHk6IHJlY3QxLnRvcCArIHJlY3QxLmhlaWdodCAvIDIsXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGlzdGFuY2VGcm9tQm9yZGVyOiBCb3JkZXJEaXN0YW5jZSA9IHtcclxuICAgIHRvcDogY2VudGVyLnkgLSByZWN0Mi50b3AsXHJcbiAgICByaWdodDogcmVjdDIucmlnaHQgLSBjZW50ZXIueCxcclxuICAgIGJvdHRvbTogcmVjdDIuYm90dG9tIC0gY2VudGVyLnksXHJcbiAgICBsZWZ0OiBjZW50ZXIueCAtIHJlY3QyLmxlZnQsXHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIGRpc3RhbmNlRnJvbUJvcmRlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gcnVuT25seU9uY2VLZXlkb3duQWN0aW9ucyggZXZ0OiBLZXlib2FyZEV2ZW50ICkge1xyXG4gIGZvciAoIGNvbnN0IHBhaXIgb2YgZGljdEtleXNCeUFjdGlvbktleWRvd25PbmNlICkge1xyXG4gICAgaWYgKCBldnQuY29kZSA9PT0gcGFpclswXSApIHtcclxuICAgICAgcGFpclsxXS5mb3JFYWNoKCBrYkV2ZW50ID0+IGtiRXZlbnQoIGV2dCApICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBydW5LZXlkb3duQWN0aW9uc1JlcGVhdCggZXZ0OiBLZXlib2FyZEV2ZW50ICkge1xyXG4gIGZvciAoIGNvbnN0IHBhaXIgb2YgZGljdEtleXNCeUFjdGlvbktleWRvd25SZXBlYXQgKSB7XHJcbiAgICBpZiAoIGV2dC5jb2RlID09PSBwYWlyWzBdICkge1xyXG4gICAgICBwYWlyWzFdLmZvckVhY2goIGtiRXZlbnQgPT4ga2JFdmVudCggZXZ0ICkgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIGV2dCA9PiB7XHJcbiAgaWYgKCAhZXZ0LnJlcGVhdCApIHtcclxuICAgIHJ1bk9ubHlPbmNlS2V5ZG93bkFjdGlvbnMoIGV2dCApO1xyXG4gIH1cclxuXHJcbiAgcnVuS2V5ZG93bkFjdGlvbnNSZXBlYXQoIGV2dCApO1xyXG59ICk7XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ2tleXVwJywgZXZ0ID0+IHtcclxuICBmb3IgKCBjb25zdCBwYWlyIG9mIGRpY3RLZXlzQnlBY3Rpb25LZXl1cCApIHtcclxuICAgIGlmICggZXZ0LmNvZGUgPT09IHBhaXJbMF0gKSB7XHJcbiAgICAgIHBhaXJbMV0uZm9yRWFjaCgga2JFdmVudCA9PiBrYkV2ZW50KCBldnQgKSApO1xyXG4gICAgfVxyXG4gIH1cclxufSApO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50Um90YXRpb25JbkRlZ3JlZXMoIGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBheGlzOiAneCcgfCAneScgfCAneicgPSAneCcgKTogbnVtYmVyIHtcclxuICBsZXQgcmVnZXhNYXRjaFJvdGF0ZVZhbHVlOiBSZWdFeHA7XHJcbiAgc3dpdGNoICggYXhpcyApIHtcclxuICAgIGNhc2UgJ3gnOlxyXG4gICAgICByZWdleE1hdGNoUm90YXRlVmFsdWUgPSByZWdleEdyb3VwUm90YXRlWFZhbHVlO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3knOlxyXG4gICAgICByZWdleE1hdGNoUm90YXRlVmFsdWUgPSByZWdleEdyb3VwUm90YXRlWVZhbHVlO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ3onOlxyXG4gICAgICByZWdleE1hdGNoUm90YXRlVmFsdWUgPSByZWdleEdyb3VwUm90YXRlWlZhbHVlO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZSA9IHJlZ2V4R3JvdXBSb3RhdGVWYWx1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG5cclxuICBjb25zdCBtYXRjaCA9IHJlZ2V4TWF0Y2hSb3RhdGVWYWx1ZS5leGVjKCBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSApO1xyXG4gIGlmICggbWF0Y2ggKSB7XHJcbiAgICBjb25zdCByb3RhdGlvblZhbHVlID0gcGFyc2VGbG9hdCggbWF0Y2hbMV0gKTtcclxuICAgIHJldHVybiByb3RhdGlvblZhbHVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCb2R5Um90YXRpb25JbkRlZ3JlZXMoKTogbnVtYmVyIHtcclxuICBjb25zdCBtYXRjaCA9IGdldFJlZ2V4UmVtb3ZlUm90YXRpb25Gcm9tQm9keSgpLmV4ZWMoIGRvY3VtZW50LmJvZHkuc3R5bGUudHJhbnNmb3JtICk7XHJcbiAgaWYgKCBtYXRjaCApIHtcclxuICAgIGNvbnN0IHJvdGF0aW9uVmFsdWUgPSBwYXJzZUZsb2F0KCBtYXRjaFsxXSApO1xyXG4gICAgcmV0dXJuIHJvdGF0aW9uVmFsdWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZ2V4UmVtb3ZlUm90YXRpb25Gcm9tQm9keSgpIHtcclxuICByZXR1cm4gZ2V0UmVnZXhSZW1vdmVSb3RhdGlvbkJhc2VkT25BeGlzKCBnZXRCb2R5Um90YXRpb25BeGlzKCkgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVnZXhSZW1vdmVSb3RhdGlvbkJhc2VkT25BeGlzKCBheGlzOiAneCcgfCAneScgfCAneicgKSB7XHJcbiAgc3dpdGNoICggYXhpcyApIHtcclxuICAgIGNhc2UgJ3gnOlxyXG4gICAgICByZXR1cm4gcmVnZXhHcm91cFJvdGF0ZVhWYWx1ZTtcclxuICAgIGNhc2UgJ3knOlxyXG4gICAgICByZXR1cm4gcmVnZXhHcm91cFJvdGF0ZVlWYWx1ZTtcclxuICAgIGNhc2UgJ3onOlxyXG4gICAgICByZXR1cm4gcmVnZXhHcm91cFJvdGF0ZVpWYWx1ZTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiByZWdleEdyb3VwUm90YXRlVmFsdWU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9keVJvdGF0aW9uQXhpcygpOiAneCcgfCAneScgfCAneicge1xyXG4gIHJldHVybiBnZXRFbGVtZW50Um90YXRpb25BeGlzKCBkb2N1bWVudC5ib2R5ICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50Um90YXRpb25BeGlzKCBlbGVtZW50OiBIVE1MRWxlbWVudCApOiAneCcgfCAneScgfCAneicge1xyXG4gIGNvbnN0IGVsZW1lbnRUcmFuc2Zvcm0gPSBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybS50b0xvd2VyQ2FzZSgpO1xyXG4gIGlmICggZWxlbWVudFRyYW5zZm9ybS5pbmNsdWRlcyggJ3gnICkgKSB7XHJcbiAgICByZXR1cm4gJ3gnO1xyXG4gIH0gZWxzZSBpZiAoIGVsZW1lbnRUcmFuc2Zvcm0uaW5jbHVkZXMoICd5JyApICkge1xyXG4gICAgcmV0dXJuICd5JztcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuICd6JztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1Db29yZHNGcm9tRWxlbWVudCggZWxlbWVudDogSFRNTEVsZW1lbnQsIGNoZWNrQm9keVJvdGF0aW9uOiBib29sZWFuID0gZmFsc2UgKTogUG9pbnQyRCB7XHJcbiAgY29uc3QgYXJyQ29tcHV0ZWREcmFnZ2FibGVUcmFuc2xhdGUgPSAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtZW50ICkudHJhbnNmb3JtLm1hdGNoKCByZWdleE51bWJlclBhdHRlcm4gKSA/PyBbMCwgMF0gKS5tYXAoIG4gPT4gK24gKTtcclxuXHJcbiAgbGV0IHJlc3VsdCA9IHtcclxuICAgIHg6IGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzRdICE9PSB1bmRlZmluZWQgPyBNYXRoLnJvdW5kKCBhcnJDb21wdXRlZERyYWdnYWJsZVRyYW5zbGF0ZVs0XSApIDogMCxcclxuICAgIHk6IGFyckNvbXB1dGVkRHJhZ2dhYmxlVHJhbnNsYXRlWzVdICE9PSB1bmRlZmluZWQgPyBNYXRoLnJvdW5kKCBhcnJDb21wdXRlZERyYWdnYWJsZVRyYW5zbGF0ZVs1XSApIDogMFxyXG4gIH1cclxuXHJcbiAgaWYgKCBjaGVja0JvZHlSb3RhdGlvbiApIHtcclxuICAgIGNvbnN0IGJvZHlBbmdsZSA9IGdldEVsZW1lbnRSb3RhdGlvbkluRGVncmVlcyggZG9jdW1lbnQuYm9keSwgZ2V0RWxlbWVudFJvdGF0aW9uQXhpcyggZWxlbWVudCApICkgfHwgMDtcclxuICAgIHJldHVybiByb3RhdGVDb29yZGluYXRlcyggcmVzdWx0LngsIHJlc3VsdC55LCBib2R5QW5nbGUgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGlja0V2ZW50VG9Db29yZGluYXRlcyggZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50ICkge1xyXG4gIGlmICggZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50ICkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogZXZlbnQuY2xpZW50WCxcclxuICAgICAgeTogZXZlbnQuY2xpZW50WVxyXG4gICAgfTtcclxuICB9IGVsc2UgaWYgKCBldmVudCBpbnN0YW5jZW9mIFRvdWNoRXZlbnQgKSB7XHJcbiAgICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogdG91Y2guY2xpZW50WCxcclxuICAgICAgeTogdG91Y2guY2xpZW50WVxyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgXCJFdmVudCBub3QgRm91bmRcIjtcclxuICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW52aXNpYmxlRGl2QWJvdmVQYXJlbnQoIHsgcGFyZW50RWxlbWVudCwgaWQsIHBvc2l0aW9uLCBkaW1lbnNpb25zIH06IHsgcGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQ7IGlkOiBzdHJpbmc7IHBvc2l0aW9uPzogeyB0b3A6IG51bWJlcjsgbGVmdDogbnVtYmVyOyB9OyBkaW1lbnNpb25zPzogRGltZW5zaW9uczsgfSApIHtcclxuICB2YXIgaW52aXNpYmxlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicgKTtcclxuXHJcbiAgaWYgKCAhcGFyZW50RWxlbWVudC5zdHlsZS5wb3NpdGlvbiApIHtcclxuICAgIHBhcmVudEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gIH1cclxuXHJcbiAgaW52aXNpYmxlRGl2LmlkID0gaWQ7XHJcbiAgaW52aXNpYmxlRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICBpbnZpc2libGVEaXYuc3R5bGUud2lkdGggPSBkaW1lbnNpb25zICYmIGRpbWVuc2lvbnMud2lkdGggPyBkaW1lbnNpb25zLndpZHRoLnRvU3RyaW5nKCkgKyAncHgnIDogJzEwMCUnO1xyXG4gIGludmlzaWJsZURpdi5zdHlsZS5oZWlnaHQgPSBkaW1lbnNpb25zICYmIGRpbWVuc2lvbnMuaGVpZ2h0ID8gZGltZW5zaW9ucy5oZWlnaHQudG9TdHJpbmcoKSArICdweCcgOiAnMTAwJSc7XHJcbiAgaW52aXNpYmxlRGl2LnN0eWxlLnRvcCA9ICggcG9zaXRpb24/LnRvcC50b1N0cmluZygpID8/ICcwJyApICsgJ3B4JztcclxuICBpbnZpc2libGVEaXYuc3R5bGUubGVmdCA9ICggcG9zaXRpb24/LmxlZnQudG9TdHJpbmcoKSA/PyAnMCcgKSArICdweCc7XHJcbiAgaW52aXNpYmxlRGl2LnN0eWxlLm9wYWNpdHkgPSAnMCc7IC8vIE1ha2UgdGhlIGRpdiBpbnZpc2libGVcclxuICBpbnZpc2libGVEaXYuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdhdXRvJzsgLy8gQWxsb3cgdGhlIGRpdiB0byBpbnRlcmNlcHQgbW91c2UgZXZlbnRzXHJcblxyXG4gIHBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGludmlzaWJsZURpdiApO1xyXG5cclxuICByZXR1cm4gaW52aXNpYmxlRGl2O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGlkZUVsZW1lbnQoIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICkge1xyXG4gIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgZWxlbWVudC5zdHlsZS56SW5kZXggPSAnLTEnO1xyXG4gIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICBlbGVtZW50LnN0eWxlLndpZHRoID0gJzBweCAhaW1wb3J0YW50JztcclxuICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICcwcHggIWltcG9ydGFudCc7XHJcbiAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdoaWRkZW4nLCAnJyApO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2xlZXBBc3luYyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oICggcmVzb2x2ZSApID0+IHNldFRpbWVvdXQoICgpID0+IHJlc29sdmUoKSwgbXMgKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmluZEVsZW1lbnRzQnlDaGVjayggdHJpZ2dlckVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBvbkNoZWNrOiBGdW5jdGlvbiwgb25VbmNoZWNrOiBGdW5jdGlvbiApIHtcclxuICBpZiAoIHRyaWdnZXJFbGVtZW50LmNoZWNrZWQgKSB7XHJcbiAgICBvbkNoZWNrKCB0YXJnZXRFbGVtZW50ICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCB0cmlnZ2VyR3JvdXAgPSB0cmlnZ2VyRWxlbWVudC5uYW1lXHJcbiAgICA/IEFycmF5LmZyb20oIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGBbbmFtZT1cIiR7IHRyaWdnZXJFbGVtZW50Lm5hbWUgfVwiXWAgKSApXHJcbiAgICA6IFt0cmlnZ2VyRWxlbWVudF07XHJcblxyXG4gIHRyaWdnZXJHcm91cC5mb3JFYWNoKCB0ID0+IHQuYWRkRXZlbnRMaXN0ZW5lciggJ2NoYW5nZScsIGV2dCA9PiB7XHJcbiAgICBpZiAoIHRyaWdnZXJFbGVtZW50LmNoZWNrZWQgKSB7XHJcbiAgICAgIG9uQ2hlY2soIHRhcmdldEVsZW1lbnQsIGV2dCApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb25VbmNoZWNrKCB0YXJnZXRFbGVtZW50LCBldnQgKTtcclxuICAgIH1cclxuICB9ICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldElucHV0Rm9yY2VQaG9uZU51bWJlckZvcm1hdCggaW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50ICkge1xyXG4gIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgcGhvbmVJbnB1dCA9IHRoaXMudmFsdWU7XHJcblxyXG4gICAgY29uc3QgY2xlYW5QaG9uZUlucHV0ID0gcGhvbmVJbnB1dC5yZXBsYWNlKCAvXFxEL2csICcnICk7XHJcbiAgICBpZiAoIGNsZWFuUGhvbmVJbnB1dC5sZW5ndGggPiAxMSApIHtcclxuICAgICAgcGhvbmVJbnB1dCA9IGNsZWFuUGhvbmVJbnB1dC5zbGljZSggMCwgMTEgKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcGhvbmVOdW1iZXJGb3JtYXR0ZWQgPSB0b1Bob25lTnVtYmVyKCBwaG9uZUlucHV0ICk7XHJcblxyXG4gICAgaWYgKCBwaG9uZU51bWJlckZvcm1hdHRlZC5sZW5ndGggPT09IDEwICkge1xyXG4gICAgICBwaG9uZU51bWJlckZvcm1hdHRlZCA9IHBob25lTnVtYmVyRm9ybWF0dGVkLnJlcGxhY2VBbGwoICctJywgJycgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnZhbHVlID0gcGhvbmVOdW1iZXJGb3JtYXR0ZWQ7XHJcbiAgfSApO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTW9iaWxlQnJvd3NlcigpIHtcclxuICByZXR1cm4gL0FuZHJvaWR8aVBob25lL2kudGVzdCggbmF2aWdhdG9yLnVzZXJBZ2VudCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckRldmljZVR5cGUoKTogJ2FuZHJvaWQnIHwgJ2FwcGxlJyB8ICdkZXNrdG9wJyB7XHJcbiAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCAoIHdpbmRvdyBhcyBhbnkgKS5vcGVyYTtcclxuXHJcbiAgaWYgKCAvYW5kcm9pZC9pLnRlc3QoIHVzZXJBZ2VudCApICkge1xyXG4gICAgcmV0dXJuICdhbmRyb2lkJztcclxuICB9IGVsc2UgaWYgKCAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdCggdXNlckFnZW50ICkgJiYgISggd2luZG93IGFzIGFueSApLk1TU3RyZWFtICkge1xyXG4gICAgcmV0dXJuICdhcHBsZSc7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAnZGVza3RvcCc7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNPblNjcmVlbiggZWxlbWVudDogSFRNTEVsZW1lbnQgKSB7XHJcbiAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgcmV0dXJuIChcclxuICAgIHJlY3QudG9wID49IDAgJiZcclxuICAgIHJlY3QubGVmdCA+PSAwICYmXHJcbiAgICByZWN0LmJvdHRvbSA8PSAoIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ICkgJiZcclxuICAgIHJlY3QucmlnaHQgPD0gKCB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggKVxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaW5kRWxlbWVudFZpZXdJZkNoZWNrZWQoIHRyaWdnZXJFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCB0YXJnZXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50LCBvcHRpb25zID0ge1xyXG4gIG9uQ2hlY2s6ICggdHJpZ2dlckVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQsIHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50ICkgPT4geyB9LFxyXG4gIG9uVW5jaGVjazogKCB0cmlnZ2VyRWxlbWVudDogSFRNTElucHV0RWxlbWVudCwgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgKSA9PiB7IH1cclxufSApIHtcclxuICBiaW5kRWxlbWVudHNCeUNoZWNrKFxyXG4gICAgdHJpZ2dlckVsZW1lbnQsXHJcbiAgICB0YXJnZXRFbGVtZW50LFxyXG4gICAgKCBlbDogSFRNTEVsZW1lbnQgKSA9PiB7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoICdzaG93JyApO1xyXG4gICAgICBvcHRpb25zLm9uQ2hlY2soIHRyaWdnZXJFbGVtZW50LCB0YXJnZXRFbGVtZW50ICk7XHJcbiAgICB9LFxyXG4gICAgKCBlbDogSFRNTEVsZW1lbnQgKSA9PiB7XHJcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoICdzaG93JyApO1xyXG4gICAgICBvcHRpb25zLm9uVW5jaGVjayggdHJpZ2dlckVsZW1lbnQsIHRhcmdldEVsZW1lbnQgKTtcclxuICAgIH0sXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlRnJvbVJhZGlvR3JvdXAoIGdyb3VwTmFtZTogc3RyaW5nICk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBgW25hbWU9JHsgZ3JvdXBOYW1lIH1dOmNoZWNrZWRgICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICBpZiAoIGVsICkge1xyXG4gICAgcmV0dXJuIGVsLnZhbHVlO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhTY3JvbGwoIHRhcmdldFk6IG51bWJlciwgZHVyYXRpb246IG51bWJlciApOiB2b2lkIHtcclxuICBjb25zdCBzdGFydFkgPSB3aW5kb3cuc2Nyb2xsWSB8fCB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbiAgbGV0IHN0YXJ0VGltZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIGZ1bmN0aW9uIHN0ZXAoIGN1cnJlbnRUaW1lOiBudW1iZXIgKSB7XHJcbiAgICBpZiAoICFzdGFydFRpbWUgKSBzdGFydFRpbWUgPSBjdXJyZW50VGltZTtcclxuICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gY3VycmVudFRpbWUgLSBzdGFydFRpbWU7XHJcbiAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKCBlbGFwc2VkVGltZSAvIGR1cmF0aW9uLCAxICk7XHJcbiAgICBjb25zdCBlYXNlZFByb2dyZXNzID0gbGVycCggMCwgMSwgcHJvZ3Jlc3MgKTtcclxuICAgIHdpbmRvdy5zY3JvbGxUbyggMCwgbGVycCggc3RhcnRZLCB0YXJnZXRZLCBlYXNlZFByb2dyZXNzICkgKTtcclxuICAgIGlmICggZWxhcHNlZFRpbWUgPCBkdXJhdGlvbiApIHtcclxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzdGVwICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHN0ZXAgKTtcclxufVxyXG5cclxuLy8gUmV0b3JuYSB1bWEgZnVuw6fDo28gcXVlIG7Do28gdmFpIHNlciBjb21wbGV0YWRhIGNhc28gc2VqYSBjaGFtYWRhIG5vdmFtZW50ZSBlbSB7IGRlbGF5IH0gbWlsaXNzZWd1bmRvc1xyXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2VGYWN0b3J5KCBmdW5jOiBGdW5jdGlvbiwgZGVsYXk6IG51bWJlciApOiBGdW5jdGlvbiB7XHJcbiAgbGV0IGluRGVib3VuY2U6IG51bWJlcjtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHdpbmRvdztcclxuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICBjbGVhclRpbWVvdXQoIGluRGVib3VuY2UgKTtcclxuICAgIGluRGVib3VuY2UgPSB3aW5kb3cuc2V0VGltZW91dCggKCkgPT4gZnVuYy5hcHBseSggY29udGV4dCwgYXJncyApLCBkZWxheSApO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIFJldG9ybmEgdW1hIGZ1bsOnw6NvIHF1ZSBzw7MgcG9kZSBzZXIgY29tcGxldGFkYSB1bWEgdmV6IGEgY2FkYSB7IGxpbWl0IH0gbWlsaXNzZWd1bmRvcyBcclxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlRmFjdG9yeSggZnVuYzogRnVuY3Rpb24sIGxpbWl0OiBudW1iZXIgKTogRnVuY3Rpb24ge1xyXG4gIGxldCBsYXN0RnVuYzogbnVtYmVyO1xyXG4gIGxldCBsYXN0UmFuOiBudW1iZXI7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB3aW5kb3c7XHJcbiAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgaWYgKCAhbGFzdFJhbiApIHtcclxuICAgICAgZnVuYy5hcHBseSggY29udGV4dCwgYXJncyApO1xyXG4gICAgICBsYXN0UmFuID0gRGF0ZS5ub3coKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNsZWFyVGltZW91dCggbGFzdEZ1bmMgKTtcclxuICAgICAgbGFzdEZ1bmMgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICggRGF0ZS5ub3coKSAtIGxhc3RSYW4gPj0gbGltaXQgKSB7XHJcbiAgICAgICAgICBmdW5jLmFwcGx5KCBjb250ZXh0LCBhcmdzICk7XHJcbiAgICAgICAgICBsYXN0UmFuID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIGxpbWl0IC0gKCBEYXRlLm5vdygpIC0gbGFzdFJhbiApICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoU2Nyb2xsVG8oIHBvczogbnVtYmVyICk6IHZvaWQge1xyXG4gIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG8oIHtcclxuICAgIHRvcDogcG9zLFxyXG4gICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxyXG4gIH0gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNtb290aFNjcm9sbFRvRWxlbWVudCggZWxlbWVudDogSFRNTEVsZW1lbnQsIHVzZUJyb3dzZXJEZWZhdWx0czogYm9vbGVhbiA9IHRydWUgKTogdm9pZCB7XHJcbiAgaWYgKCAhdXNlQnJvd3NlckRlZmF1bHRzICkge1xyXG4gICAgY29uc3QgdGFyZ2V0WSA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnNjcm9sbFk7XHJcbiAgICBjb25zdCBkdXJhdGlvbiA9IDEwMDA7IC8vIER1cmHDp8OjbyBmaXhhIGVtIG1pbGlzc2VndW5kb3MgKDEgc2VndW5kbylcclxuICAgIHNtb290aFNjcm9sbCggdGFyZ2V0WSwgZHVyYXRpb24gKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG8oIHtcclxuICAgIHRvcDogZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55LFxyXG4gICAgbGVmdDogZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54LFxyXG4gICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxyXG4gIH0gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdE9wdGlvbkJ5VGV4dCggaWRTZWxlY3RFbGVtZW50OiBzdHJpbmcsIHNlYXJjaFRleHQ6IHN0cmluZywgY29udGFpbnM6IGJvb2xlYW4gPSBmYWxzZSApOiB2b2lkIHtcclxuICBjb25zdCBzZWxlY3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIGlkU2VsZWN0RWxlbWVudCApIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG5cclxuICBpZiAoICFzZWxlY3RFbGVtZW50ICkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgb3B0aW9uc0VsZW1lbnRvU2VsZWN0ID0gWy4uLnNlbGVjdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCggJ29wdGlvbicgKV07XHJcblxyXG4gIGxldCBzZWxlY3RlZE9wdGlvbjtcclxuICBpZiAoIGNvbnRhaW5zICkge1xyXG4gICAgc2VsZWN0ZWRPcHRpb24gPSBvcHRpb25zRWxlbWVudG9TZWxlY3RcclxuICAgICAgLmZpbHRlciggZWwgPT4gZWwudGV4dENvbnRlbnQgJiYgZWwudGV4dENvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyggc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpICkgKVswXS52YWx1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgc2VsZWN0ZWRPcHRpb24gPSBvcHRpb25zRWxlbWVudG9TZWxlY3RcclxuICAgICAgLmZpbHRlciggZWwgPT4gZWwudGV4dENvbnRlbnQgJiYgZWwudGV4dENvbnRlbnQudG9Mb3dlckNhc2UoKSA9PT0gc2VhcmNoVGV4dC50b0xvd2VyQ2FzZSgpIClbMF0udmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RFbGVtZW50LnZhbHVlID0gc2VsZWN0ZWRPcHRpb247XHJcbn1cclxuXHJcbiIsIlxyXG4vLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYyNDU3NjcvY3JlYXRpbmctYS1ibG9iLWZyb20tYS1iYXNlNjQtc3RyaW5nLWluLWphdmFzY3JpcHRcclxuLy8vIERpdmlkZSB1bSBhcnF1aXZvIGJpbsOhcmlvIGVtIHbDoXJpYXMgcGFydGVzLCBwYXJhIHF1ZSBhIGNvbnZlcnPDo28gc2VqYSBvdGltaXphZGEsIGUgcmV0b3JuYSB1bWEgYmxvYiBjb20gbyBhcnF1aXZvXHJcblxyXG5pbXBvcnQgeyBpc051bGxPckVtcHR5IH0gZnJvbSAnLi9TdHJpbmdUb29scyc7XHJcblxyXG4vLy8gQHBhcmFtIG9uUHJvZ3Jlc3NvIFVtIGNhbGxiYWNrIHF1ZSByZWNlYmUgYSBwb3JjZW50YWdlbSBkZSBwcm9ncmVzc28gYXR1YWwgZGEgY29udmVyc8Ojb1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYmFzZTY0VG9CbG9iKCB0ZXh0b0Jhc2U2NDogc3RyaW5nLCBjb250ZW50VHlwZTogc3RyaW5nLCB0YW1hbmhvUGFydGVzID0gMTAyNCwgb25Qcm9ncmVzcyA9ICggcHJvZ3Jlc3NvQXR1YWw6IG51bWJlciApID0+IHsgY29uc29sZS5sb2coIHByb2dyZXNzb0F0dWFsICkgfSApIHtcclxuICBjb25zdCBieXRlQXJyYXlzID0gbmV3IEFycmF5PFVpbnQ4QXJyYXk+KCk7XHJcbiAgY29uc3QgZmlsZVNpemUgPSB0ZXh0b0Jhc2U2NC5sZW5ndGg7XHJcblxyXG4gIC8vLyBwcmVlbmNoZSBgYnl0ZUFycmF5c2AgY29tIG9zIGJ5dGVzIGRvIGFycXVpdm8gcGVnYW5kbyB1bWEgcGFydGUgZGUgXCJ0YW1hbmhvUGFydGVzXCIgcG9yIHZlelxyXG4gIGZvciAoIGxldCBvZmZzZXQgPSAwOyBvZmZzZXQgPCBmaWxlU2l6ZTsgb2Zmc2V0ICs9IHRhbWFuaG9QYXJ0ZXMgKSB7XHJcbiAgICAvLy8gcGVnYW5kbyB1bSBwYXJ0ZSBkZSB0YW1hbmhvIHt0YW1hbmhvUGFydGVzfSBkbyBhcnF1aXZvXHJcbiAgICBjb25zdCBjaHVuayA9IHRleHRvQmFzZTY0LnNsaWNlKCBvZmZzZXQsIG9mZnNldCArIHRhbWFuaG9QYXJ0ZXMgKTtcclxuXHJcbiAgICAvLy8gY29udmVydGVuZG8gYSBwYXJ0ZSBlbSB1bSBhcnJheSBjb20gY2FkYSBieXRlIGRlc3NlIHBlZGHDp28gZG8gYXJxdWl2b1xyXG4gICAgY29uc3QgYXJyQnl0ZXNDaHVuayA9IG5ldyBBcnJheTxudW1iZXI+KCBjaHVuay5sZW5ndGggKTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGNodW5rLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICBhcnJCeXRlc0NodW5rW2ldID0gY2h1bmsuY2hhckNvZGVBdCggaSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLyB0cmFuc2Zvcm1hbmRvIGVzc2UgYXJyYXkgZW0gdW0gYXJyYXkgY29tIGNhbXBvcyBkbyB0YW1hbmhvIGRlIHVtIGJ5dGVcclxuICAgIC8vLyBlIHVuaW5kbyBhcyBwYXJ0ZXMgasOhIGNvbmNsdcOtZGFzIGRvIGFycXVpdm9cclxuICAgIGJ5dGVBcnJheXMucHVzaCggbmV3IFVpbnQ4QXJyYXkoIGFyckJ5dGVzQ2h1bmsgKSApO1xyXG5cclxuICAgIC8vLyBDaGFtYW5kbyBjYWxsYmFjayBxdWUgZXhpYmUgbyBwcm9ncmVzc28gcXVhbmRvIG8gcGFzc28gYXR1YWwgZm9yIGNvbmNsdcOtZG9cclxuICAgIGF3YWl0IG9uUHJvZ3Jlc3MoICggb2Zmc2V0IC8gZmlsZVNpemUgKSAqIDEwMCApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ldyBCbG9iKCBieXRlQXJyYXlzLCB7IHR5cGU6IGNvbnRlbnRUeXBlIH0gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvd25sb2FkRmlsZUZyb21CbG9iKCBibG9iOiBCbG9iLCB0aXRsZTogc3RyaW5nICkge1xyXG4gIGxldCBmaWxlID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggYmxvYiApO1xyXG5cclxuICBpZiAoIGZpbGUgKSB7XHJcbiAgICBsZXQgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdhJyApO1xyXG4gICAgYS5ocmVmID0gZmlsZTtcclxuICAgIGEuZG93bmxvYWQgPSB0aXRsZTtcclxuICAgIGEuY2xpY2soKTtcclxuICAgIGEucmVtb3ZlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRmlsZVBhdGgoIGZpbGVQYXRoOiBzdHJpbmcgKTogc3RyaW5nIHtcclxuICBjb25zdCByZWdleCA9IC8oPzouKltcXFxcL10pKFteXFxcXC9dKykkLztcclxuXHJcbiAgY29uc3QgbWF0Y2ggPSByZWdleC5leGVjKCBmaWxlUGF0aCApO1xyXG4gIGlmICggbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSApIHtcclxuICAgIHJldHVybiBtYXRjaFsxXTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGZpbGVQYXRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVFeHRlbnNpb24oIGZpbGVOYW1lOiBzdHJpbmcgKTogc3RyaW5nIHtcclxuICBpZiAoIGlzTnVsbE9yRW1wdHkoIGZpbGVOYW1lICkgKSByZXR1cm4gJyc7XHJcblxyXG4gIGNvbnN0IGRlZmF1bHRGaWxlU3JjID0gZmlsZU5hbWUuc3BsaXQoICcuJyApLnBvcCgpO1xyXG4gIGlmICggZGVmYXVsdEZpbGVTcmMgJiYgZGVmYXVsdEZpbGVTcmMgIT09IGZpbGVOYW1lICkge1xyXG4gICAgcmV0dXJuIGRlZmF1bHRGaWxlU3JjO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZmlsZVR5cGVTdHIgPSBmaWxlTmFtZS5zcGxpdCggJy8nICkucG9wKCk7XHJcbiAgaWYgKCBmaWxlVHlwZVN0ciAmJiBmaWxlVHlwZVN0ciAhPT0gZmlsZU5hbWUgKSB7XHJcbiAgICByZXR1cm4gZmlsZVR5cGVTdHI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gJyc7XHJcbn0iLCJleHBvcnQgY29uc3QgcmVnZXhOdW1iZXJQYXR0ZXJuID0gLy0/XFxkK1xcLj9cXGQqL2c7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50MkQge1xyXG4gIHg6IG51bWJlcjtcclxuICB5OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGltZW5zaW9ucyB7XHJcbiAgd2lkdGg6IG51bWJlcjtcclxuICBoZWlnaHQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluZGV4VG9Sb3coIGluZGV4OiBudW1iZXIsIGdyaWRXaWR0aDogbnVtYmVyICkge1xyXG4gIHJldHVybiBNYXRoLmZsb29yKCBpbmRleCAvIGdyaWRXaWR0aCApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhUb0NvbCggaW5kZXg6IG51bWJlciwgZ3JpZFdpZHRoOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIGluZGV4ICUgZ3JpZFdpZHRoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcm93Q29sVG9JbmRleCggcm93OiBudW1iZXIsIGNvbDogbnVtYmVyLCB3aWR0aDogbnVtYmVyICkge1xyXG4gIHJldHVybiAoIHJvdyAqIHdpZHRoICkgKyBjb2w7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVDb29yZGluYXRlc0Zyb21Qb2ludDJEKCBjb29yZHM6IFBvaW50MkQsIGFuZ2xlOiBudW1iZXIgKTogUG9pbnQyRCB7XHJcbiAgY29uc3QgcmFkaWFucyA9ICggTWF0aC5QSSAvIDE4MCApICogYW5nbGU7XHJcbiAgY29uc3QgbmV3WCA9IGNvb3Jkcy54ICogTWF0aC5jb3MoIHJhZGlhbnMgKSAtIGNvb3Jkcy55ICogTWF0aC5zaW4oIHJhZGlhbnMgKTtcclxuICBjb25zdCBuZXdZID0gY29vcmRzLnggKiBNYXRoLnNpbiggcmFkaWFucyApICsgY29vcmRzLnkgKiBNYXRoLmNvcyggcmFkaWFucyApO1xyXG4gIHJldHVybiB7IHg6IG5ld1gsIHk6IG5ld1kgfTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVDb29yZGluYXRlcyggeDogbnVtYmVyLCB5OiBudW1iZXIsIGFuZ2xlOiBudW1iZXIgKTogUG9pbnQyRCB7XHJcbiAgY29uc3QgcmFkaWFucyA9ICggTWF0aC5QSSAvIDE4MCApICogYW5nbGU7XHJcbiAgY29uc3QgbmV3WCA9IHggKiBNYXRoLmNvcyggcmFkaWFucyApIC0geSAqIE1hdGguc2luKCByYWRpYW5zICk7XHJcbiAgY29uc3QgbmV3WSA9IHggKiBNYXRoLnNpbiggcmFkaWFucyApICsgeSAqIE1hdGguY29zKCByYWRpYW5zICk7XHJcbiAgcmV0dXJuIHsgeDogbmV3WCwgeTogbmV3WSB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJlRGlhZ29uYWxzKCBpbmRleDE6IG51bWJlciwgaW5kZXgyOiBudW1iZXIsIGdyaWRTaXplOiBudW1iZXIgKTogYm9vbGVhbiB7XHJcbiAgaWYgKCBpbmRleDEgPCAwIHx8IGluZGV4MiA8IDAgKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoICdJbnZhbGlkIGNlbGwgaW5kaWNlcycgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJvdzEgPSBpbmRleFRvUm93KCBpbmRleDEsIGdyaWRTaXplICk7XHJcbiAgY29uc3QgY29sMSA9IGluZGV4VG9Db2woIGluZGV4MSwgZ3JpZFNpemUgKTtcclxuXHJcbiAgY29uc3Qgcm93MiA9IGluZGV4VG9Sb3coIGluZGV4MiwgZ3JpZFNpemUgKTtcclxuICBjb25zdCBjb2wyID0gaW5kZXhUb0NvbCggaW5kZXgyLCBncmlkU2l6ZSApO1xyXG5cclxuICByZXR1cm4gTWF0aC5hYnMoIHJvdzEgLSByb3cyICkgPT09IE1hdGguYWJzKCBjb2wxIC0gY29sMiApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhUb1BvaW50MkQoIGluZGV4OiBudW1iZXIsIGdyaWRXaWR0aDogbnVtYmVyICk6IFBvaW50MkQge1xyXG4gIHJldHVybiB7XHJcbiAgICB4OiBpbmRleFRvQ29sKCBpbmRleCwgZ3JpZFdpZHRoICksXHJcbiAgICB5OiBpbmRleFRvUm93KCBpbmRleCwgZ3JpZFdpZHRoIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsZXJwKCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIGFtb3VudDogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgcmV0dXJuICggMSAtIGFtb3VudCApICogbWluICsgYW1vdW50ICogbWF4O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZUxlcnAoIGE6IG51bWJlciwgYjogbnVtYmVyLCB2YWw6IG51bWJlciApOiBudW1iZXIge1xyXG4gIHJldHVybiAoIHZhbCAtIGEgKSAvICggYiAtIGEgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbWFwKCBpbk1pbjogbnVtYmVyLCBpbk1heDogbnVtYmVyLCBvdXRNaW46IG51bWJlciwgb3V0TWF4OiBudW1iZXIsIHZhbDogbnVtYmVyICk6IG51bWJlciB7XHJcbiAgcmV0dXJuIGxlcnAoIG91dE1pbiwgb3V0TWF4LCBpbnZlcnNlTGVycCggaW5NaW4sIGluTWF4LCB2YWwgKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50RXhjbHVzaXZlKCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIG1heCAtIG1pbiApICsgbWluICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0VxdWFsU2V0czxUPiggc2V0MTogU2V0PFQ+LCBzZXQyOiBTZXQ8VD4gKSB7XHJcbiAgcmV0dXJuIHNldDEuc2l6ZSA9PT0gc2V0Mi5zaXplICYmXHJcbiAgICBbLi4uc2V0MV0uZXZlcnkoICggeCApID0+IHNldDIuaGFzKCB4ICkgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUludEluY2x1c2l2ZSggbWluOiBudW1iZXIsIG1heDogbnVtYmVyICkge1xyXG4gIG1pbiA9IE1hdGguY2VpbCggbWluICk7XHJcbiAgbWF4ID0gTWF0aC5mbG9vciggbWF4ICk7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiAoIG1heCAtIG1pbiArIDEgKSApICsgbWluO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tRnJvbUFycmF5PFQ+KCBhcnI6IEFycmF5PFQ+ICkge1xyXG4gIHJldHVybiBhcnJbZ2V0UmFuZG9tSW50RXhjbHVzaXZlKCAwLCBhcnIubGVuZ3RoICldO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAoIG51bTogbnVtYmVyID0gMCwgbWluOiBudW1iZXIgPSAwLCBtYXg6IG51bWJlciA9IDEwMCApOiBudW1iZXIge1xyXG4gIHJldHVybiBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbnVtLCBtYXggKSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWludXRlc1RvTWlsbGlzZWNvbmRzKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBtcyAqIDYwMDAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWlsbGlzZWNvbmRzVG9NaW51dGVzKCBtczogbnVtYmVyICkge1xyXG4gIHJldHVybiBtcyAvIDYwMDAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWlsbGlzZWNvbmRzVG9Ib3VycyggbXM6IG51bWJlciApIHtcclxuICByZXR1cm4gbXMgLyAzLjZlKzY7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtaWxsaXNlY29uZHNUb0RheXMoIG1zOiBudW1iZXIgKSB7XHJcbiAgcmV0dXJuIG1zIC8gOC42NGUrNztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1lZ2FieXRlVG9CeXRlKCBtYjogbnVtYmVyICkge1xyXG4gIHJldHVybiBtYiAqIDEwMjQgKiAxMDI0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYnl0ZVRvTWVnYWJ5dGUoIGI6IG51bWJlciApIHtcclxuICByZXR1cm4gYiAvIDEwMjQgLyAxMDI0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJyYXlGcm9tUmFuZ2UoIHNpemU6IG51bWJlciwgc3RhcnRpbmdGcm9tOiBudW1iZXIgPSAwICk6IG51bWJlcltdIHtcclxuICBsZXQgcmVzdWx0ID0gWy4uLkFycmF5KCBzaXplICkua2V5cygpXVxyXG5cclxuICBpZiAoIHN0YXJ0aW5nRnJvbSAhPSAwICkge1xyXG4gICAgcmVzdWx0ID0gcmVzdWx0Lm1hcCggaSA9PiBpICsgc3RhcnRpbmdGcm9tICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59IiwiZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUFjY2VudHMoIHN0cjogc3RyaW5nICkge1xyXG4gIHJldHVybiBzdHIubm9ybWFsaXplKCAnTkZEJyApLnJlcGxhY2UoIC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoIHN0cjogc3RyaW5nICk6IHN0cmluZyB7XHJcbiAgaWYgKCB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyApIHtcclxuICAgIHJldHVybiAnJztcclxuICB9XHJcbiAgcmV0dXJuIHN0ci5jaGFyQXQoIDAgKS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cmluZyggMSApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoVGVybSggc3RyaW5nQXJyYXk6IHN0cmluZ1tdLCBzZWFyY2hUZXJtOiBzdHJpbmcgKTogc3RyaW5nW10ge1xyXG4gIHJldHVybiBzdHJpbmdBcnJheVxyXG4gICAgLmZpbHRlciggKCB2OiBzdHJpbmcgKSA9PiB2LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggc2VhcmNoVGVybS50b0xvd2VyQ2FzZSgpICkgPiAtMSApXHJcbiAgICAuc2xpY2UoIDAsIDEwIClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHplcm9CZWZvcmUoIG46IG51bWJlciApIHtcclxuICByZXR1cm4gbi50b1N0cmluZygpLnBhZFN0YXJ0KCAyLCAnMCcgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVsbE9yRW1wdHkoIHN0cjogc3RyaW5nICkge1xyXG4gIHJldHVybiB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJyB8fCAhc3RyIHx8IHN0ciA9PT0gJydcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvUGhvbmVOdW1iZXIoIGlucHV0VGV4dDogc3RyaW5nICkge1xyXG4gIGNvbnN0IGNsZWFuTnVtYmVyID0gaW5wdXRUZXh0LnJlcGxhY2UoIC9cXEQvZywgJycgKTtcclxuXHJcbiAgbGV0IHJlc3VsdDtcclxuICBpZiAoIGNsZWFuTnVtYmVyLmxlbmd0aCA8PSAxMCApIHtcclxuICAgIGNvbnN0IHJlZ2V4ID0gL14oXFxkezJ9KShcXGR7NH0pKFxcZHswLDR9KSQvO1xyXG4gICAgcmVzdWx0ID0gY2xlYW5OdW1iZXIucmVwbGFjZSggcmVnZXgsICcoJDEpICQyLSQzJyApO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCByZWdleCA9IC9eKFxcZHsyfSkoXFxkezV9KShcXGR7MCw0fSkkLztcclxuICAgIHJlc3VsdCA9IGNsZWFuTnVtYmVyLnJlcGxhY2UoIHJlZ2V4LCAnKCQxKSAkMi0kMycgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgT2JqZWN0RXZlbnRMaXN0ZW5lciB9IGZyb20gJy4uLy4uL0V4dHJhcy9PYmplY3RFdmVudExpc3RlbmVyJztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudEZyb21IVE1MIH0gZnJvbSAnLi4vLi4vVG9vbHMvRE9NVG9vbHMnO1xyXG5pbXBvcnQgeyBBdWRpb0NvbXBvbmVudCB9IGZyb20gJy4uL0F1ZGlvQ29tcG9uZW50JztcclxuaW1wb3J0IHsgWW91dHViZUlmcmFtZSB9IGZyb20gJy4uL1lvdXR1YmVJZnJhbWUvWW91dHViZUlmcmFtZVN3aXRjaGVyJztcclxuaW1wb3J0IHsgdGVtcGxhdGVTb3VuZFRhYmxlSW5wdXQsIHRlbXBsYXRlU291bmRUYWJsZUl0ZW1Db250YWluZXIgfSBmcm9tICcuL1RlbXBsYXRlc1NvdW5kVGFibGUnO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIFNvdW5kVGFibGVPcHRpb25zID0ge1xyXG4gIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgYXJyTWVkaWFTcmM6IHN0cmluZ1tdO1xyXG4gIGFyclZpZGVvSWQ6IHN0cmluZ1tdO1xyXG4gIGlmcmFtZXNDbGFzc0xpc3Q6IHN0cmluZ1tdO1xyXG4gIGNvbnRhaW5lcnNDbGFzc0xpc3Q6IHN0cmluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBTb3VuZFRhYmxlQ29tcG9uZW50ID0gWW91dHViZUlmcmFtZSB8IEF1ZGlvQ29tcG9uZW50O1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvdW5kVGFibGUgZXh0ZW5kcyBPYmplY3RFdmVudExpc3RlbmVyIHtcclxuICBwdWJsaWMgcmVhZG9ubHkgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICBwdWJsaWMgaWZyYW1lc0NsYXNzTGlzdDogc3RyaW5nW107XHJcbiAgcHVibGljIGNvbnRhaW5lcnNDbGFzc0xpc3Q6IHN0cmluZ1tdO1xyXG5cclxuICBwcml2YXRlIF9hcnJFdmVyeUNvbXBvbmVudDogc3RyaW5nW107XHJcbiAgcHJpdmF0ZSBfYXJyQ29tcG9uZW50c1JlYWR5OiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBwcml2YXRlIF9zZXRNZWRpYUNvbnRyb2xsZXJzID0gbmV3IFNldDxTb3VuZFRhYmxlQ29tcG9uZW50PigpO1xyXG4gIHByaXZhdGUgX21hcE1lZGlhQ29udHJvbGxlcnNCeUlkID0gbmV3IE1hcDxzdHJpbmcsIFNvdW5kVGFibGVDb21wb25lbnQ+KCk7XHJcbiAgcHJpdmF0ZSBfbWFwSW5wdXRCeVNvdXJjZUlkOiBNYXA8c3RyaW5nLCBIVE1MRWxlbWVudD4gPSBuZXcgTWFwPHN0cmluZywgSFRNTEVsZW1lbnQ+KCk7O1xyXG5cclxuICBjb25zdHJ1Y3Rvciggb3B0aW9uczogU291bmRUYWJsZU9wdGlvbnMgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XHJcblxyXG4gICAgdGhpcy5pZnJhbWVzQ2xhc3NMaXN0ID0gb3B0aW9ucy5pZnJhbWVzQ2xhc3NMaXN0ID8/IFtdO1xyXG4gICAgdGhpcy5jb250YWluZXJzQ2xhc3NMaXN0ID0gb3B0aW9ucy5jb250YWluZXJzQ2xhc3NMaXN0ID8/IFtdO1xyXG5cclxuICAgIHRoaXMuX2FyckV2ZXJ5Q29tcG9uZW50ID0gWy4uLm9wdGlvbnMuYXJyTWVkaWFTcmMsIC4uLm9wdGlvbnMuYXJyVmlkZW9JZF07XHJcblxyXG4gICAgb3B0aW9ucy5hcnJNZWRpYVNyYy5mb3JFYWNoKCBtZWRpYVNyYyA9PiB7XHJcbiAgICAgIHRoaXMuYWRkQXVkaW9Db21wb25lbnQoIG9wdGlvbnMuY29udGFpbmVyLmlkLCBtZWRpYVNyYyApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5hcnJWaWRlb0lkLmZvckVhY2goIHZpZGVvSWQgPT4ge1xyXG4gICAgICB0aGlzLmFkZElmcmFtZSggYCR7IG9wdGlvbnMuY29udGFpbmVyLmlkIH1JZnJhbWVUYWJsZUl0ZW0keyB2aWRlb0lkIH1gLCB2aWRlb0lkIClcclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLmNvbXBvbmVudHNDb250cm9sbGVycy5mb3JFYWNoKCAoIGNvbXBvbmVudCApID0+IHtcclxuICAgICAgY29tcG9uZW50LmFkZEV2ZW50TGlzdGVuZXIoICdvbmludGVyYWN0aW9uYmxvY2tlZCcsICgpID0+IHtcclxuICAgICAgICBjb21wb25lbnQuc2VlayggMCwgdHJ1ZSApO1xyXG4gICAgICAgIGNvbXBvbmVudC5wbGF5V2l0aG91dFRyaWdnZXJFdmVudHMoKTtcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuXHJcbiAgICBZb3V0dWJlSWZyYW1lLmJ1aWxkSWZyYW1lcygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldElucHV0QnlTb3VyY2UoIHNyYzogc3RyaW5nICkge1xyXG4gICAgaWYgKCAhdGhpcy5fbWFwSW5wdXRCeVNvdXJjZUlkLmhhcyggc3JjICkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJFbGVtZW50IHNyYyBub3Qgb24gc291bmQgdGFibGUuXCIgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5fbWFwSW5wdXRCeVNvdXJjZUlkLmdldCggc3JjICkhO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgZXZlcnlDb21wb25lbnRSZWFkeSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9hcnJFdmVyeUNvbXBvbmVudC5sZW5ndGggPT09IHRoaXMuX2FyckNvbXBvbmVudHNSZWFkeS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBnZXQgY29tcG9uZW50c0NvbnRyb2xsZXJzKCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oIHRoaXMuX3NldE1lZGlhQ29udHJvbGxlcnMgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0RWxlbWVudE1lZGlhQ29udGFpbmVyKCBjb250YWluZXJJZDogc3RyaW5nICkge1xyXG4gICAgY29uc3QgZWxlbWVudE1lZGlhQ29udGFpbmVyID0gZ2V0RWxlbWVudEZyb21IVE1MKCB0ZW1wbGF0ZVNvdW5kVGFibGVJdGVtQ29udGFpbmVyKCBjb250YWluZXJJZCApICkgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBlbGVtZW50TWVkaWFDb250YWluZXIuY2xhc3NMaXN0LmFkZCggLi4udGhpcy5jb250YWluZXJzQ2xhc3NMaXN0ICk7XHJcbiAgICByZXR1cm4gZWxlbWVudE1lZGlhQ29udGFpbmVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRBdWRpb0NvbXBvbmVudCggY29udGFpbmVySWQ6IHN0cmluZywgc3JjOiBzdHJpbmcgKSB7XHJcbiAgICBjb25zdCBhdWRpb0NvbnRhaW5lciA9IHRoaXMuZ2V0RWxlbWVudE1lZGlhQ29udGFpbmVyKCBjb250YWluZXJJZCApO1xyXG4gICAgdGhpcy5jb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCAnYmVmb3JlZW5kJywgYXVkaW9Db250YWluZXIgKTtcclxuXHJcbiAgICBjb25zdCBpbnB1dEVsZW1lbnRDb250YWluZXIgPSBnZXRFbGVtZW50RnJvbUhUTUwoIHRlbXBsYXRlU291bmRUYWJsZUlucHV0KCBjb250YWluZXJJZCwgJ1NvdXJjZScsIHNyYyApICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgICBhdWRpb0NvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoICdiZWZvcmVlbmQnLCBpbnB1dEVsZW1lbnRDb250YWluZXIgKTtcclxuICAgIHRoaXMuX21hcElucHV0QnlTb3VyY2VJZC5zZXQoIGNvbnRhaW5lcklkLCBpbnB1dEVsZW1lbnRDb250YWluZXIgKTtcclxuXHJcbiAgICBBdWRpb0NvbXBvbmVudC5jcmVhdGVBdWRpb0NvbXBvbmVudCgge1xyXG4gICAgICBzcmM6IHNyYyxcclxuICAgICAgYXVkaW9FbGVtZW50SWQ6IGAkeyBjb250YWluZXJJZCB9SWZyYW1lVGFibGVJdGVtJHsgc3JjIH1gLFxyXG4gICAgICBibG9ja0ludGVyYWN0aW9uOiB0cnVlLFxyXG4gICAgICBjb250YWluZXI6IGF1ZGlvQ29udGFpbmVyXHJcbiAgICB9ICkudGhlbiggYXVkaW9Db21wb25lbnQgPT4ge1xyXG4gICAgICB0aGlzLl9zZXRNZWRpYUNvbnRyb2xsZXJzLmFkZCggYXVkaW9Db21wb25lbnQgKTtcclxuICAgICAgdGhpcy5fbWFwTWVkaWFDb250cm9sbGVyc0J5SWQuc2V0KCBjb250YWluZXJJZCwgYXVkaW9Db21wb25lbnQgKTtcclxuICAgICAgdGhpcy5fYXJyQ29tcG9uZW50c1JlYWR5LnB1c2goIGNvbnRhaW5lcklkICk7XHJcblxyXG4gICAgICBpbnB1dEVsZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvciggJ2lucHV0JyApIS5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnaW5wdXQnLCBpbnB1dEVsZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvciggJ2lucHV0JyApIS52YWx1ZSwgYXVkaW9Db21wb25lbnQgKTtcclxuICAgICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmlucHV0JywgaW5wdXRFbGVtZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoICdpbnB1dCcgKSEudmFsdWUsIGF1ZGlvQ29tcG9uZW50ICk7XHJcbiAgICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnaW5wdXRjaGFuZ2UnLCBpbnB1dEVsZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvciggJ2lucHV0JyApIS52YWx1ZSwgYXVkaW9Db21wb25lbnQgKTtcclxuICAgICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmlucHV0Y2hhbmdlJywgaW5wdXRFbGVtZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoICdpbnB1dCcgKSEudmFsdWUsIGF1ZGlvQ29tcG9uZW50ICk7XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIGlmICggdGhpcy5ldmVyeUNvbXBvbmVudFJlYWR5ICkge1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZElmcmFtZSggaWZyYW1lSWQ6IHN0cmluZywgdmlkZW9JZDogc3RyaW5nICkge1xyXG4gICAgaWYgKCB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5oYXMoIGlmcmFtZUlkICkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggXCJBIElmcmFtZSB3aXRoIHRoaXMgaWQgYWxyZWFkeSBleGlzdHM6IFwiICsgaWZyYW1lSWQgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlbGVtZW50SWZyYW1lQ29udGFpbmVyID0gdGhpcy5nZXRFbGVtZW50TWVkaWFDb250YWluZXIoIGlmcmFtZUlkICk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoICdiZWZvcmVlbmQnLCBlbGVtZW50SWZyYW1lQ29udGFpbmVyICk7XHJcblxyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50Q29udGFpbmVyID0gZ2V0RWxlbWVudEZyb21IVE1MKCB0ZW1wbGF0ZVNvdW5kVGFibGVJbnB1dCggaWZyYW1lSWQsICdTb3VyY2UnLCB2aWRlb0lkICkgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgZWxlbWVudElmcmFtZUNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoICdiZWZvcmVlbmQnLCBpbnB1dEVsZW1lbnRDb250YWluZXIgKTtcclxuICAgIHRoaXMuX21hcElucHV0QnlTb3VyY2VJZC5zZXQoIGlmcmFtZUlkLCBpbnB1dEVsZW1lbnRDb250YWluZXIgKTtcclxuXHJcbiAgICBjb25zdCBuZXdJZnJhbWUgPSBuZXcgWW91dHViZUlmcmFtZSgge1xyXG4gICAgICBpZnJhbWVJZDogaWZyYW1lSWQsXHJcbiAgICAgIHZpZGVvSWQ6IHZpZGVvSWQsXHJcbiAgICAgIHBhcmVudEVsZW1lbnQ6IGVsZW1lbnRJZnJhbWVDb250YWluZXIsXHJcbiAgICAgIHN0YXJ0c0F0OiAwLFxyXG4gICAgICBjbGFzc0xpc3Q6IFsnc291bmQtdGFibGUtaXRlbScsIC4uLnRoaXMuaWZyYW1lc0NsYXNzTGlzdF0sXHJcbiAgICAgIGJsb2NrSW50ZXJhY3Rpb246IHRydWVcclxuICAgIH0gKTtcclxuXHJcbiAgICBpbnB1dEVsZW1lbnRDb250YWluZXIucXVlcnlTZWxlY3RvciggJ2lucHV0JyApIS5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuY2FsbEV2ZW50c0J5TmFtZSggJ2lucHV0JywgaW5wdXRFbGVtZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoICdpbnB1dCcgKSEudmFsdWUsIG5ld0lmcmFtZSApO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdvbmlucHV0JywgaW5wdXRFbGVtZW50Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoICdpbnB1dCcgKSEudmFsdWUsIG5ld0lmcmFtZSApO1xyXG4gICAgICB0aGlzLmNhbGxFdmVudHNCeU5hbWUoICdpbnB1dGNoYW5nZScsIGlucHV0RWxlbWVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCAnaW5wdXQnICkhLnZhbHVlLCBuZXdJZnJhbWUgKTtcclxuICAgICAgdGhpcy5jYWxsRXZlbnRzQnlOYW1lKCAnb25pbnB1dGNoYW5nZScsIGlucHV0RWxlbWVudENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCAnaW5wdXQnICkhLnZhbHVlLCBuZXdJZnJhbWUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLl9zZXRNZWRpYUNvbnRyb2xsZXJzLmFkZCggbmV3SWZyYW1lICk7XHJcbiAgICB0aGlzLl9tYXBNZWRpYUNvbnRyb2xsZXJzQnlJZC5zZXQoIGlmcmFtZUlkLCBuZXdJZnJhbWUgKTtcclxuICAgIHRoaXMuX2FyckNvbXBvbmVudHNSZWFkeS5wdXNoKCBpZnJhbWVJZCApO1xyXG5cclxuICAgIGlmICggdGhpcy5ldmVyeUNvbXBvbmVudFJlYWR5ICkge1xyXG4gICAgICB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkF1ZGlvQ29tcG9uZW50IiwiT2JqZWN0RXZlbnRMaXN0ZW5lciIsInNyYyIsImF1ZGlvRWxlbWVudCIsIl9jb250YWluZXIiLCJfYmxvY2tJbnRlcmFjdGlvbiIsIl9kaXZCbG9ja0ludGVyYWN0aW9uIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwic3VwZXIiLCJ0aGlzIiwiY29udGFpbmVyIiwiYmxvY2tJbnRlcmFjdGlvbiIsImF1ZGlvRWxlbWVudElkIiwiaWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcCIsImdldEludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24iLCJzZXR1cEludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24iLCJzZXRFbGVtZW50c0F0dHJpYnV0ZXMiLCJfdmlkZW9JbmZvQXR0cmlidXRlTGlzdCIsInJlbW92ZUZpbGVQYXRoIiwic2V0QXR0cmlidXRlTGlzdEZvckVsZW1lbnQiLCJkaXZCbG9ja0ludGVyYWN0aW9uIiwicGF1c2VkIiwiZmlsZU5hbWUiLCJxdWVyeVNlbGVjdG9yIiwiY3VycmVudFRpbWUiLCJ0Iiwic291cmNlRWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2hhbmdlU291cmNlIiwiaW5uZXJIVE1MIiwic291cmNlRWxlbWVudEhUTUwiLCJsb2FkIiwicGxheVdpdGhvdXRUcmlnZ2VyRXZlbnRzIiwicGxheVByb21pc2UiLCJwbGF5IiwidW5kZWZpbmVkIiwidGhlbiIsIl8iLCJjYXRjaCIsInNldENsYXNzZXNQbGF5aW5nIiwicGF1c2VXaXRob3V0VHJpZ2dlckV2ZW50cyIsInBhdXNlIiwic2V0Q2xhc3Nlc1BhdXNlZCIsInJlbW92ZSIsImNhbGxFdmVudHNCeU5hbWUiLCJ0b2dnbGUiLCJtdXRlIiwidm9sdW1lIiwidW5tdXRlIiwic2VlayIsInNlZWtUaW1lIiwiX3JlbG9hZEJ1ZmZlciIsImRpbWVuc2lvbnMiLCJnZXRFbGVtZW50RGltZW5zaW9ucyIsImF1ZGlvQ29tcG9uZW50IiwiZWxlbWVudEludmlzaWJsZURpdiIsImNyZWF0ZUludmlzaWJsZURpdkFib3ZlUGFyZW50IiwicGFyZW50RWxlbWVudCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsIndpZHRoIiwiaGVpZ2h0Iiwic3R5bGUiLCJkaXNwbGF5IiwiekluZGV4IiwiY3JlYXRlQXVkaW9Db21wb25lbnRPbkJvZHkiLCJhdWRpb0NvbXBvbmVudENvbnRhaW5lciIsIkF1ZGlvQ29tcG9uZW50RmFjdG9yeSIsImJ1aWxkT25Cb2R5IiwiY3JlYXRlQXVkaW9Db21wb25lbnQiLCJkb2N1bWVudCIsImJvZHkiLCJidWlsZCIsIkNvbXBvbmVudENvbnRhaW5lciIsInBsYXllckNvbmZpZyIsImNyZWF0ZUludmlzaWJsZVBsYXllciIsImJ1aWxkU3ViQ29tcG9uZW50cyIsInBhcmVudCIsIl9lbGVtZW50IiwidGVtcGxhdGVFbGVtZW50IiwiY29tcG9uZW50TmFtZSIsInN1YkNvbXBvbmVudENvdW50QnlOYW1lIiwiTWFwIiwic3ViQ29tcG9uZW50cyIsInRlbXBsYXRlIiwiZ2V0RWxlbWVudEJ5SWQiLCJFcnJvciIsImNyZWF0ZUVsZW1lbnQiLCJjb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJnZXRUZW1wbGF0ZUNsb25lTm9kZXMiLCJjbG9uZU5vZGUiLCJjaGlsZHJlbiIsImJ1aWxkU2luZ2xlU3ViQ29tcG9uZW50IiwiY29tcG9uZW50IiwiaGFzIiwic2V0IiwiY29tcG9uZW50Q291bnQiLCJnZXQiLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJlbGVtZW50SWQiLCJpdGVtIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwidGVtcGxhdGVTb3VuZFRhYmxlSXRlbUNvbnRhaW5lciIsIml0ZW1JZCIsInRyaW0iLCJ0ZW1wbGF0ZVNvdW5kVGFibGVJbnB1dCIsImxhYmVsVGV4dCIsInZhbHVlIiwicGxhY2Vob2xkZXIiLCJ0ZW1wbGF0ZUJhY2tncm91bmRZb3V0dWJlSWZyYW1lRWxlbWVudCIsImlmcmFtZUlkIiwiWW91dHViZUlmcmFtZSIsInN0YXRpYyIsInBsYXllciIsIl9pc1BsYXllclJlYWR5IiwiX3ZpZGVvSWQiLCJ2aWRlb05hbWUiLCJ2aWRlb1RodW1iIiwiY2hhbm5lbFVSTCIsImNoYW5uZWxOYW1lIiwiX2lmcmFtZUVsZW1lbnQiLCJfaWZyYW1lQ29udGFpbmVyIiwiX2lmcmFtZVBhcmVudEVsZW1lbnQiLCJfaXNQbGF5aW5nIiwiX2RpbWVuc2lvbnMiLCJ0b3BEaXYiLCJfc3RhcnRzQXQiLCJfc3RhcnRNdXRlZCIsIl9wbGF5aW5nT2JzZXJ2ZXJJbnRlcnZhbCIsIl9ldmVudExpc3RlbmVyIiwiX2RpY3RZb3V0dWJlSWZyYW1lQnlJZCIsInN0YXJ0c0F0IiwidmlkZW9JZCIsInN0YXJ0TXV0ZWQiLCJnZXRZb3V0dWJlSWZyYW1lRWxlbWVudCIsInNldHVwUGFyZW50RnJvbVlvdXR1YmVJZnJhbWUiLCJpZnJhbWVDb250YWluZXIiLCJzZXRDbGFzc2VzSWZyYW1lUGF1c2VkIiwic2V0VmlkZW9JbmZvIiwiZXh0cmFjdFlvdVR1YmVJZCIsImluZm8iLCJnZXRWaWRlb0luZm8iLCJ0aXRsZSIsImF1dGhvcl9uYW1lIiwidGh1bWJuYWlsX3VybCIsImF1dGhvcl91cmwiLCJjaGFuZ2VWaWRlbyIsImlzVmFsaWRZb3V0dWJlVXJsT3JJZCIsImxvYWRWaWRlb0J5SWQiLCJwcmVwYXJlT3B0aW9ucyIsInNlZWtUbyIsImlzUGxheWluZyIsInNldFRpbWVvdXQiLCJsb2FkVmlkZW8iLCJzZXRFeHRlcm5hbEhUTUxFbGVtZW50c0F0dHJpYnV0ZXMiLCJyZXNwb25zZSIsImhhbmRsZVByb21pc2UiLCJmZXRjaCIsInZpZGVvVVJMIiwiZXJyb3IiLCJkYXRhIiwianNvbiIsImNvbnNvbGUiLCJvblBsYXllclJlYWR5IiwiZXZlbnQiLCJfYXJyWW91dHViZUlmcmFtZUlkUmVhZHkiLCJwdXNoIiwic2V0UGxheWJhY2tRdWFsaXR5IiwicGF1c2VWaWRlbyIsImNoZWNrSWZFdmVyeUlmcmFtZUlzUmVhZHkiLCJvblBsYXllclN0YXRlQ2hhbmdlIiwiX3lvdXR1YmVBUElSZWZlcmVuY2UiLCJQbGF5ZXJTdGF0ZSIsIlBMQVlJTkciLCJzZXRDbGFzc2VzSWZyYW1lUGxheWluZyIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm9uRXZlcnlZb3V0dWJlSWZyYW1lUmVhZHkiLCJpZnJhbWVFbGVtZW50IiwiaXNQbGF5ZXJSZWFkeSIsImR1cmF0aW9uIiwiZ2V0RHVyYXRpb24iLCJwbGF5ZXJEdXJhdGlvbiIsImdldEN1cnJlbnRUaW1lIiwicGxheWVyQ3VycmVudFRpbWUiLCJwcm9ncmVzc1BlcmNlbnQiLCJwbGF5ZXJQcm9ncmVzc1BlcmNlbnQiLCJjbGFtcCIsInZhbCIsInBsYXlWaWRlbyIsInJlbG9hZEJ1ZmZlciIsImNvbnNpZGVyU3RhcnRzQXQiLCJrZXlzIiwic29tZSIsInIiLCJpbmNsdWRlcyIsImFyck9iamVjdFRvU2V0T25FdmVyeUlmcmFtZVJlYWR5IiwiZm9yRWFjaCIsIm8iLCJzZXR1cCIsImtleSIsImNvbnRhaW5lckRpdiIsImluc2VydEFkamFjZW50SFRNTCIsImlmcmFtZVBhcmVudEVsZW1lbnQiLCJzZXRFeHRlcm5hbEhUTUxFbGVtZW50cyIsImNyZWF0ZUludmlzaWJsZURpdlRvcCIsImNyZWF0ZUludmlzaWJsZURpdkJsb2NrSW50ZXJhY3Rpb24iLCJzZXRJZnJhbWVDb250YWluZXJBdHRyaWJ1dGVzIiwic2V0VG9wRGl2QXR0cmlidXRlcyIsInNldERpdkJsb2NrSW50ZXJhY3Rpb25BdHRyaWJ1dGVzIiwiZ2V0SW52aXNpYmxlVG9wRGl2IiwiZXZ0IiwiaW5pdFBsYXllciIsIlBsYXllciIsInBsYXllclZhcnMiLCJldmVudHMiLCJiaW5kIiwiYnVpbGRJZnJhbWVzIiwidGFnIiwiZmlyc3RTY3JpcHRUYWciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJ3YWl0VW50aWxFbGVtZW50RXhpc3RzIiwicG9sbEZvclZhcmlhYmxlIiwicHJvdG90eXBlIiwibG9hZGVkIiwic2V0WW91dHViZUlmcmFtZUVsZW1lbnRzIiwieXRJZnJhbWUiLCJTdHJpbmciLCJpc051bGxPckVtcHR5IiwidHJ1bmNhdGUiLCJtYXgiLCJkZWNvcmF0b3IiLCJsZW5ndGgiLCJzdWJzdHJpbmciLCJ0b1N0cmluZyIsInJlbW92ZUFjY2VudHMiLCJub3JtYWxpemUiLCJyZXBsYWNlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJ6ZXJvQmVmb3JlIiwicGFkU3RhcnQiLCJldmVudHNCeU5hbWUiLCJldmVudE5hbWUiLCJ0b0xvd2VyQ2FzZSIsImdldEV2ZW50c0J5TmFtZSIsImV2ZW50QXJncyIsImUiLCJhcnJTb3VyY2VzIiwiZ2V0RWxlbWVudEZyb21IVE1MIiwiYXV0b1BsYXkiLCJhdXRvcGxheSIsIm11dGVkIiwibG9vcCIsInByZWxvYWQiLCJ0cmltRW5kIiwiYXVkaW9FbGVtZW50UGFyYW1zQnlQbGF5ZXJDb25maWciLCJtYXAiLCJyZWR1Y2UiLCJhY2MiLCJuZXh0IiwiYXVkaW9FbGVtZW50SFRNTCIsImhpZGVFbGVtZW50IiwiZ2V0RmlsZUV4dGVuc2lvbiIsImRpY3RLZXlzQnlBY3Rpb25LZXlkb3duT25jZSIsImRpY3RLZXlzQnlBY3Rpb25LZXlkb3duUmVwZWF0IiwiZGljdEtleXNCeUFjdGlvbktleXVwIiwiYXN5bmMiLCJwcm9taXNlIiwiaW5wdXQiLCJ0ZXN0IiwibWF0Y2giLCJlbGVtZW50IiwiYXR0ckxpc3QiLCJzZXRBdHRyaWJ1dGUiLCJodG1sIiwicmVzdWx0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInZhcmlhYmxlTmFtZSIsInJlYWR5Q29uZGl0aW9uIiwiY2FsbGJhY2siLCJwb2xsIiwid2luZG93Iiwic2VsZWN0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsImRpc2Nvbm5lY3QiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImludmlzaWJsZURpdiIsIm9wYWNpdHkiLCJwb2ludGVyRXZlbnRzIiwicmVwZWF0IiwicGFpciIsImNvZGUiLCJrYkV2ZW50IiwicnVuT25seU9uY2VLZXlkb3duQWN0aW9ucyIsInJ1bktleWRvd25BY3Rpb25zUmVwZWF0IiwiZmlsZVBhdGgiLCJleGVjIiwiZGVmYXVsdEZpbGVTcmMiLCJzcGxpdCIsInBvcCIsImZpbGVUeXBlU3RyIiwibnVtIiwibWluIiwiTWF0aCIsInN0ciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJTb3VuZFRhYmxlIiwiaWZyYW1lc0NsYXNzTGlzdCIsImNvbnRhaW5lcnNDbGFzc0xpc3QiLCJfYXJyRXZlcnlDb21wb25lbnQiLCJfYXJyQ29tcG9uZW50c1JlYWR5IiwiX3NldE1lZGlhQ29udHJvbGxlcnMiLCJTZXQiLCJfbWFwTWVkaWFDb250cm9sbGVyc0J5SWQiLCJfbWFwSW5wdXRCeVNvdXJjZUlkIiwiYXJyTWVkaWFTcmMiLCJhcnJWaWRlb0lkIiwibWVkaWFTcmMiLCJhZGRBdWRpb0NvbXBvbmVudCIsImFkZElmcmFtZSIsImluaXQiLCJjb21wb25lbnRzQ29udHJvbGxlcnMiLCJnZXRJbnB1dEJ5U291cmNlIiwiZXZlcnlDb21wb25lbnRSZWFkeSIsImdldEVsZW1lbnRNZWRpYUNvbnRhaW5lciIsImNvbnRhaW5lcklkIiwiZWxlbWVudE1lZGlhQ29udGFpbmVyIiwiYXVkaW9Db250YWluZXIiLCJpbnB1dEVsZW1lbnRDb250YWluZXIiLCJlbGVtZW50SWZyYW1lQ29udGFpbmVyIiwibmV3SWZyYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==
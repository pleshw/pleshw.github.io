var SectionScroller;(()=>{"use strict";var e={7930:(e,t,o)=>{o.d(t,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(e,t){this.eventsByName.has(e.toLowerCase())?this.eventsByName.get(e.toLowerCase()).push(t):this.eventsByName.set(e.toLowerCase(),[t])}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e(...t)))}}},1319:(e,t,o)=>{o.d(t,{debounceFactory:()=>r});const n=new Map,s=new Map,i=new Map;function r(e,t){let o;return function(){const n=window,s=arguments;clearTimeout(o),o=window.setTimeout((()=>e.apply(n,s)),t)}}new Map,window.addEventListener("keydown",(e=>{e.repeat||function(e){for(const t of n)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e),function(e){for(const t of s)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e)})),window.addEventListener("keyup",(e=>{for(const t of i)e.code===t[0]&&t[1].forEach((t=>t(e)))}))},739:(e,t,o)=>{function n(e=0,t=0,o=100){return Math.max(t,Math.min(e,o))}o.d(t,{clamp:()=>n})}},t={};function o(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,o),i.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{o.r(n),o.d(n,{SectionScroller:()=>i});var e=o(1319),t=o(739),s=o(7930);class i extends s.ObjectEventListener{static _globalInstance=new i;static _debounceWheel;_index;_sections;constructor(){super(),this._index=0,this._sections=Array.from(document.querySelectorAll("section"))}get section(){return this._sections[this._index]}scrollToSectionByIndex(e){e=(0,t.clamp)(e,0,this._sections.length-1),this.callEventsByName("onscroll",this.section,this._index),e>this._index?this.callEventsByName("onscrolldown",this.section,this._index):e<this._index?this.callEventsByName("onscrollup",this.section,this._index):this.callEventsByName("onscrollfailed",this.section,this._index),this._index=e,this._sections[e].scrollIntoView({behavior:"smooth",block:"start"})}scrollToPreviousSection(){return this.scrollToSectionByIndex(this._index-1)}scrollToNextSection(){return this.scrollToSectionByIndex(this._index+1)}static makeGlobalScrollSectionScroller(){i._debounceWheel=(0,e.debounceFactory)((e=>{e.deltaY>0?i._globalInstance.scrollToNextSection():i._globalInstance.scrollToPreviousSection()}),500),window.addEventListener("wheel",(function(e){i._debounceWheel(e)}))}}})(),SectionScroller=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
var Soundboard;(()=>{"use strict";var e={6401:(e,t,i)=>{i.d(t,{ComponentContainer:()=>n});class n{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(e,t){if("string"==typeof t){const e=document.getElementById(t);if(!e)throw new Error("Invalid template for scene component. Template id: "+t);this.templateElement=e}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(t),document.body.appendChild(this.templateElement);this.componentName=e}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(e,t){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let i=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,i+1),await e.build(t,`${this.componentName}${e.componentName.capitalizeFirstLetter()}${i}`)}async buildOnBody(e){this._element=document.createElement("div"),e&&(this._element.id=e);for(let e of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",e);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${e}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(e,t){for(let t of this.getTemplateCloneNodes())e.insertAdjacentElement("afterbegin",t);return await this.buildSubComponents(e),e}}},241:(e,t,i)=>{i.d(t,{MediaComponent:()=>m});var n=i(6696),s=i(1319),a=i(3164),r=i(739),o=i(2843),d=i(4271),l=i(2560);class m extends l.S{src;mediaElement;_container;_isReady=!1;_startsAt;_blockInteraction=!1;_divBlockInteraction;constructor(e){super(),this.src=e.src,this._container=e.container,this.mediaElement=e.mediaElement,this._blockInteraction=!!e.blockInteraction,e.mediaElementId&&(this.mediaElement.id=e.mediaElementId),this._startsAt=e.startsAt??0,this.mediaElement.classList.add("media-component"),this.mediaElement.addEventListener("ended",(()=>{this.stop()})),this._container.id||(this._container.id=e.mediaElementId+"MediaComponentContainer"),this._container.classList.add("media-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction(),this.setElementsAttributes(),this.mediaElement.setAttribute("width",`${this.dimensions.width}px`),this.mediaElement.setAttribute("height",`${this.dimensions.height}px`),this.mediaElement.load(),this.mediaElement.addEventListener("loadedmetadata",(()=>{this._isReady=!0,this.callEventsByName("onmediaready",this),this.callEventsByName("onmediacomponentready",this)}))}destroy(){this.container.remove()}get isReady(){return this._isReady}get isPlaying(){return!this.mediaElement.paused}set id(e){this.mediaElement.id=e}get id(){return this.mediaElement.id}get _videoInfoAttributeList(){return[["media-component-src",this.src],["media-component-name",this.name]]}get name(){return(0,o.replacePercentEncoding)((0,a.removeFilePath)(this.src))}setElementsAttributes(){(0,s.setAttributeListForElement)(this.mediaElement,this._videoInfoAttributeList),(0,s.setAttributeListForElement)(this.container,this._videoInfoAttributeList),(0,s.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.mediaElement.paused}get fileName(){return this.mediaElement.src||this.mediaElement.querySelector("source")?.src||""}set startsAt(e){this._startsAt=e}get startsAt(){return this._startsAt}set playerCurrentTime(e){this.mediaElement.currentTime=e}get playerCurrentTime(){return this.mediaElement.currentTime}get playerDuration(){return this.mediaElement.duration}get duration(){return this.duration-this._startsAt}get currentTime(){return this.playerCurrentTime-this.startsAt}set currentTime(e){const t=(0,r.clamp)(e+this.startsAt,this.startsAt,this.playerDuration);this.seek(t)}get sourceElements(){return Array.from(this.mediaElement.querySelectorAll("source"))}async changeSource(e,t){this._isReady=!1,this.id=t??this.id,this.src=e,this.mediaElement.innerHTML=(0,n.audioSourceElementHTML)(this.src),await this.load(),this.setElementsAttributes(),this.stop()}async load(){return new Promise(((e,t)=>{this._isReady=!1,this.mediaElement.readyState>=HTMLMediaElement.HAVE_METADATA?(this._isReady=!0,this.callEventsByName("onmedialoaded",this),this.callEventsByName("onmediacomponentloaded",this),e()):(this.mediaElement.addEventListener("loadedmetadata",(()=>{this._isReady=!0,this.callEventsByName("onmedialoaded",this),this.callEventsByName("onmediacomponentloaded",this),e()})),this.mediaElement.addEventListener("error",(e=>{this._isReady=!1,this.callEventsByName("onmedialoaderror",this),this.callEventsByName("onmediacomponentloaderror",this),t(e)}))),this.mediaElement.load()}))}playWithoutTriggerEvents(){var e=this.mediaElement.play();return void 0!==e&&e.then((e=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.mediaElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("media-component-playing"),this._divBlockInteraction.classList.add("media-component-playing"),this._container.classList.remove("media-component-paused"),this._divBlockInteraction.classList.remove("media-component-paused")}setClassesPaused(){this._container.classList.add("media-component-paused"),this._divBlockInteraction.classList.add("media-component-paused"),this._container.classList.remove("media-component-playing"),this._divBlockInteraction.classList.remove("media-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.mediaElement.currentTime=this.startsAt,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.mediaElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.mediaElement.volume=1,this.callEventsByName("onunmute",this),this}seek(e,t){return this.playerCurrentTime=e,this.callEventsByName("onseek",this),this}get dimensions(){return(0,s.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(e){const t=(0,s.createInvisibleDivAboveParent)({parentElement:e._container,id:`invisibleDivBlockInteraction${e._container.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("media-component-div-block-interaction"),t}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createMediaComponentOnBody(e){const t=(0,n.getMediaTypeBySource)(e.src),i=(0,n.getMediaDefaultsByMediaType)(t),s=await new d.MediaComponentFactory(e.src,i).buildOnBody();return new m({src:e.src,container:s,mediaElement:s.querySelector(t),mediaElementId:e.mediaElementId,blockInteraction:e.blockInteraction})}static async createMediaComponentByType(e){const t=(0,n.getMediaTypeBySource)(e.src),i=(0,n.getMediaDefaultsByMediaType)(t);if(e.container===document.body||!e.container)return this.createMediaComponentOnBody(e);const s=await new d.MediaComponentFactory(e.src,i).build(e.container);return new m({src:e.src,container:s,mediaElement:s.querySelector(t),mediaElementId:e.mediaElementId,blockInteraction:e.blockInteraction})}static async createMediaComponent(e){const t=(0,n.getMediaTypeBySource)(e.src),i=(0,n.getMediaDefaultsByMediaType)(t);if(!i||!t)throw new Error("Invalid media type");if(e.container===document.body||!e.container)return this.createMediaComponentOnBody(e);const s=await new d.MediaComponentFactory(e.src,i).build(e.container);return new m({src:e.src,container:s,mediaElement:s.querySelector(t),mediaElementId:e.mediaElementId,blockInteraction:e.blockInteraction})}}},4271:(e,t,i)=>{i.d(t,{MediaComponentFactory:()=>a});var n=i(6696),s=i(6401);class a extends s.ComponentContainer{constructor(e,t){super("audioComponent",(0,n.createMediaPlayer)([e],t))}async buildSubComponents(e){}}},6167:(e,t,i)=>{i.d(t,{templateSoundboardInput:()=>a,templateSoundboardItemContainer:()=>s});var n=i(2843);function s(e,t=""){return`\n  <div id="${e}SoundTableItem" class="sound-table-item-container">\n      <div class="sound-table-media-name-container position-absolute bottom-100 start-0 text-truncate" style="max-width: 100%;">\n        <span class="sound-table-media-name fw-bolder text-dark text-truncate" title="${(0,n.replacePercentEncoding)(t)}">\n          ${(0,n.replacePercentEncoding)(t)}\n        </span>\n      </div>\n  </div>\n  `.trim()}function a(e,t,i="",n=""){return`\n    <div class="sound-table-input-container text-truncate position-absolute top-0 start-0 w-100 h-100" style="z-index: 999 !important; pointer-events: none !important;">\n      <div class="form-floating position-absolute bottom-0 start-0" style="pointer-events: auto !important;">\n        <input type="text" value="${i}" class="form-control sound-table-input text-truncate" id="urlInput${e}" placeholder="${n}">\n        <label for="urlInput${e}">${t}</label>\n      </div>\n\n      <div class="sound-table-remove-item-container position-absolute top-0 end-0" style="pointer-events: auto !important;">\n        <button type="button" class="sound-table-remove-item-button btn-close badge rounded-0 bg-danger opacity-100 p-3">\n        </button>\n      </div>\n    </div>\n  `}},2560:(e,t,i)=>{i.d(t,{S:()=>s});var n=i(7930);class s extends n.ObjectEventListener{constructor(){super()}}},2152:(e,t,i)=>{function n(e){return`\n  <div id="${e}">\n  </div>\n  `.trim()}i.d(t,{templateBackgroundYoutubeIframeElement:()=>n})},5102:(e,t,i)=>{i.d(t,{YoutubeIframe:()=>d});var n=i(1319),s=(i(4763),i(739)),a=i(2152),r=(i(4785),i(3362),i(7930)),o=i(2560);class d extends o.S{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;_videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;topDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new r.ObjectEventListener;cachedVideoInfo={};constructor(e){if(d._dictYoutubeIframeById.has(e.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=e.iframeId,this._startsAt=e.startsAt??0,this._videoId=e.videoId,this._startMuted=!!e.startMuted,this._blockInteraction=!!e.blockInteraction,this._iframeContainer=d.getYoutubeIframeElement({iframeId:e.iframeId,classList:e.classList}),this._iframeParentElement=d.setupParentFromYoutubeIframe({parentElement:e.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=e.dimensions??(0,n.getElementDimensions)(this._iframeParentElement),d._dictYoutubeIframeById.set(e.iframeId,this),this.setVideoInfo().then((()=>{this.setExternalHTMLElementsAttributes()}))}get name(){return this.videoName}get container(){return this._iframeContainer}get videoId(){return(0,n.extractYouTubeId)(this._videoId)}destroy(){this.player.destroy(),this.container.remove(),d._dictYoutubeIframeById.delete(this.id)}async setVideoInfo(){this.cachedVideoInfo=await this.getVideoInfo()??{},this.videoName=this.cachedVideoInfo.title?this.cachedVideoInfo.title:"",this.channelName=this.cachedVideoInfo.author_name?this.cachedVideoInfo.author_name:"",this.videoThumb=this.cachedVideoInfo.thumbnail_url?this.cachedVideoInfo.thumbnail_url:"",this.channelURL=this.cachedVideoInfo.author_url?this.cachedVideoInfo.author_url:""}async changeVideo(e){if((0,n.isValidYoutubeUrlOrId)(e.videoId)){for(;!this.player||!this.player.loadVideoById;)await(0,n.delay)(100);this.prepareOptions(e),await this.loadVideo(),this.player.seekTo(this.startsAt,!0),this.isPlaying?this.playWithoutTriggerEvents():this.pauseWithoutTriggerEvents()}}prepareOptions(e){this.id=e.iframeId,this._videoId=e.videoId,this.startsAt=e.startsAt??this.startsAt}async loadVideo(){this._isPlayerReady=!1,this.player.loadVideoById({videoId:this.videoId,startSeconds:this.startsAt,suggestedQuality:"highres"}),await this.setVideoInfo(),this.setExternalHTMLElementsAttributes()}async loadVideoInfo(){return await this.setVideoInfo(),this.setExternalHTMLElementsAttributes(),this.cachedVideoInfo}async getVideoInfo(){const e=await(0,n.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));return e.error?(console.error(e.error),null):await e.data().json()}onPlayerReady(e){this._startMuted&&this.player.mute(),d._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),d.checkIfEveryIframeIsReady()}onPlayerStateChange(e){e.data===d._youtubeAPIReference.PlayerState.PLAYING?(this._isPlaying=!0,this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this,this.isPlaying)),100),this.setClassesIframePlaying()):this._playingObserverInterval&&(clearInterval(this._playingObserverInterval),this.setClassesIframePaused(),this._isPlaying=!1,this._playingObserverInterval=null),this.callEventsByName("playerstatechange",this,this.isPlaying),this.callEventsByName("onplayerstatechange",this,this.isPlaying)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(e){const t=(0,s.clamp)(e+this.startsAt,this.startsAt,this.playerDuration);this.seek(t)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,s.clamp)(this._startsAt,0,this._startsAt)}set startsAt(e){this._startsAt=(0,s.clamp)(e,0,e)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(e,t=!1,i=!1){return this.callEventsByName("onseek",e,t,i,this),e+=i?this._startsAt:0,this.player.seekTo(e,t),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...d._dictYoutubeIframeById.keys()].some((e=>!this._arrYoutubeIframeIdReady.includes(e)))||(this.arrObjectToSetOnEveryIframeReady.forEach((e=>e.setup(d._dictYoutubeIframeById))),d._dictYoutubeIframeById.forEach(((e,t)=>{e.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:e,classList:t}){const i=document.createElement("div");return i.classList.add("yt-iframe-container"),t&&i.classList.add(...t),i.id=`containerYoutubeIframe${e}`,i.insertAdjacentHTML("afterbegin",(0,a.templateBackgroundYoutubeIframeElement)(e)),i}static setupParentFromYoutubeIframe({parentElement:e,iframeContainer:t}){const i=e??document.body;return i.classList.add("yt-iframe-parent"),i.insertAdjacentElement("afterbegin",t),i}setExternalHTMLElements(){this.createInvisibleDivTop(),this.createInvisibleDivBlockInteraction(),this.setExternalHTMLElementsAttributes()}setExternalHTMLElementsAttributes(){this.setIframeContainerAttributes(),this.setTopDivAttributes(),this.setDivBlockInteractionAttributes()}createInvisibleDivTop(){this.topDiv=d.getInvisibleTopDiv(this),this.topDiv.style.zIndex="990"}createInvisibleDivBlockInteraction(){this._divBlockInteraction=d.getInvisibleDivBlockInteraction(this),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(e=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}setDivBlockInteractionAttributes(){this.divBlockInteraction&&(0,n.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}setIframeContainerAttributes(){this._iframeContainer&&(0,n.setAttributeListForElement)(this._iframeContainer,this._videoInfoAttributeList)}setTopDivAttributes(){this.topDiv&&(0,n.setAttributeListForElement)(this.topDiv,this._videoInfoAttributeList)}set blockInteraction(e){this._blockInteraction=e,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new d._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;get _videoInfoAttributeList(){return[["yt-iframe-id",this.id],["yt-iframe-video-name",this.videoName],["yt-iframe-video-channel-name",this.channelName],["yt-iframe-video-thumb-url",this.videoThumb],["yt-iframe-video-channel-url",this.channelURL]]}static async buildSingleIframe(e){if(e._isPlayerReady)return e;if(!document.getElementById("ytIframeAPIScriptTag")){var t=document.createElement("script");t.id="ytIframeAPIScriptTag",t.src="https://www.youtube.com/iframe_api";var i=document.getElementsByTagName("script")[0];i&&i.parentNode&&i.parentNode.insertBefore(t,i)}return await(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag"),await(0,n.pollForVariableAsync)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(t=>{d._youtubeAPIReference=t,e.build()})),await e.loadVideoInfo(),e}static buildIframes(){if(!document.getElementById("ytIframeAPIScriptTag")){var e=document.createElement("script");e.id="ytIframeAPIScriptTag",e.src="https://www.youtube.com/iframe_api";var t=document.getElementsByTagName("script")[0];t&&t.parentNode&&t.parentNode.insertBefore(e,t)}(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag").then((()=>{(0,n.pollForVariable)("YT",(e=>"function"==typeof e.Player&&e.Player.prototype&&e.Player.prototype.constructor===e.Player&&e.loaded),(e=>{d._youtubeAPIReference=e,d.setYoutubeIframeElements()}))}))}build(){this.setExternalHTMLElements(),this.initPlayer()}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((e,t)=>{e.isPlayerReady||e.build()}))}static getInvisibleTopDiv(e){return(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleTopDivHoldToDrag${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:.2*e.dimensions.height}})}static getInvisibleDivBlockInteraction(e){const t=(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(e.id).parentElement,id:`invisibleDivBlockInteraction${e.id}`,position:{top:0,left:0},dimensions:{width:e.dimensions.width,height:e.dimensions.height}});return t.classList.add("yt-div-block-interaction"),t}}},4785:(e,t,i)=>{i.d(t,{YoutubeIframe:()=>n.YoutubeIframe});var n=i(5102)},3362:(e,t,i)=>{i(5102)},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(e,t="..."){return(this.length>e?this.substring(0,e)+t:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},4763:(e,t,i)=>{i(1319),i(8586)},8586:(e,t,i)=>{i(1319)},7930:(e,t,i)=>{i.d(t,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(e,t){const i={id:crypto.randomUUID(),event:t};return this.eventsByName.has(e.toLowerCase())?(this.eventsByName.get(e.toLowerCase()).push(i),i.id):(this.eventsByName.set(e.toLowerCase(),[i]),i.id)}getEventsByName(e){return this.eventsByName.has(e.toLowerCase())||this.eventsByName.set(e.toLowerCase(),[]),this.eventsByName.get(e.toLowerCase())}removeEventById(e){this.eventsByName.forEach(((t,i)=>{this.eventsByName.set(i,t.filter((t=>t.id!==e)))}))}callEventsByName(e,...t){this.getEventsByName(e).forEach((e=>e.event(...t)))}}},1319:(e,t,i)=>{i.d(t,{createInvisibleDivAboveParent:()=>I,delay:()=>y,extractYouTubeId:()=>d,getElementDimensions:()=>c,getElementFromHTML:()=>m,handlePromise:()=>r,hideElement:()=>f,insertElementAtIndex:()=>v,isValidYoutubeUrlOrId:()=>o,pollForVariable:()=>u,pollForVariableAsync:()=>h,setAttributeListForElement:()=>l,waitUntilElementExists:()=>p});const n=new Map,s=new Map,a=new Map;async function r(e){try{const t=await e;return{data:()=>t,error:null}}catch(e){return console.error(e),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:e instanceof Error?e:new Error(String(e))}}}function o(e){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(e)||/^[a-zA-Z0-9_-]{11}$/.test(e)}function d(e){const t=e.match(/[?&]v=([^?&]+)/);return t&&t[1]?t[1]:11===e.length?e:null}function l(e,t){t.forEach((([t,i])=>{e.setAttribute(t,i)}))}function m(e,t=!0){if(!(e=t?e.trim():e))return null;const i=document.createElement("template");i.innerHTML=e;const n=i.content.children;return 1===n.length?n[0]:Array.from(n)}function c(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height}}function u(e,t,i){const n=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(n),i(window[e]))}),100)}async function h(e,t,i){return new Promise((n=>{const s=setInterval((()=>{void 0!==window[e]&&t(window[e])&&(clearInterval(s),i(window[e]),n())}),100)}))}function p(e){return new Promise((t=>{if(document.querySelector(e))return t(document.querySelector(e));const i=new MutationObserver((n=>{document.querySelector(e)&&(i.disconnect(),t(document.querySelector(e)))}));i.observe(document.body,{childList:!0,subtree:!0})}))}async function y(e){return new Promise((t=>setTimeout(t,e)))}function v(e,t,i){const n=e.childNodes;if(!(i>=0&&i<=n.length))throw console.error("Index out of bounds"),new Error("Index out of bounds");if(i===n.length)e.appendChild(t);else{const s=n[i];e.insertBefore(t,s)}}function I({parentElement:e,id:t,position:i,dimensions:n}){var s=document.createElement("div");return e.style.position||(e.style.position="relative"),s.id=t,s.style.position="absolute",s.style.width=n&&n.width?n.width.toString()+"px":"100%",s.style.height=n&&n.height?n.height.toString()+"px":"100%",s.style.top=(i?.top.toString()??"0")+"px",s.style.left=(i?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",e.appendChild(s),s}function f(e){e.style.display="block",e.style.position="absolute",e.style.zIndex="-1",e.style.opacity="0",e.style.width="0px !important",e.style.height="0px !important",e.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(e=>{e.repeat||function(e){for(const t of n)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e),function(e){for(const t of s)e.code===t[0]&&t[1].forEach((t=>t(e)))}(e)})),window.addEventListener("keyup",(e=>{for(const t of a)e.code===t[0]&&t[1].forEach((t=>t(e)))}))},3164:(e,t,i)=>{i.d(t,{getFileExtension:()=>a,removeFilePath:()=>s});var n=i(2843);function s(e){const t=/(?:.*[\\/])([^\\/]+)$/.exec(e);return t&&t.length>1?t[1]:e}function a(e){if((0,n.isNullOrEmpty)(e))return"";const t=e.split(".").pop();if(t&&t!==e)return t;const i=e.split("/").pop();return i&&i!==e?i:""}},739:(e,t,i)=>{function n(e=0,t=0,i=100){return Math.max(t,Math.min(e,i))}i.d(t,{clamp:()=>n})},6696:(e,t,i)=>{i.d(t,{audioSourceElementHTML:()=>u,createMediaPlayer:()=>c,getMediaDefaultsByMediaType:()=>m,getMediaTypeBySource:()=>l}),i(241),i(2976);var n=i(1319),s=i(3164);const a=["mp3","wav","ogg","aac","wma","flac","m4a"],r=["mp4","avi","mov","mkv","wmv","flv","webm","m4v"],o={type:"audio",autoplay:!1,muted:!1,loop:!1,preload:"auto"},d={type:"video",autoplay:!1,muted:!1,loop:!1,preload:"auto"};function l(e){return function(e){const t=e.toLowerCase();if(a.includes(t))return"audio";if(r.includes(t))return"video";throw new Error("Invalid file extension: "+e)}((0,s.getFileExtension)(e))}function m(e){switch(e){case"video":return d;case"audio":return o;default:throw new Error("Invalid file extension at: "+e)}}function c(e,t){const i=t&&"video"===t.type;let a=i?function(e,t){return`<video playsinline ${h(t)}>\n    ${e.map((e=>function(e){return`<source src="${e}" type="video/${(0,s.getFileExtension)(e)}">`}(e))).reduce(((e,t)=>e+t),"")}\n  </video>`}(e,t):function(e,t){return`<audio playsinline ${h(t)}>\n    ${e.map((e=>u(e))).reduce(((e,t)=>e+t),"")}\n  </audio>`}(e,t);const r=(0,n.getElementFromHTML)(a);return document.body.insertAdjacentElement("afterbegin",r),i||(0,n.hideElement)(r),r}function u(e){return`<source src="${e}" type="audio/${(0,s.getFileExtension)(e)}">`}function h(e){return` ${e.autoplay?"autoplay":""} ${e.muted?"muted":""} ${e.loop?"loop":""} ${e.preload?'preload="'+e.preload+'"':""}`.trimEnd()}},2843:(e,t,i)=>{function n(e){return"string"!=typeof e||!e||""===e}function s(e){return e.replace(/[^a-zA-Z0-9]/g,"")}function a(e){return e.replace(/%20/g," ")}i.d(t,{isNullOrEmpty:()=>n,removeSpecialCharacters:()=>s,replacePercentEncoding:()=>a})}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,i),a.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{i.r(n),i.d(n,{Soundboard:()=>l});var e=i(7930),t=i(1319),s=i(3164),a=i(2843),r=i(241),o=i(4785),d=i(6167);class l extends e.ObjectEventListener{container;containersClassList;itemClassList;_setMediaControllers=new Set;_mapMediaControllersById=new Map;_mapInputByComponentId=new Map;constructor(e){super(),this.container=e.container,this.containersClassList=e.containersClassList??[],this.itemClassList=e.itemClassList??[],this.addMediaList(e.arrMediaSrc)}static getInstantMP3DownloadLink(e){if(!l.isMyInstantsLink(e))throw new Error("Not a MyInstants link");const t=e.match(/\/instant\/([^/]+)\/?/);return!t||t.length<2?e:`https://www.myinstants.com/media/sounds/${t[1].replace(/-\d+$/,"")}.mp3`}static isMyInstantsLink(e){return e.includes("myinstants.com")}async addMediaList(e){let t=[];for(let i=0;i<e.length;++i){const n=this.getSourceInputDefaultOptions(e[i]),s=await this.addMedia(n);t.push(s)}return t}getCustomMediaComponentMediaOptions(e){const t=structuredClone(e);return l.isMyInstantsLink(e.src)&&(t.src=l.getInstantMP3DownloadLink(e.src)),t}get components(){return Array.from(this._setMediaControllers)}get length(){return this.components.length}async addMedia(e,i){let n;return n=(0,t.isValidYoutubeUrlOrId)(e.src)?await this.addIframe(this.container.id,e,i):await this.addMediaComponent(this.container.id,this.getCustomMediaComponentMediaOptions(e),i),this.setComponentNameById(n.media.id,n.media.name),n}getSourceInputDefaultOptions(e){return"string"==typeof e?{src:e,autoRepeatOnPlay:!0}:e}addYoutubeList(e=[]){e.map((e=>this.getSourceInputDefaultOptions(e))).forEach((e=>{this.addIframe(`${this.container.id}IframeTableItem${e.src}`,e)}))}addAudioList(e=[]){e.map((e=>this.getSourceInputDefaultOptions(e))).forEach((e=>this.addMediaComponent(this.container.id,this.getCustomMediaComponentMediaOptions(e))))}addComponentInteractionBlockEvent(e,t){e.media.addEventListener("oninteractionblocked",(()=>{e.media.currentTime=0,t.autoRepeatOnPlay?e.media.playWithoutTriggerEvents():e.media.toggle()}))}getInputBySource(e){if(!this._mapInputByComponentId.has(e))throw new Error("Element src not on sound table.");return this._mapInputByComponentId.get(e)}get componentsControllers(){return Array.from(this._setMediaControllers)}getElementMediaContainer(e,i=""){const n=(0,t.getElementFromHTML)((0,d.templateSoundboardItemContainer)(e,i));return n.classList.add(...this.containersClassList),n}setComponentNameById(e,t){const i=this.getElementItemNameContainerById(e);i.innerHTML=(0,a.replacePercentEncoding)(t),i.setAttribute("title",(0,a.replacePercentEncoding)(t))}getElementItemNameContainerById(e){const t=this._mapMediaControllersById.get(e);if(!t)throw new Error("Component does not exist.");const i=t.mediaContainer.querySelector(".sound-table-media-name");if(!i)throw new Error("Media name for this element was removed.");return i}getNewMediaComponentId(e,t){return(0,a.removeSpecialCharacters)(e+"AudioElement"+(0,s.removeFilePath)(t.src)+crypto.randomUUID())}getNewYoutubeIframeId(e,t){return(0,a.removeSpecialCharacters)(e+"YoutubeIframe"+(0,s.removeFilePath)(t.src)+crypto.randomUUID())}async addMediaComponent(e,i,n){const s=this.getNewMediaComponentId(e,i);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);n=n??this.length;const a=this.getElementMediaContainer(e);a.classList.add("loading","not-ready"),(0,t.insertElementAtIndex)(this.container,a,n);const o=await r.MediaComponent.createMediaComponent({src:i.src,mediaElementId:s,blockInteraction:!0,container:a});await o.load(),o.startsAt=i.startsAt??0;const d=this.addInputElementToContainer(a,o,o.id,i.src),l={media:o,input:d.input,inputContainer:d.container,buttonRemoveItem:d.buttonElement,mediaContainer:a,itemOptions:i,index:n};return o.container.classList.add("sound-table-item",...this.itemClassList),this._setMediaControllers.add(l),this._mapMediaControllersById.set(o.id,l),this.addComponentInteractionBlockEvent(l,i),this.setComponentNameById(o.id,o.name),a.classList.remove("loading","not-ready"),l}async addIframe(e,i,n){const s=this.getNewYoutubeIframeId(e,i);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);n=n??this.length;const a=this.getElementMediaContainer(e);a.classList.add("loading","not-ready"),(0,t.insertElementAtIndex)(this.container,a,n);const r=new o.YoutubeIframe({iframeId:s,videoId:i.src,parentElement:a,startsAt:i.startsAt??0,classList:["sound-table-item","overflow-hidden",...this.itemClassList],blockInteraction:!0}),d=this.addInputElementToContainer(a,r,r.id,i.src),l={media:r,input:d.input,inputContainer:d.container,buttonRemoveItem:d.buttonElement,mediaContainer:a,itemOptions:i,index:n};return this._setMediaControllers.add(l),this._mapMediaControllersById.set(r.id,l),await o.YoutubeIframe.buildSingleIframe(r),this.addComponentInteractionBlockEvent(l,i),this.setComponentNameById(s,r.videoName),a.classList.remove("loading","not-ready"),l}async changeComponentSourceToInputValue(e){const t=this._mapMediaControllersById.get(e);if(!t)throw new Error("Component id does not exist");return await this.changeComponentSource(e,t.input.value)}async changeComponentSource(e,i){let n=this._mapMediaControllersById.get(e);if(!n)throw new Error("Component id does not exist");return(0,t.isValidYoutubeUrlOrId)(i)&&n.media instanceof o.YoutubeIframe?await this.changeYoutubeIframeSource(e,i):(this.removeComponentById(e),n=await this.addMedia({src:i,autoRepeatOnPlay:n.itemOptions.autoRepeatOnPlay},n.index)),this._mapMediaControllersById.delete(e),this._mapInputByComponentId.delete(e),this._mapMediaControllersById.set(n.media.id,n),this._mapInputByComponentId.set(n.media.id,n.input),this.setComponentNameById(n.media.id,n.media.name),n}async changeMediaComponentSource(e,t){const i=this._mapMediaControllersById.get(e);if(!i)throw new Error("Component id does not exist");if(!(i.media instanceof r.MediaComponent))throw new Error("Invalid operation");i.itemOptions.src=t;const n=this.getCustomMediaComponentMediaOptions(i.itemOptions),s=this.getNewMediaComponentId(i.mediaContainer.id,n);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);await i.media.changeSource(n.src,s)}async changeYoutubeIframeSource(e,i){const n=this._mapMediaControllersById.get(e);if(!n)throw new Error("Component id does not exist");if(!(n.media instanceof o.YoutubeIframe))throw new Error("Invalid operation");if(!(0,t.isValidYoutubeUrlOrId)(i))throw new Error("Invalid youtube URL");n.itemOptions.src=i;const s=this.getNewYoutubeIframeId(n.mediaContainer.id,n.itemOptions);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);await n.media.changeVideo({iframeId:s,videoId:i,startsAt:0})}addInputElementToContainer(e,i,n,s){const a=(0,t.getElementFromHTML)((0,d.templateSoundboardInput)(n,"Source",s));e.insertAdjacentElement("beforeend",a);const r=a.querySelector(".sound-table-input"),o=a.querySelector(".sound-table-remove-item-button");return r.addEventListener("input",(()=>{const e=this.components.filter((e=>e.media.id!==i.id));this.callEventsByName("input",r.value,i,e),this.callEventsByName("oninput",r.value,i,e),this.callEventsByName("inputchange",r.value,i,e),this.callEventsByName("oninputchange",r.value,i,e)})),o.addEventListener("click",(()=>{const e=this.components.filter((e=>e.media.id!==i.id));this.removeItem(i),this.callEventsByName("removeelement",r.value,i,e),this.callEventsByName("onremoveelement",r.value,i,e),this.callEventsByName("removeitem",r.value,i,e),this.callEventsByName("onremoveitem",r.value,i,e)})),{input:r,container:a,buttonElement:o}}removeComponent(e){return this.removeComponentById(e.media.id)}removeItem(e){return this.removeComponentById(e.id)}removeComponentById(e){const t=this._mapMediaControllersById.get(e);t&&(t.media.destroy(),t.mediaContainer.remove(),this._mapMediaControllersById.delete(e),this._mapInputByComponentId.delete(e),this._setMediaControllers.delete(t))}}})(),Soundboard=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
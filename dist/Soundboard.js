var Soundboard;(()=>{"use strict";var t={173:(t,e,n)=>{n.d(e,{AudioComponent:()=>l});var i=n(7930),s=n(7353),o=n(1319),r=n(3164),a=n(6555);class l extends i.ObjectEventListener{src;audioElement;_container;_blockInteraction=!1;_divBlockInteraction;constructor(t){super(),this.src=t.src,this._container=t.container,this.audioElement=t.audioElement,this._blockInteraction=!!t.blockInteraction,t.audioElementId&&(this.audioElement.id=t.audioElementId),this.audioElement.classList.add("audio-component"),this.audioElement.addEventListener("ended",(()=>{this.stop()})),this._container.id||(this._container.id=t.audioElementId+"AudioComponentContainer"),this._container.classList.add("audio-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction(),this.setElementsAttributes()}destroy(){this.container.remove()}get isPlaying(){return!this.audioElement.paused}set id(t){this.audioElement.id=t}get id(){return this.audioElement.id}get _videoInfoAttributeList(){return[["audio-component-src",this.src],["audio-component-name",(0,r.removeFilePath)(this.src)]]}get name(){return(0,r.removeFilePath)(this.src)}setElementsAttributes(){(0,o.setAttributeListForElement)(this.audioElement,this._videoInfoAttributeList),(0,o.setAttributeListForElement)(this.container,this._videoInfoAttributeList),(0,o.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.audioElement.paused}get fileName(){return this.audioElement.src||this.audioElement.querySelector("source")?.src||""}get currentTime(){return this.audioElement.currentTime}set currentTime(t){this.audioElement.currentTime=t}get sourceElements(){return Array.from(this.audioElement.querySelectorAll("source"))}changeSource(t,e){this.id=e,this.src=t,this.audioElement.innerHTML=(0,s.sourceElementHTML)(this.src),this.audioElement.load(),this.setElementsAttributes(),this.stop()}playWithoutTriggerEvents(){var t=this.audioElement.play();return void 0!==t&&t.then((t=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.audioElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("audio-component-playing"),this._divBlockInteraction.classList.add("audio-component-playing"),this._container.classList.remove("audio-component-paused"),this._divBlockInteraction.classList.remove("audio-component-paused")}setClassesPaused(){this._container.classList.add("audio-component-paused"),this._divBlockInteraction.classList.add("audio-component-paused"),this._container.classList.remove("audio-component-playing"),this._divBlockInteraction.classList.remove("audio-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.audioElement.currentTime=0,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.audioElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.audioElement.volume=1,this.callEventsByName("onunmute",this),this}seek(t,e){return this.currentTime=t,this.callEventsByName("onseek",this),this}get dimensions(){return(0,o.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(t){const e=(0,o.createInvisibleDivAboveParent)({parentElement:t._container,id:`invisibleDivBlockInteraction${t._container.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("audio-component-div-block-interaction"),e}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createAudioComponentOnBody(t){const e=await new a.AudioComponentFactory(t.src).buildOnBody();return new l({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}static async createAudioComponent(t){if(t.container===document.body||!t.container)return this.createAudioComponentOnBody(t);const e=await new a.AudioComponentFactory(t.src).build(t.container);return new l({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}}},6555:(t,e,n)=>{n.d(e,{AudioComponentFactory:()=>o});var i=n(7353),s=n(6401);class o extends s.ComponentContainer{constructor(t,e){super("audioComponent",(0,i.createInvisiblePlayer)([t],e))}async buildSubComponents(t){}}},6401:(t,e,n)=>{n.d(e,{ComponentContainer:()=>i});class i{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(t,e){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw new Error("Invalid template for scene component. Template id: "+e);this.templateElement=t}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(e),document.body.appendChild(this.templateElement);this.componentName=t}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(t,e){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let n=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,n+1),await t.build(e,`${this.componentName}${t.componentName.capitalizeFirstLetter()}${n}`)}async buildOnBody(t){this._element=document.createElement("div"),t&&(this._element.id=t);for(let t of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",t);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${t}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(t,e){for(let e of this.getTemplateCloneNodes())t.insertAdjacentElement("afterbegin",e);return await this.buildSubComponents(t),t}}},6167:(t,e,n)=>{n.d(e,{templateSoundboardInput:()=>o,templateSoundboardItemContainer:()=>s});var i=n(2843);function s(t,e=""){return`\n  <div id="${t}SoundTableItem" class="sound-table-item-container">\n      <div class="sound-table-media-name-container position-absolute bottom-100 start-0 text-truncate" style="max-width: 100%;">\n        <span class="sound-table-media-name fw-bolder text-dark text-truncate" title="${(0,i.replacePercentEncoding)(e)}">\n          ${(0,i.replacePercentEncoding)(e)}\n        </span>\n      </div>\n  </div>\n  `.trim()}function o(t,e,n="",i=""){return`\n    <div class="sound-table-input-container text-truncate position-absolute top-0 start-0 w-100 h-100" style="z-index: 999 !important; pointer-events: none !important;">\n      <div class="form-floating position-absolute bottom-0 start-0" style="pointer-events: auto !important;">\n        <input type="text" value="${n}" class="form-control sound-table-input text-truncate" id="urlInput${t}" placeholder="${i}">\n        <label for="urlInput${t}">${e}</label>\n      </div>\n\n      <div class="sound-table-remove-item-container position-absolute top-0 end-0" style="pointer-events: auto !important;">\n        <button type="button" class="sound-table-remove-item-button btn-close badge rounded-0 bg-danger opacity-100 p-3">\n        </button>\n      </div>\n    </div>\n  `}},2152:(t,e,n)=>{function i(t){return`\n  <div id="${t}">\n  </div>\n  `.trim()}n.d(e,{templateBackgroundYoutubeIframeElement:()=>i})},5102:(t,e,n)=>{n.d(e,{YoutubeIframe:()=>a});var i=n(1319),s=(n(4763),n(739)),o=n(2152),r=(n(4785),n(3362),n(7930));class a extends r.ObjectEventListener{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;_videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;topDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new r.ObjectEventListener;constructor(t){if(a._dictYoutubeIframeById.has(t.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=t.iframeId,this._startsAt=t.startsAt??0,this._videoId=t.videoId,this._startMuted=!!t.startMuted,this._blockInteraction=!!t.blockInteraction,this._iframeContainer=a.getYoutubeIframeElement({iframeId:t.iframeId,classList:t.classList}),this._iframeParentElement=a.setupParentFromYoutubeIframe({parentElement:t.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=t.dimensions??(0,i.getElementDimensions)(this._iframeParentElement),a._dictYoutubeIframeById.set(t.iframeId,this),this.setVideoInfo().then((()=>{this.setExternalHTMLElementsAttributes()}))}get name(){return this.videoName}get container(){return this._iframeContainer}get videoId(){return(0,i.extractYouTubeId)(this._videoId)}destroy(){this.player.destroy(),this.container.remove(),a._dictYoutubeIframeById.delete(this.id)}async setVideoInfo(){const t=await this.getVideoInfo();this.videoName=t&&t.title?t.title:"",this.channelName=t&&t.author_name?t.author_name:"",this.videoThumb=t&&t.thumbnail_url?t.thumbnail_url:"",this.channelURL=t&&t.author_url?t.author_url:""}async changeVideo(t){if((0,i.isValidYoutubeUrlOrId)(t.videoId)){for(;!this.player||!this.player.loadVideoById;)await(0,i.delay)(100);this.prepareOptions(t),await this.loadVideo(),this.player.seekTo(this.startsAt,!0),this.isPlaying?this.playWithoutTriggerEvents():this.pauseWithoutTriggerEvents()}}prepareOptions(t){this.id=t.iframeId,this._videoId=t.videoId,this.startsAt=t.startsAt??this.startsAt}async loadVideo(){this.player.loadVideoById({videoId:this.videoId,startSeconds:this.startsAt,suggestedQuality:"highres"}),await this.setVideoInfo(),this.setExternalHTMLElementsAttributes()}async getVideoInfo(){const t=await(0,i.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));if(!t.error)return await t.data().json();console.error(t.error)}onPlayerReady(t){this._startMuted&&this.player.mute(),a._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),a.checkIfEveryIframeIsReady()}onPlayerStateChange(t){t.data===a._youtubeAPIReference.PlayerState.PLAYING?(this._isPlaying=!0,this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this,this.isPlaying)),100),this.setClassesIframePlaying()):this._playingObserverInterval&&(clearInterval(this._playingObserverInterval),this.setClassesIframePaused(),this._isPlaying=!1,this._playingObserverInterval=null),this.callEventsByName("playerstatechange",this,this.isPlaying),this.callEventsByName("onplayerstatechange",this,this.isPlaying)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(t){this.seek(t)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,s.clamp)(this._startsAt,0,this._startsAt)}set startsAt(t){this._startsAt=(0,s.clamp)(t,0,t)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(t,e=!1,n=!1){return this.callEventsByName("onseek",t,e,n,this),t+=n?this._startsAt:0,this.player.seekTo(t,e),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...a._dictYoutubeIframeById.keys()].some((t=>!this._arrYoutubeIframeIdReady.includes(t)))||(this.arrObjectToSetOnEveryIframeReady.forEach((t=>t.setup(a._dictYoutubeIframeById))),a._dictYoutubeIframeById.forEach(((t,e)=>{t.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:t,classList:e}){const n=document.createElement("div");return n.classList.add("yt-iframe-container"),e&&n.classList.add(...e),n.id=`containerYoutubeIframe${t}`,n.insertAdjacentHTML("afterbegin",(0,o.templateBackgroundYoutubeIframeElement)(t)),n}static setupParentFromYoutubeIframe({parentElement:t,iframeContainer:e}){const n=t??document.body;return n.classList.add("yt-iframe-parent"),n.insertAdjacentElement("afterbegin",e),n}setExternalHTMLElements(){this.createInvisibleDivTop(),this.createInvisibleDivBlockInteraction(),this.setExternalHTMLElementsAttributes()}setExternalHTMLElementsAttributes(){this.setIframeContainerAttributes(),this.setTopDivAttributes(),this.setDivBlockInteractionAttributes()}createInvisibleDivTop(){this.topDiv=a.getInvisibleTopDiv(this),this.topDiv.style.zIndex="990"}createInvisibleDivBlockInteraction(){this._divBlockInteraction=a.getInvisibleDivBlockInteraction(this),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(t=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}setDivBlockInteractionAttributes(){this.divBlockInteraction&&(0,i.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}setIframeContainerAttributes(){this._iframeContainer&&(0,i.setAttributeListForElement)(this._iframeContainer,this._videoInfoAttributeList)}setTopDivAttributes(){this.topDiv&&(0,i.setAttributeListForElement)(this.topDiv,this._videoInfoAttributeList)}set blockInteraction(t){this._blockInteraction=t,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new a._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;get _videoInfoAttributeList(){return[["yt-iframe-id",this.id],["yt-iframe-video-name",this.videoName],["yt-iframe-video-channel-name",this.channelName],["yt-iframe-video-thumb-url",this.videoThumb],["yt-iframe-video-channel-url",this.channelURL]]}static async buildSingleIframe(t){if(!document.getElementById("ytIframeAPIScriptTag")){var e=document.createElement("script");e.id="ytIframeAPIScriptTag",e.src="https://www.youtube.com/iframe_api";var n=document.getElementsByTagName("script")[0];n&&n.parentNode&&n.parentNode.insertBefore(e,n)}return await(0,i.waitUntilElementExists)("#ytIframeAPIScriptTag"),await(0,i.pollForVariableAsync)("YT",(t=>"function"==typeof t.Player&&t.Player.prototype&&t.Player.prototype.constructor===t.Player&&t.loaded),(e=>{a._youtubeAPIReference=e,t.build()})),t}static buildIframes(){if(!document.getElementById("ytIframeAPIScriptTag")){var t=document.createElement("script");t.id="ytIframeAPIScriptTag",t.src="https://www.youtube.com/iframe_api";var e=document.getElementsByTagName("script")[0];e&&e.parentNode&&e.parentNode.insertBefore(t,e)}(0,i.waitUntilElementExists)("#ytIframeAPIScriptTag").then((()=>{(0,i.pollForVariable)("YT",(t=>"function"==typeof t.Player&&t.Player.prototype&&t.Player.prototype.constructor===t.Player&&t.loaded),(t=>{a._youtubeAPIReference=t,a.setYoutubeIframeElements()}))}))}build(){this.setExternalHTMLElements(),this.initPlayer()}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((t,e)=>{t.isPlayerReady||t.build()}))}static getInvisibleTopDiv(t){return(0,i.createInvisibleDivAboveParent)({parentElement:document.getElementById(t.id).parentElement,id:`invisibleTopDivHoldToDrag${t.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:.2*t.dimensions.height}})}static getInvisibleDivBlockInteraction(t){const e=(0,i.createInvisibleDivAboveParent)({parentElement:document.getElementById(t.id).parentElement,id:`invisibleDivBlockInteraction${t.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("yt-div-block-interaction"),e}}},4785:(t,e,n)=>{n.d(e,{YoutubeIframe:()=>i.YoutubeIframe});var i=n(5102)},3362:(t,e,n)=>{n(5102)},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},4763:(t,e,n)=>{n(1319),n(8586)},8586:(t,e,n)=>{n(1319)},7930:(t,e,n)=>{n.d(e,{ObjectEventListener:()=>i});class i{eventsByName=new Map;addEventListener(t,e){this.eventsByName.has(t.toLowerCase())?this.eventsByName.get(t.toLowerCase()).push(e):this.eventsByName.set(t.toLowerCase(),[e])}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t(...e)))}}},7353:(t,e,n)=>{n.d(e,{createInvisiblePlayer:()=>o,sourceElementHTML:()=>r}),n(2976);var i=n(1319),s=n(3164);function o(t,e){const n=(0,i.getElementFromHTML)(function(t,e){return`<audio controls ${e?function(t){return` ${t.id?'id="'+t.id+'"':""} ${t.autoPlay||t.autoplay?"autoplay":""} ${t.muted?"muted":""} ${t.loop?"loop":""} ${t.preload?'preload="'+t.preload+'"':""}`.trimEnd()}(e):""}>\n    ${t.map((t=>r(t))).reduce(((t,e)=>t+e),"")}\n  </audio>`}(t,e));return document.body.insertAdjacentElement("afterbegin",n),(0,i.hideElement)(n),n}function r(t){return`<source src="${t}" type="audio/${(0,s.getFileExtension)(t)}">`}n(173)},1319:(t,e,n)=>{n.d(e,{createInvisibleDivAboveParent:()=>I,delay:()=>y,extractYouTubeId:()=>l,getElementDimensions:()=>u,getElementFromHTML:()=>c,handlePromise:()=>r,hideElement:()=>v,isValidYoutubeUrlOrId:()=>a,pollForVariable:()=>m,pollForVariableAsync:()=>h,setAttributeListForElement:()=>d,waitUntilElementExists:()=>p});const i=new Map,s=new Map,o=new Map;async function r(t){try{const e=await t;return{data:()=>e,error:null}}catch(t){return console.error(t),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}function a(t){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(t)||/^[a-zA-Z0-9_-]{11}$/.test(t)}function l(t){const e=t.match(/[?&]v=([^?&]+)/);return e&&e[1]?e[1]:11===t.length?t:null}function d(t,e){e.forEach((([e,n])=>{t.setAttribute(e,n)}))}function c(t,e=!0){if(!(t=e?t.trim():t))return null;const n=document.createElement("template");n.innerHTML=t;const i=n.content.children;return 1===i.length?i[0]:Array.from(i)}function u(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function m(t,e,n){const i=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(i),n(window[t]))}),100)}async function h(t,e,n){return new Promise((i=>{const s=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(s),n(window[t]),i())}),100)}))}function p(t){return new Promise((e=>{if(document.querySelector(t))return e(document.querySelector(t));const n=new MutationObserver((i=>{document.querySelector(t)&&(n.disconnect(),e(document.querySelector(t)))}));n.observe(document.body,{childList:!0,subtree:!0})}))}async function y(t){return new Promise((e=>setTimeout(e,t)))}function I({parentElement:t,id:e,position:n,dimensions:i}){var s=document.createElement("div");return t.style.position||(t.style.position="relative"),s.id=e,s.style.position="absolute",s.style.width=i&&i.width?i.width.toString()+"px":"100%",s.style.height=i&&i.height?i.height.toString()+"px":"100%",s.style.top=(n?.top.toString()??"0")+"px",s.style.left=(n?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",t.appendChild(s),s}function v(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of i)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of s)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of o)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},3164:(t,e,n)=>{n.d(e,{getFileExtension:()=>o,removeFilePath:()=>s});var i=n(2843);function s(t){const e=/(?:.*[\\/])([^\\/]+)$/.exec(t);return e&&e.length>1?e[1]:t}function o(t){if((0,i.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const n=t.split("/").pop();return n&&n!==t?n:""}},739:(t,e,n)=>{function i(t=0,e=0,n=100){return Math.max(e,Math.min(t,n))}n.d(e,{clamp:()=>i})},2843:(t,e,n)=>{function i(t){return"string"!=typeof t||!t||""===t}function s(t){return t.replace(/[^a-zA-Z0-9]/g,"")}function o(t){return t.replace(/%20/g," ")}n.d(e,{isNullOrEmpty:()=>i,removeSpecialCharacters:()=>s,replacePercentEncoding:()=>o})}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{n.r(i),n.d(i,{Soundboard:()=>d});var t=n(7930),e=n(1319),s=n(3164),o=n(2843),r=n(173),a=n(4785),l=n(6167);class d extends t.ObjectEventListener{container;containersClassList;itemClassList;_setMediaControllers=new Set;_mapMediaControllersById=new Map;_mapInputByComponentId=new Map;constructor(t){super(),this.container=t.container,this.containersClassList=t.containersClassList??[],this.itemClassList=t.itemClassList??[],this.addMediaList(t.arrMediaSrc)}static getInstantMP3DownloadLink(t){if(!d.isMyInstantsLink(t))throw new Error("Not a MyInstants link");const e=t.match(/\/instant\/([^/]+)\/?/);return!e||e.length<2?t:`https://www.myinstants.com/media/sounds/${e[1].replace(/-\d+$/,"")}.mp3`}static isMyInstantsLink(t){return t.includes("myinstants.com")}async addMediaList(t){let e=[];for(let n=0;n<t.length;++n){const i=this.getSourceInputDefaultOptions(t[n]),s=await this.addMedia(i);e.push(s)}return e}getCustomAudioComponentMediaOptions(t){const e=structuredClone(t);return d.isMyInstantsLink(t.src)&&(e.src=d.getInstantMP3DownloadLink(t.src)),e}async addMedia(t){let n;return n=(0,e.isValidYoutubeUrlOrId)(t.src)?await this.addIframe(this.container.id,t):await this.addAudioComponent(this.container.id,this.getCustomAudioComponentMediaOptions(t)),this.setComponentNameById(n.media.id,n.media.name),n}getSourceInputDefaultOptions(t){return"string"==typeof t?{src:t,autoRepeatOnPlay:!0}:t}addYoutubeList(t=[]){t.map((t=>this.getSourceInputDefaultOptions(t))).forEach((t=>{this.addIframe(`${this.container.id}IframeTableItem${t.src}`,t)}))}addAudioList(t=[]){t.map((t=>this.getSourceInputDefaultOptions(t))).forEach((t=>this.addAudioComponent(this.container.id,this.getCustomAudioComponentMediaOptions(t))))}addComponentInteractionBlockEvent(t,e){t.media.addEventListener("oninteractionblocked",(()=>{t.media.seek(0,!0),e.autoRepeatOnPlay?t.media.playWithoutTriggerEvents():t.media.toggle()}))}getInputBySource(t){if(!this._mapInputByComponentId.has(t))throw new Error("Element src not on sound table.");return this._mapInputByComponentId.get(t)}get componentsControllers(){return Array.from(this._setMediaControllers)}getElementMediaContainer(t,n=""){const i=(0,e.getElementFromHTML)((0,l.templateSoundboardItemContainer)(t,n));return i.classList.add(...this.containersClassList),i}setComponentNameById(t,e){const n=this.getElementItemNameContainerById(t);n.innerHTML=(0,o.replacePercentEncoding)(e),n.setAttribute("title",(0,o.replacePercentEncoding)(e))}getElementItemNameContainerById(t){const e=this._mapMediaControllersById.get(t);if(!e)throw new Error("Component does not exist.");const n=e.mediaContainer.querySelector(".sound-table-media-name");if(!n)throw new Error("Media name for this element was removed.");return n}getNewAudioComponentId(t,e){return(0,o.removeSpecialCharacters)(t+"AudioElement"+(0,s.removeFilePath)(e.src))}getNewYoutubeIframeId(t,e){return(0,o.removeSpecialCharacters)(t+"YoutubeIframe"+(0,s.removeFilePath)(e.src))}async addAudioComponent(t,e){const n=this.getNewAudioComponentId(t,e);if(this._mapMediaControllersById.has(n))throw new Error("A component with this id already exists: "+n);const i=this.getElementMediaContainer(t);this.container.insertAdjacentElement("beforeend",i);const s=await r.AudioComponent.createAudioComponent({src:e.src,audioElementId:n,blockInteraction:!0,container:i}),o=this.addInputElementToContainer(i,s,s.id,e.src),a={media:s,input:o.input,inputContainer:o.container,buttonRemoveItem:o.buttonElement,mediaContainer:i,itemOptions:e};return s.container.classList.add("sound-table-item",...this.itemClassList),this._setMediaControllers.add(a),this._mapMediaControllersById.set(s.id,a),this.addComponentInteractionBlockEvent(a,e),this.setComponentNameById(s.id,s.name),a}async addIframe(t,e){const n=this.getNewYoutubeIframeId(t,e);if(this._mapMediaControllersById.has(n))throw new Error("A component with this id already exists: "+n);const i=this.getElementMediaContainer(t);this.container.insertAdjacentElement("beforeend",i);const s=new a.YoutubeIframe({iframeId:n,videoId:e.src,parentElement:i,startsAt:0,classList:["sound-table-item","overflow-hidden",...this.itemClassList],blockInteraction:!0}),o=this.addInputElementToContainer(i,s,s.id,e.src),r={media:s,input:o.input,inputContainer:o.container,buttonRemoveItem:o.buttonElement,mediaContainer:i,itemOptions:e};return this._setMediaControllers.add(r),this._mapMediaControllersById.set(s.id,r),await a.YoutubeIframe.buildSingleIframe(s),this.addComponentInteractionBlockEvent(r,e),this.setComponentNameById(n,s.videoName),r}async changeComponentSourceToInputValue(t){const e=this._mapMediaControllersById.get(t);if(!e)throw new Error("Component id does not exist");return e.media instanceof a.YoutubeIframe?this.changeYoutubeIframeSource(t,e.input.value):this.changeAudioComponentSource(t,e.input.value),this._mapMediaControllersById.delete(t),this._mapMediaControllersById.set(e.media.id,e),this.setComponentNameById(e.media.id,e.media.name),e}async changeComponentSource(t,e){const n=this._mapMediaControllersById.get(t);if(!n)throw new Error("Component id does not exist");return n.media instanceof a.YoutubeIframe?this.changeYoutubeIframeSource(t,e):this.changeAudioComponentSource(t,e),this._mapMediaControllersById.delete(t),this._mapMediaControllersById.set(n.media.id,n),this.setComponentNameById(n.media.id,n.media.name),n}changeAudioComponentSource(t,e){const n=this._mapMediaControllersById.get(t);if(!n)throw new Error("Component id does not exist");if(!(n.media instanceof r.AudioComponent))throw new Error("Invalid operation");n.itemOptions.src=e;const i=this.getCustomAudioComponentMediaOptions(n.itemOptions),s=this.getNewAudioComponentId(n.mediaContainer.id,i);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);n.media.changeSource(i.src,s)}async changeYoutubeIframeSource(t,n){const i=this._mapMediaControllersById.get(t);if(!i)throw new Error("Component id does not exist");if(!(i.media instanceof a.YoutubeIframe))throw new Error("Invalid operation");if(!(0,e.isValidYoutubeUrlOrId)(n))throw new Error("Invalid youtube URL");i.itemOptions.src=n;const s=this.getNewYoutubeIframeId(i.mediaContainer.id,i.itemOptions);if(this._mapMediaControllersById.has(s))throw new Error("A component with this id already exists: "+s);await i.media.changeVideo({iframeId:s,videoId:n,startsAt:0})}addInputElementToContainer(t,n,i,s){const o=(0,e.getElementFromHTML)((0,l.templateSoundboardInput)(i,"Source",s));t.insertAdjacentElement("beforeend",o);const r=o.querySelector(".sound-table-input"),a=o.querySelector(".sound-table-remove-item-button");return r.addEventListener("input",(()=>{this.callEventsByName("input",r.value,n),this.callEventsByName("oninput",r.value,n),this.callEventsByName("inputchange",r.value,n),this.callEventsByName("oninputchange",r.value,n)})),a.addEventListener("click",(()=>{this.removeItem(n),this.callEventsByName("removeelement",r.value,n),this.callEventsByName("onremoveelement",r.value,n),this.callEventsByName("removeitem",r.value,n),this.callEventsByName("onremoveitem",r.value,n)})),{input:r,container:o,buttonElement:a}}removeComponent(t){return this.removeItemById(t.media.id)}removeItem(t){return this.removeItemById(t.id)}removeItemById(t){const e=this._mapMediaControllersById.get(t);e&&(e.media.destroy(),e.mediaContainer.remove(),this._mapMediaControllersById.delete(t),this._mapInputByComponentId.delete(t),this._setMediaControllers.delete(e))}}})(),Soundboard=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
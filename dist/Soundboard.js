var Soundboard;(()=>{"use strict";var t={173:(t,e,i)=>{i.d(e,{AudioComponent:()=>l});var n=i(7930),s=i(7353),r=i(1319),a=i(3164),o=i(6555);class l extends n.ObjectEventListener{src;audioElement;_container;_blockInteraction=!1;_divBlockInteraction;constructor(t){super(),this.src=t.src,this._container=t.container,this.audioElement=t.audioElement,this._blockInteraction=!!t.blockInteraction,t.audioElementId&&(this.audioElement.id=t.audioElementId),this.audioElement.classList.add("audio-component"),this.audioElement.addEventListener("ended",(()=>{this.stop()})),this._container.id||(this._container.id=t.audioElementId+"AudioComponentContainer"),this._container.classList.add("audio-component-container"),this._divBlockInteraction=this.getInvisibleDivBlockInteraction(this),this.setupInvisibleDivBlockInteraction(),this.setElementsAttributes()}get isPlaying(){return!this.audioElement.paused}get id(){return this.audioElement.id}get _videoInfoAttributeList(){return[["audio-component-src",this.src],["audio-component-name",(0,a.removeFilePath)(this.src)]]}setElementsAttributes(){(0,r.setAttributeListForElement)(this.audioElement,this._videoInfoAttributeList),(0,r.setAttributeListForElement)(this.container,this._videoInfoAttributeList),(0,r.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}get divBlockInteraction(){return this._divBlockInteraction}get container(){return this._container}get paused(){return this.audioElement.paused}get fileName(){return this.audioElement.src||this.audioElement.querySelector("source")?.src||""}get currentTime(){return this.audioElement.currentTime}set currentTime(t){this.audioElement.currentTime=t}get sourceElements(){return Array.from(this.audioElement.querySelectorAll("source"))}changeSource(t){this.src=t,this.audioElement.innerHTML=(0,s.sourceElementHTML)(this.src),this.audioElement.load(),this.setElementsAttributes(),this.stop()}playWithoutTriggerEvents(){var t=this.audioElement.play();return void 0!==t&&t.then((t=>{})).catch((()=>{this.stop()})),this.setClassesPlaying(),this}pauseWithoutTriggerEvents(){return this.audioElement.pause(),this.setClassesPaused(),this}setClassesPlaying(){this._container.classList.add("audio-component-playing"),this._divBlockInteraction.classList.add("audio-component-playing"),this._container.classList.remove("audio-component-paused"),this._divBlockInteraction.classList.remove("audio-component-paused")}setClassesPaused(){this._container.classList.add("audio-component-paused"),this._divBlockInteraction.classList.add("audio-component-paused"),this._container.classList.remove("audio-component-playing"),this._divBlockInteraction.classList.remove("audio-component-playing")}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}stop(){return this.pause(),this.audioElement.currentTime=0,this.callEventsByName("onstop",this),this}toggle(){return this.paused?this.playWithoutTriggerEvents():this.pause(),this.callEventsByName("ontoggle",this),this}mute(){return this.audioElement.volume=0,this.callEventsByName("onmute",this),this}unmute(){return this.audioElement.volume=1,this.callEventsByName("onunmute",this),this}seek(t,e){return this.currentTime=t,this.callEventsByName("onseek",this),this}get dimensions(){return(0,r.getElementDimensions)(this._container)}getInvisibleDivBlockInteraction(t){const e=(0,r.createInvisibleDivAboveParent)({parentElement:t._container,id:`invisibleDivBlockInteraction${t._container.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("audio-component-div-block-interaction"),e}setupInvisibleDivBlockInteraction(){this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(()=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}static async createAudioComponentOnBody(t){const e=await new o.AudioComponentFactory(t.src).buildOnBody();return new l({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}static async createAudioComponent(t){if(t.container===document.body||!t.container)return this.createAudioComponentOnBody(t);const e=await new o.AudioComponentFactory(t.src).build(t.container);return new l({src:t.src,container:e,audioElement:e.querySelector("audio"),audioElementId:t.audioElementId,blockInteraction:t.blockInteraction})}}},6555:(t,e,i)=>{i.d(e,{AudioComponentFactory:()=>r});var n=i(7353),s=i(6401);class r extends s.ComponentContainer{constructor(t,e){super("audioComponent",(0,n.createInvisiblePlayer)([t],e))}async buildSubComponents(t){}}},6401:(t,e,i)=>{i.d(e,{ComponentContainer:()=>n});class n{_element=null;templateElement;componentName;subComponentCountByName=new Map;subComponents=[];constructor(t,e){if("string"==typeof e){const t=document.getElementById(e);if(!t)throw new Error("Invalid template for scene component. Template id: "+e);this.templateElement=t}else this.templateElement=document.createElement("template"),this.templateElement.content.appendChild(e),document.body.appendChild(this.templateElement);this.componentName=t}getTemplateCloneNodes(){return this.templateElement.content.cloneNode(!0).children}async buildSingleSubComponent(t,e){this.subComponentCountByName.has(this.componentName)&&this.subComponentCountByName.set(this.componentName,0);let i=this.subComponentCountByName.get(this.componentName);return this.subComponentCountByName.set(this.componentName,i+1),await t.build(e,`${this.componentName}${t.componentName.capitalizeFirstLetter()}${i}`)}async buildOnBody(t){this._element=document.createElement("div"),t&&(this._element.id=t);for(let t of this.getTemplateCloneNodes())this._element.insertAdjacentElement("afterbegin",t);if(!this._element)throw new Error(`Fail building SceneComponent. ElementId: ${t}`);return await this.buildSubComponents(document.body),document.body.insertAdjacentElement("beforeend",this._element),this._element}async build(t,e){for(let e of this.getTemplateCloneNodes())t.insertAdjacentElement("afterbegin",e);return await this.buildSubComponents(t),t}}},6167:(t,e,i)=>{function n(t){return`\n  <div id="${t}SoundTableItem" class="sound-table-item-container">\n  </div>\n  `.trim()}function s(t,e,i="",n=""){return`\n    <div class="form-floating sound-table-input-container">\n      <input type="text" value="${i}" class="form-control sound-table-input" id="urlInput${t}" placeholder="${n}">\n      <label for="urlInput${t}">${e}</label>\n    </div>\n  `}i.d(e,{templateSoundboardInput:()=>s,templateSoundboardItemContainer:()=>n})},2152:(t,e,i)=>{function n(t){return`\n  <div id="${t}">\n  </div>\n  `.trim()}i.d(e,{templateBackgroundYoutubeIframeElement:()=>n})},5102:(t,e,i)=>{i.d(e,{YoutubeIframe:()=>o});var n=i(1319),s=(i(4763),i(739)),r=i(2152),a=(i(4785),i(3362),i(7930));class o extends a.ObjectEventListener{static arrObjectToSetOnEveryIframeReady=[];static _dictYoutubeIframeById=new Map;static _arrYoutubeIframeIdReady=[];player;_isPlayerReady=!1;id;_videoId;videoName="";videoThumb="";channelURL="";channelName="";_iframeElement=null;_iframeContainer;_iframeParentElement;_isPlaying=!1;_dimensions;topDiv;_startsAt;_blockInteraction=!1;_divBlockInteraction=null;_startMuted;_playingObserverInterval=null;_eventListener=new a.ObjectEventListener;constructor(t){if(o._dictYoutubeIframeById.has(t.iframeId))throw new Error("Invalid iframe there's already an iframe with this id.");super(),this.id=t.iframeId,this._startsAt=t.startsAt??0,this._videoId=t.videoId,this._startMuted=!!t.startMuted,this._blockInteraction=!!t.blockInteraction,this._iframeContainer=o.getYoutubeIframeElement({iframeId:t.iframeId,classList:t.classList}),this._iframeParentElement=o.setupParentFromYoutubeIframe({parentElement:t.parentElement??document.body,iframeContainer:this._iframeContainer}),this.setClassesIframePaused(),this._dimensions=t.dimensions??(0,n.getElementDimensions)(this._iframeParentElement),o._dictYoutubeIframeById.set(t.iframeId,this),this.setVideoInfo().then((()=>{this.setExternalHTMLElementsAttributes()}))}get videoId(){return(0,n.extractYouTubeId)(this._videoId)}async setVideoInfo(){const t=await this.getVideoInfo();this.videoName=t&&t.title?t.title:"",this.channelName=t&&t.author_name?t.author_name:"",this.videoThumb=t&&t.thumbnail_url?t.thumbnail_url:"",this.channelURL=t&&t.author_url?t.author_url:""}changeVideo(t){(0,n.isValidYoutubeUrlOrId)(t.videoId)&&(this.player&&this.player.loadVideoById?(this.prepareOptions(t),this.player.seekTo(this.startsAt,!0),this.isPlaying?this.playWithoutTriggerEvents():this.pauseWithoutTriggerEvents()):setTimeout((()=>this.changeVideo(t)),100))}prepareOptions(t){this.id=t.iframeId,this._videoId=t.videoId,this.startsAt=t.startsAt??this.startsAt,this.loadVideo()}loadVideo(){this.player.loadVideoById({videoId:this.videoId,startSeconds:this.startsAt,suggestedQuality:"highres"}),this.setVideoInfo().then((()=>{this.setExternalHTMLElementsAttributes()}))}async getVideoInfo(){const t=await(0,n.handlePromise)(fetch(`https://www.youtube.com/oembed?url=${this.videoURL}&format=json`));if(!t.error)return await t.data().json();console.error(t.error)}onPlayerReady(t){this._startMuted&&this.player.mute(),o._arrYoutubeIframeIdReady.push(this.id),this._iframeElement=document.getElementById(this.id),this.setClassesIframePaused(),this.player.setPlaybackQuality("highres"),this.player.seekTo(this._startsAt??0,!0),this.player.pauseVideo(),this._isPlayerReady=!0,this.callEventsByName("oniframeready",this),o.checkIfEveryIframeIsReady()}onPlayerStateChange(t){t.data===o._youtubeAPIReference.PlayerState.PLAYING?(this._isPlaying=!0,this._playingObserverInterval=setInterval((()=>this.callEventsByName("onplaying",this,this.isPlaying)),100),this.setClassesIframePlaying()):this._playingObserverInterval&&(clearInterval(this._playingObserverInterval),this.setClassesIframePaused(),this._isPlaying=!1,this._playingObserverInterval=null),this.callEventsByName("playerstatechange",this,this.isPlaying),this.callEventsByName("onplayerstatechange",this,this.isPlaying)}setClassesIframePlaying(){this._iframeElement&&(this._iframeElement.classList.remove("yt-paused"),this._iframeElement.classList.add("yt-playing")),this._iframeContainer.classList.remove("yt-paused"),this._iframeContainer.classList.add("yt-playing"),this._iframeParentElement.classList.remove("yt-paused"),this._iframeParentElement.classList.add("yt-playing")}setClassesIframePaused(){this._iframeElement&&(this._iframeElement.classList.add("yt-paused"),this._iframeElement.classList.remove("yt-playing")),this._iframeContainer.classList.add("yt-paused"),this._iframeContainer.classList.remove("yt-playing"),this._iframeParentElement.classList.add("yt-paused"),this._iframeParentElement.classList.remove("yt-playing")}onEveryYoutubeIframeReady(){this.callEventsByName("oneveryyoutubeiframeready")}get divBlockInteraction(){return this._divBlockInteraction}get videoURL(){return`https://www.youtube.com/watch?v=${this.videoId}`}get parentElement(){return this._iframeParentElement}get iframeElement(){if(!this._iframeElement)throw new Error("Iframe was called but it's not ready.");return this._iframeElement}get isPlayerReady(){return this._isPlayerReady}get duration(){return this.player.getDuration()-this._startsAt}get playerDuration(){return this.player.getDuration()}set currentTime(t){this.seek(t)}get currentTime(){return this.player.getCurrentTime()-this._startsAt}get playerCurrentTime(){return this.player.getCurrentTime()}get progressPercent(){return this.currentTime/this.duration}get playerProgressPercent(){return this.playerCurrentTime/this.playerDuration}get startMuted(){return this._startMuted}get isPlaying(){return this._isPlaying}get dimensions(){return this._dimensions}get startsAt(){return(0,s.clamp)(this._startsAt,0,this._startsAt)}set startsAt(t){this._startsAt=(0,s.clamp)(t,0,t)}toggle(){return this.isPlaying?this.pause():this.play(),this}play(){return this.playWithoutTriggerEvents(),this.callEventsByName("onplay",this),this}playWithoutTriggerEvents(){return this.player.playVideo(),this._isPlaying=!0,this.setClassesIframePlaying(),this}pause(){return this.pauseWithoutTriggerEvents(),this.callEventsByName("onpause",this),this}pauseWithoutTriggerEvents(){return this.player.pauseVideo(),this._isPlaying=!1,this.setClassesIframePaused(),this}seek(t,e=!1,i=!1){return this.callEventsByName("onseek",t,e,i,this),t+=i?this._startsAt:0,this.player.seekTo(t,e),this}mute(){return this.player.mute(),this}unmute(){return this.player.unmute(),this}static checkIfEveryIframeIsReady(){[...o._dictYoutubeIframeById.keys()].some((t=>!this._arrYoutubeIframeIdReady.includes(t)))||(this.arrObjectToSetOnEveryIframeReady.forEach((t=>t.setup(o._dictYoutubeIframeById))),o._dictYoutubeIframeById.forEach(((t,e)=>{t.onEveryYoutubeIframeReady()})))}static getYoutubeIframeElement({iframeId:t,classList:e}){const i=document.createElement("div");return i.classList.add("yt-iframe-container"),e&&i.classList.add(...e),i.id=`containerYoutubeIframe${t}`,i.insertAdjacentHTML("afterbegin",(0,r.templateBackgroundYoutubeIframeElement)(t)),i}static setupParentFromYoutubeIframe({parentElement:t,iframeContainer:e}){const i=t??document.body;return i.classList.add("yt-iframe-parent"),i.insertAdjacentElement("afterbegin",e),i}setExternalHTMLElements(){this.createInvisibleDivTop(),this.createInvisibleDivBlockInteraction(),this.setExternalHTMLElementsAttributes()}setExternalHTMLElementsAttributes(){this.setIframeContainerAttributes(),this.setTopDivAttributes(),this.setDivBlockInteractionAttributes()}createInvisibleDivTop(){this.topDiv=o.getInvisibleTopDiv(this),this.topDiv.style.zIndex="990"}createInvisibleDivBlockInteraction(){this._divBlockInteraction=o.getInvisibleDivBlockInteraction(this),this._divBlockInteraction.style.display=this._blockInteraction?"block":"none",this._divBlockInteraction.style.zIndex="995",this._divBlockInteraction.addEventListener("click",(t=>{this.callEventsByName("onclickinteractionblocked",this,this._divBlockInteraction),this.callEventsByName("oninteractionblocked",this,this._divBlockInteraction)}))}setDivBlockInteractionAttributes(){this.divBlockInteraction&&(0,n.setAttributeListForElement)(this.divBlockInteraction,this._videoInfoAttributeList)}setIframeContainerAttributes(){this._iframeContainer&&(0,n.setAttributeListForElement)(this._iframeContainer,this._videoInfoAttributeList)}setTopDivAttributes(){this.topDiv&&(0,n.setAttributeListForElement)(this.topDiv,this._videoInfoAttributeList)}set blockInteraction(t){this._blockInteraction=t,this._divBlockInteraction&&(this._divBlockInteraction.style.display=this._blockInteraction?"block":"none")}initPlayer(){this.player=new o._youtubeAPIReference.Player(this.id,{videoId:this.videoId,width:this.dimensions.width,height:this.dimensions.height,playerVars:{rel:0,iv_load_policy:3,showinfo:0,controls:0,autoplay:0},events:{onReady:this.onPlayerReady.bind(this),onStateChange:this.onPlayerStateChange.bind(this)}})}static _youtubeAPIReference;get _videoInfoAttributeList(){return[["yt-iframe-id",this.id],["yt-iframe-video-name",this.videoName],["yt-iframe-video-channel-name",this.channelName],["yt-iframe-video-thumb-url",this.videoThumb],["yt-iframe-video-channel-url",this.channelURL]]}static async buildSingleIframe(t){if(!document.getElementById("ytIframeAPIScriptTag")){var e=document.createElement("script");e.id="ytIframeAPIScriptTag",e.src="https://www.youtube.com/iframe_api";var i=document.getElementsByTagName("script")[0];i&&i.parentNode&&i.parentNode.insertBefore(e,i)}return await(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag"),await(0,n.pollForVariableAsync)("YT",(t=>"function"==typeof t.Player&&t.Player.prototype&&t.Player.prototype.constructor===t.Player&&t.loaded),(e=>{o._youtubeAPIReference=e,t.build()})),t}static buildIframes(){if(!document.getElementById("ytIframeAPIScriptTag")){var t=document.createElement("script");t.id="ytIframeAPIScriptTag",t.src="https://www.youtube.com/iframe_api";var e=document.getElementsByTagName("script")[0];e&&e.parentNode&&e.parentNode.insertBefore(t,e)}(0,n.waitUntilElementExists)("#ytIframeAPIScriptTag").then((()=>{(0,n.pollForVariable)("YT",(t=>"function"==typeof t.Player&&t.Player.prototype&&t.Player.prototype.constructor===t.Player&&t.loaded),(t=>{o._youtubeAPIReference=t,o.setYoutubeIframeElements()}))}))}build(){this.setExternalHTMLElements(),this.initPlayer()}static setYoutubeIframeElements(){this._dictYoutubeIframeById.forEach(((t,e)=>{t.isPlayerReady||t.build()}))}static getInvisibleTopDiv(t){return(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(t.id).parentElement,id:`invisibleTopDivHoldToDrag${t.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:.2*t.dimensions.height}})}static getInvisibleDivBlockInteraction(t){const e=(0,n.createInvisibleDivAboveParent)({parentElement:document.getElementById(t.id).parentElement,id:`invisibleDivBlockInteraction${t.id}`,position:{top:0,left:0},dimensions:{width:t.dimensions.width,height:t.dimensions.height}});return e.classList.add("yt-div-block-interaction"),e}}},4785:(t,e,i)=>{i.d(e,{YoutubeIframe:()=>n.YoutubeIframe});var n=i(5102)},3362:(t,e,i)=>{i(5102)},2976:()=>{String.prototype.isNullOrEmpty=function(){return"string"!=typeof this&&!this&&""!==this},String.prototype.truncate=function(t,e="..."){return(this.length>t?this.substring(0,t)+e:this).toString()},String.prototype.removeAccents=function(){return this.normalize("NFD").replace(/[\u0300-\u036f]/g,"")},String.prototype.capitalizeFirstLetter=function(){return"string"!=typeof this?"":this.charAt(0).toUpperCase()+this.substring(1)},String.prototype.zeroBefore=function(){return this.padStart(2,"0")}},4763:(t,e,i)=>{i(1319),i(8586)},8586:(t,e,i)=>{i(1319)},7930:(t,e,i)=>{i.d(e,{ObjectEventListener:()=>n});class n{eventsByName=new Map;addEventListener(t,e){this.eventsByName.has(t.toLowerCase())?this.eventsByName.get(t.toLowerCase()).push(e):this.eventsByName.set(t.toLowerCase(),[e])}getEventsByName(t){return this.eventsByName.has(t.toLowerCase())||this.eventsByName.set(t.toLowerCase(),[]),this.eventsByName.get(t.toLowerCase())}callEventsByName(t,...e){this.getEventsByName(t).forEach((t=>t(...e)))}}},7353:(t,e,i)=>{i.d(e,{createInvisiblePlayer:()=>r,sourceElementHTML:()=>a}),i(2976);var n=i(1319),s=i(3164);function r(t,e){const i=(0,n.getElementFromHTML)(function(t,e){return`<audio controls ${e?function(t){return` ${t.id?'id="'+t.id+'"':""} ${t.autoPlay||t.autoplay?"autoplay":""} ${t.muted?"muted":""} ${t.loop?"loop":""} ${t.preload?'preload="'+t.preload+'"':""}`.trimEnd()}(e):""}>\n    ${t.map((t=>a(t))).reduce(((t,e)=>t+e),"")}\n  </audio>`}(t,e));return document.body.insertAdjacentElement("afterbegin",i),(0,n.hideElement)(i),i}function a(t){return`<source src="${t}" type="audio/${(0,s.getFileExtension)(t)}">`}i(173)},1319:(t,e,i)=>{i.d(e,{createInvisibleDivAboveParent:()=>y,extractYouTubeId:()=>l,getElementDimensions:()=>u,getElementFromHTML:()=>c,handlePromise:()=>a,hideElement:()=>v,isValidYoutubeUrlOrId:()=>o,pollForVariable:()=>m,pollForVariableAsync:()=>h,setAttributeListForElement:()=>d,waitUntilElementExists:()=>p});const n=new Map,s=new Map,r=new Map;async function a(t){try{const e=await t;return{data:()=>e,error:null}}catch(t){return console.error(t),{data:()=>{throw new Error("Couldn't fetch, check SafePromise.error for details.")},error:t instanceof Error?t:new Error(String(t))}}}function o(t){return/^(http(s)?:\/\/)?((w){3}.)?youtu(be|.be)?(\.com)?\/.+/.test(t)||/^[a-zA-Z0-9_-]{11}$/.test(t)}function l(t){const e=t.match(/[?&]v=([^?&]+)/);return e&&e[1]?e[1]:11===t.length?t:null}function d(t,e){e.forEach((([e,i])=>{t.setAttribute(e,i)}))}function c(t,e=!0){if(!(t=e?t.trim():t))return null;const i=document.createElement("template");i.innerHTML=t;const n=i.content.children;return 1===n.length?n[0]:Array.from(n)}function u(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height}}function m(t,e,i){const n=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(n),i(window[t]))}),100)}async function h(t,e,i){return new Promise((n=>{const s=setInterval((()=>{void 0!==window[t]&&e(window[t])&&(clearInterval(s),i(window[t]),n())}),100)}))}function p(t){return new Promise((e=>{if(document.querySelector(t))return e(document.querySelector(t));const i=new MutationObserver((n=>{document.querySelector(t)&&(i.disconnect(),e(document.querySelector(t)))}));i.observe(document.body,{childList:!0,subtree:!0})}))}function y({parentElement:t,id:e,position:i,dimensions:n}){var s=document.createElement("div");return t.style.position||(t.style.position="relative"),s.id=e,s.style.position="absolute",s.style.width=n&&n.width?n.width.toString()+"px":"100%",s.style.height=n&&n.height?n.height.toString()+"px":"100%",s.style.top=(i?.top.toString()??"0")+"px",s.style.left=(i?.left.toString()??"0")+"px",s.style.opacity="0",s.style.pointerEvents="auto",t.appendChild(s),s}function v(t){t.style.display="block",t.style.position="absolute",t.style.zIndex="-1",t.style.opacity="0",t.style.width="0px !important",t.style.height="0px !important",t.setAttribute("hidden","")}new Map,window.addEventListener("keydown",(t=>{t.repeat||function(t){for(const e of n)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t),function(t){for(const e of s)t.code===e[0]&&e[1].forEach((e=>e(t)))}(t)})),window.addEventListener("keyup",(t=>{for(const e of r)t.code===e[0]&&e[1].forEach((e=>e(t)))}))},3164:(t,e,i)=>{i.d(e,{getFileExtension:()=>r,removeFilePath:()=>s});var n=i(2843);function s(t){const e=/(?:.*[\\/])([^\\/]+)$/.exec(t);return e&&e.length>1?e[1]:t}function r(t){if((0,n.isNullOrEmpty)(t))return"";const e=t.split(".").pop();if(e&&e!==t)return e;const i=t.split("/").pop();return i&&i!==t?i:""}},739:(t,e,i)=>{function n(t=0,e=0,i=100){return Math.max(e,Math.min(t,i))}i.d(e,{clamp:()=>n})},2843:(t,e,i)=>{function n(t){return"string"!=typeof t||!t||""===t}i.d(e,{isNullOrEmpty:()=>n})}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{i.r(n),i.d(n,{Soundboard:()=>o});var t=i(7930),e=i(1319),s=i(173),r=i(4785),a=i(6167);class o extends t.ObjectEventListener{container;iframesClassList;containersClassList;_setMediaControllers=new Set;_mapMediaControllersById=new Map;_mapInputByComponentId=new Map;constructor(t){super(),this.container=t.container,this.iframesClassList=t.iframesClassList??[],this.containersClassList=t.containersClassList??[];const e=t.arrMediaSrc?t.arrMediaSrc.map((t=>this.getSourceInputDefaultOptions(t))):[],i=t.arrVideoId?t.arrVideoId.map((t=>this.getSourceInputDefaultOptions(t))):[];this.addAudioList(e),this.addYoutubeList(i)}getSourceInputDefaultOptions(t){return"string"==typeof t?{src:t,autoRepeatOnPlay:!0}:t}addYoutubeList(t=[]){t.map((t=>this.getSourceInputDefaultOptions(t))).forEach((t=>{this.addIframe(`${this.container.id}IframeTableItem${t.src}`,t)}))}addAudioList(t=[]){t.map((t=>this.getSourceInputDefaultOptions(t))).forEach((t=>{this.addAudioComponent(this.container.id,t)}))}addComponentInteractionBlockEvent(t,e){t.media.addEventListener("oninteractionblocked",(()=>{t.media.seek(0,!0),e.autoRepeatOnPlay?t.media.playWithoutTriggerEvents():t.media.toggle()}))}getInputBySource(t){if(!this._mapInputByComponentId.has(t))throw new Error("Element src not on sound table.");return this._mapInputByComponentId.get(t)}get componentsControllers(){return Array.from(this._setMediaControllers)}getElementMediaContainer(t){const i=(0,e.getElementFromHTML)((0,a.templateSoundboardItemContainer)(t));return i.classList.add(...this.containersClassList),i}addAudioComponent(t,e){const i=this.getElementMediaContainer(t);this.container.insertAdjacentElement("beforeend",i),s.AudioComponent.createAudioComponent({src:e.src,audioElementId:t,blockInteraction:!0,container:i}).then((t=>{const n=this.addInputElementToContainer(i,t,t.id,e.src),s={media:t,input:n.input,inputContainer:n.container};this._setMediaControllers.add(s),this._mapMediaControllersById.set(t.id,s),this.addComponentInteractionBlockEvent(s,e)}))}addIframe(t,e){if(this._mapMediaControllersById.has(t))throw new Error("A Iframe with this id already exists: "+t);const i=this.getElementMediaContainer(t);this.container.insertAdjacentElement("beforeend",i);const n=new r.YoutubeIframe({iframeId:t,videoId:e.src,parentElement:i,startsAt:0,classList:["sound-table-item",...this.iframesClassList],blockInteraction:!0}),s=this.addInputElementToContainer(i,n,n.id,e.src),a={media:n,input:s.input,inputContainer:s.container};this._setMediaControllers.add(a),this._mapMediaControllersById.set(n.id,a),r.YoutubeIframe.buildSingleIframe(n).then((()=>this.addComponentInteractionBlockEvent(a,e)))}changeComponentSourceToInputValue(t){const e=this._mapMediaControllersById.get(t);e&&(e.media instanceof r.YoutubeIframe?e.media.changeVideo({iframeId:e.input.value,videoId:e.input.value,startsAt:0}):e.media.changeSource(e.input.value),this._mapMediaControllersById.delete(t),this._mapMediaControllersById.set(e.media.id,e))}changeComponentSource(t,e){const i=this._mapMediaControllersById.get(t);i&&(i.media instanceof r.YoutubeIframe?i.media.changeVideo({iframeId:e,videoId:e,startsAt:0}):i.media.changeSource(e))}addInputElementToContainer(t,i,n,s){const r=(0,e.getElementFromHTML)((0,a.templateSoundboardInput)(n,"Source",s));t.insertAdjacentElement("beforeend",r);const o=r.querySelector("input");return o.addEventListener("input",(()=>{this.callEventsByName("input",o.value,i),this.callEventsByName("oninput",o.value,i),this.callEventsByName("inputchange",o.value,i),this.callEventsByName("oninputchange",o.value,i)})),{input:o,container:r}}}})(),Soundboard=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,